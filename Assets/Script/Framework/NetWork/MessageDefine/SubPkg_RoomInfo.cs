/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SubPkg_RoomInfo : TBase
{
  private string _RoomName;
  private short _MapId;
  private sbyte _State;

  public string RoomName
  {
    get
    {
      return _RoomName;
    }
    set
    {
      __isset.RoomName = true;
      this._RoomName = value;
    }
  }

  public short MapId
  {
    get
    {
      return _MapId;
    }
    set
    {
      __isset.MapId = true;
      this._MapId = value;
    }
  }

  public sbyte State
  {
    get
    {
      return _State;
    }
    set
    {
      __isset.State = true;
      this._State = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool RoomName;
    public bool MapId;
    public bool State;
  }

  public SubPkg_RoomInfo() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            RoomName = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I16) {
            MapId = iprot.ReadI16();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Byte) {
            State = iprot.ReadByte();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("SubPkg_RoomInfo");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (RoomName != null && __isset.RoomName) {
      field.Name = "RoomName";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(RoomName);
      oprot.WriteFieldEnd();
    }
    if (__isset.MapId) {
      field.Name = "MapId";
      field.Type = TType.I16;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI16(MapId);
      oprot.WriteFieldEnd();
    }
    if (__isset.State) {
      field.Name = "State";
      field.Type = TType.Byte;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(State);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("SubPkg_RoomInfo(");
    sb.Append("RoomName: ");
    sb.Append(RoomName);
    sb.Append(",MapId: ");
    sb.Append(MapId);
    sb.Append(",State: ");
    sb.Append(State);
    sb.Append(")");
    return sb.ToString();
  }

}

