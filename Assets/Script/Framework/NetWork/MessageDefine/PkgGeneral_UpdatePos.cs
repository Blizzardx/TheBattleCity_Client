/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class PkgGeneral_UpdatePos : TBase
{
  private string _PlayerName;
  private SubPkg_Vector3 _Position;
  private double _StartTime;

  public string PlayerName
  {
    get
    {
      return _PlayerName;
    }
    set
    {
      __isset.PlayerName = true;
      this._PlayerName = value;
    }
  }

  public SubPkg_Vector3 Position
  {
    get
    {
      return _Position;
    }
    set
    {
      __isset.Position = true;
      this._Position = value;
    }
  }

  public double StartTime
  {
    get
    {
      return _StartTime;
    }
    set
    {
      __isset.StartTime = true;
      this._StartTime = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool PlayerName;
    public bool Position;
    public bool StartTime;
  }

  public PkgGeneral_UpdatePos() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            PlayerName = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.Struct) {
            Position = new SubPkg_Vector3();
            Position.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Double) {
            StartTime = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("PkgGeneral_UpdatePos");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (PlayerName != null && __isset.PlayerName) {
      field.Name = "PlayerName";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(PlayerName);
      oprot.WriteFieldEnd();
    }
    if (Position != null && __isset.Position) {
      field.Name = "Position";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      Position.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (__isset.StartTime) {
      field.Name = "StartTime";
      field.Type = TType.Double;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(StartTime);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("PkgGeneral_UpdatePos(");
    sb.Append("PlayerName: ");
    sb.Append(PlayerName);
    sb.Append(",Position: ");
    sb.Append(Position== null ? "<null>" : Position.ToString());
    sb.Append(",StartTime: ");
    sb.Append(StartTime);
    sb.Append(")");
    return sb.ToString();
  }

}

