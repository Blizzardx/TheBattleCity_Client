/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetWork.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FireInfo : TBase
  {
    private ThriftVector3 _currentPosition;
    private ThriftVector3 _fireDirection;
    private string _bulletName;

    public ThriftVector3 CurrentPosition
    {
      get
      {
        return _currentPosition;
      }
      set
      {
        __isset.currentPosition = true;
        this._currentPosition = value;
      }
    }

    public ThriftVector3 FireDirection
    {
      get
      {
        return _fireDirection;
      }
      set
      {
        __isset.fireDirection = true;
        this._fireDirection = value;
      }
    }

    public string BulletName
    {
      get
      {
        return _bulletName;
      }
      set
      {
        __isset.bulletName = true;
        this._bulletName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool currentPosition;
      public bool fireDirection;
      public bool bulletName;
    }

    public FireInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Struct) {
              CurrentPosition = new ThriftVector3();
              CurrentPosition.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              FireDirection = new ThriftVector3();
              FireDirection.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              BulletName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FireInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (CurrentPosition != null && __isset.currentPosition) {
        field.Name = "currentPosition";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        CurrentPosition.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (FireDirection != null && __isset.fireDirection) {
        field.Name = "fireDirection";
        field.Type = TType.Struct;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        FireDirection.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (BulletName != null && __isset.bulletName) {
        field.Name = "bulletName";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BulletName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FireInfo(");
      sb.Append("CurrentPosition: ");
      sb.Append(CurrentPosition== null ? "<null>" : CurrentPosition.ToString());
      sb.Append(",FireDirection: ");
      sb.Append(FireDirection== null ? "<null>" : FireDirection.ToString());
      sb.Append(",BulletName: ");
      sb.Append(BulletName);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
