/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GrenadeConfig : TBase
  {
    private int _diff;
    private int _respRange;
    private int _waitTime;

    public int Diff
    {
      get
      {
        return _diff;
      }
      set
      {
        __isset.diff = true;
        this._diff = value;
      }
    }

    public int RespRange
    {
      get
      {
        return _respRange;
      }
      set
      {
        __isset.respRange = true;
        this._respRange = value;
      }
    }

    public int WaitTime
    {
      get
      {
        return _waitTime;
      }
      set
      {
        __isset.waitTime = true;
        this._waitTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool diff;
      public bool respRange;
      public bool waitTime;
    }

    public GrenadeConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Diff = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              RespRange = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              WaitTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GrenadeConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.diff) {
        field.Name = "diff";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Diff);
        oprot.WriteFieldEnd();
      }
      if (__isset.respRange) {
        field.Name = "respRange";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RespRange);
        oprot.WriteFieldEnd();
      }
      if (__isset.waitTime) {
        field.Name = "waitTime";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WaitTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GrenadeConfig(");
      sb.Append("Diff: ");
      sb.Append(Diff);
      sb.Append(",RespRange: ");
      sb.Append(RespRange);
      sb.Append(",WaitTime: ");
      sb.Append(WaitTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
