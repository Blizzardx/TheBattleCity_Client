/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RunnerGameSettingTable implements org.apache.thrift.TBase<RunnerGameSettingTable, RunnerGameSettingTable._Fields>, java.io.Serializable, Cloneable, Comparable<RunnerGameSettingTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunnerGameSettingTable");

  private static final org.apache.thrift.protocol.TField INIT_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("initSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField GRAVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("gravity", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField JUMP_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("jumpSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField JUMP_START_RISE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jumpStartRiseTime", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField JUMP_GLIDE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jumpGlideTime", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SUPER_JUMP_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("superJumpSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SUPER_JUMP_START_RISE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("superJumpStartRiseTime", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SUPER_JUMP_GLIDE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("superJumpGlideTime", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField JUMP_END_DELAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jumpEndDelayTime", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField TRUNK_LOOP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("trunkLoopCount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField HIT_WAIT_TIME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("hitWaitTimeList", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RunnerGameSettingTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RunnerGameSettingTableTupleSchemeFactory());
  }

  public double initSpeed; // required
  public double gravity; // required
  public double jumpSpeed; // required
  public double jumpStartRiseTime; // required
  public double jumpGlideTime; // required
  public double superJumpSpeed; // required
  public double superJumpStartRiseTime; // required
  public double superJumpGlideTime; // required
  public double jumpEndDelayTime; // required
  public int trunkLoopCount; // required
  public List<Double> hitWaitTimeList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INIT_SPEED((short)1, "initSpeed"),
    GRAVITY((short)2, "gravity"),
    JUMP_SPEED((short)3, "jumpSpeed"),
    JUMP_START_RISE_TIME((short)4, "jumpStartRiseTime"),
    JUMP_GLIDE_TIME((short)5, "jumpGlideTime"),
    SUPER_JUMP_SPEED((short)6, "superJumpSpeed"),
    SUPER_JUMP_START_RISE_TIME((short)7, "superJumpStartRiseTime"),
    SUPER_JUMP_GLIDE_TIME((short)8, "superJumpGlideTime"),
    JUMP_END_DELAY_TIME((short)9, "jumpEndDelayTime"),
    TRUNK_LOOP_COUNT((short)10, "trunkLoopCount"),
    HIT_WAIT_TIME_LIST((short)11, "hitWaitTimeList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INIT_SPEED
          return INIT_SPEED;
        case 2: // GRAVITY
          return GRAVITY;
        case 3: // JUMP_SPEED
          return JUMP_SPEED;
        case 4: // JUMP_START_RISE_TIME
          return JUMP_START_RISE_TIME;
        case 5: // JUMP_GLIDE_TIME
          return JUMP_GLIDE_TIME;
        case 6: // SUPER_JUMP_SPEED
          return SUPER_JUMP_SPEED;
        case 7: // SUPER_JUMP_START_RISE_TIME
          return SUPER_JUMP_START_RISE_TIME;
        case 8: // SUPER_JUMP_GLIDE_TIME
          return SUPER_JUMP_GLIDE_TIME;
        case 9: // JUMP_END_DELAY_TIME
          return JUMP_END_DELAY_TIME;
        case 10: // TRUNK_LOOP_COUNT
          return TRUNK_LOOP_COUNT;
        case 11: // HIT_WAIT_TIME_LIST
          return HIT_WAIT_TIME_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INITSPEED_ISSET_ID = 0;
  private static final int __GRAVITY_ISSET_ID = 1;
  private static final int __JUMPSPEED_ISSET_ID = 2;
  private static final int __JUMPSTARTRISETIME_ISSET_ID = 3;
  private static final int __JUMPGLIDETIME_ISSET_ID = 4;
  private static final int __SUPERJUMPSPEED_ISSET_ID = 5;
  private static final int __SUPERJUMPSTARTRISETIME_ISSET_ID = 6;
  private static final int __SUPERJUMPGLIDETIME_ISSET_ID = 7;
  private static final int __JUMPENDDELAYTIME_ISSET_ID = 8;
  private static final int __TRUNKLOOPCOUNT_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INIT_SPEED, new org.apache.thrift.meta_data.FieldMetaData("initSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GRAVITY, new org.apache.thrift.meta_data.FieldMetaData("gravity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JUMP_SPEED, new org.apache.thrift.meta_data.FieldMetaData("jumpSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JUMP_START_RISE_TIME, new org.apache.thrift.meta_data.FieldMetaData("jumpStartRiseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JUMP_GLIDE_TIME, new org.apache.thrift.meta_data.FieldMetaData("jumpGlideTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUPER_JUMP_SPEED, new org.apache.thrift.meta_data.FieldMetaData("superJumpSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUPER_JUMP_START_RISE_TIME, new org.apache.thrift.meta_data.FieldMetaData("superJumpStartRiseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUPER_JUMP_GLIDE_TIME, new org.apache.thrift.meta_data.FieldMetaData("superJumpGlideTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JUMP_END_DELAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("jumpEndDelayTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRUNK_LOOP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("trunkLoopCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIT_WAIT_TIME_LIST, new org.apache.thrift.meta_data.FieldMetaData("hitWaitTimeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunnerGameSettingTable.class, metaDataMap);
  }

  public RunnerGameSettingTable() {
  }

  public RunnerGameSettingTable(
    double initSpeed,
    double gravity,
    double jumpSpeed,
    double jumpStartRiseTime,
    double jumpGlideTime,
    double superJumpSpeed,
    double superJumpStartRiseTime,
    double superJumpGlideTime,
    double jumpEndDelayTime,
    int trunkLoopCount,
    List<Double> hitWaitTimeList)
  {
    this();
    this.initSpeed = initSpeed;
    setInitSpeedIsSet(true);
    this.gravity = gravity;
    setGravityIsSet(true);
    this.jumpSpeed = jumpSpeed;
    setJumpSpeedIsSet(true);
    this.jumpStartRiseTime = jumpStartRiseTime;
    setJumpStartRiseTimeIsSet(true);
    this.jumpGlideTime = jumpGlideTime;
    setJumpGlideTimeIsSet(true);
    this.superJumpSpeed = superJumpSpeed;
    setSuperJumpSpeedIsSet(true);
    this.superJumpStartRiseTime = superJumpStartRiseTime;
    setSuperJumpStartRiseTimeIsSet(true);
    this.superJumpGlideTime = superJumpGlideTime;
    setSuperJumpGlideTimeIsSet(true);
    this.jumpEndDelayTime = jumpEndDelayTime;
    setJumpEndDelayTimeIsSet(true);
    this.trunkLoopCount = trunkLoopCount;
    setTrunkLoopCountIsSet(true);
    this.hitWaitTimeList = hitWaitTimeList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RunnerGameSettingTable(RunnerGameSettingTable other) {
    __isset_bitfield = other.__isset_bitfield;
    this.initSpeed = other.initSpeed;
    this.gravity = other.gravity;
    this.jumpSpeed = other.jumpSpeed;
    this.jumpStartRiseTime = other.jumpStartRiseTime;
    this.jumpGlideTime = other.jumpGlideTime;
    this.superJumpSpeed = other.superJumpSpeed;
    this.superJumpStartRiseTime = other.superJumpStartRiseTime;
    this.superJumpGlideTime = other.superJumpGlideTime;
    this.jumpEndDelayTime = other.jumpEndDelayTime;
    this.trunkLoopCount = other.trunkLoopCount;
    if (other.isSetHitWaitTimeList()) {
      List<Double> __this__hitWaitTimeList = new ArrayList<Double>(other.hitWaitTimeList);
      this.hitWaitTimeList = __this__hitWaitTimeList;
    }
  }

  public RunnerGameSettingTable deepCopy() {
    return new RunnerGameSettingTable(this);
  }

  @Override
  public void clear() {
    setInitSpeedIsSet(false);
    this.initSpeed = 0.0;
    setGravityIsSet(false);
    this.gravity = 0.0;
    setJumpSpeedIsSet(false);
    this.jumpSpeed = 0.0;
    setJumpStartRiseTimeIsSet(false);
    this.jumpStartRiseTime = 0.0;
    setJumpGlideTimeIsSet(false);
    this.jumpGlideTime = 0.0;
    setSuperJumpSpeedIsSet(false);
    this.superJumpSpeed = 0.0;
    setSuperJumpStartRiseTimeIsSet(false);
    this.superJumpStartRiseTime = 0.0;
    setSuperJumpGlideTimeIsSet(false);
    this.superJumpGlideTime = 0.0;
    setJumpEndDelayTimeIsSet(false);
    this.jumpEndDelayTime = 0.0;
    setTrunkLoopCountIsSet(false);
    this.trunkLoopCount = 0;
    this.hitWaitTimeList = null;
  }

  public double getInitSpeed() {
    return this.initSpeed;
  }

  public RunnerGameSettingTable setInitSpeed(double initSpeed) {
    this.initSpeed = initSpeed;
    setInitSpeedIsSet(true);
    return this;
  }

  public void unsetInitSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITSPEED_ISSET_ID);
  }

  /** Returns true if field initSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetInitSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __INITSPEED_ISSET_ID);
  }

  public void setInitSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITSPEED_ISSET_ID, value);
  }

  public double getGravity() {
    return this.gravity;
  }

  public RunnerGameSettingTable setGravity(double gravity) {
    this.gravity = gravity;
    setGravityIsSet(true);
    return this;
  }

  public void unsetGravity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRAVITY_ISSET_ID);
  }

  /** Returns true if field gravity is set (has been assigned a value) and false otherwise */
  public boolean isSetGravity() {
    return EncodingUtils.testBit(__isset_bitfield, __GRAVITY_ISSET_ID);
  }

  public void setGravityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRAVITY_ISSET_ID, value);
  }

  public double getJumpSpeed() {
    return this.jumpSpeed;
  }

  public RunnerGameSettingTable setJumpSpeed(double jumpSpeed) {
    this.jumpSpeed = jumpSpeed;
    setJumpSpeedIsSet(true);
    return this;
  }

  public void unsetJumpSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JUMPSPEED_ISSET_ID);
  }

  /** Returns true if field jumpSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetJumpSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __JUMPSPEED_ISSET_ID);
  }

  public void setJumpSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JUMPSPEED_ISSET_ID, value);
  }

  public double getJumpStartRiseTime() {
    return this.jumpStartRiseTime;
  }

  public RunnerGameSettingTable setJumpStartRiseTime(double jumpStartRiseTime) {
    this.jumpStartRiseTime = jumpStartRiseTime;
    setJumpStartRiseTimeIsSet(true);
    return this;
  }

  public void unsetJumpStartRiseTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JUMPSTARTRISETIME_ISSET_ID);
  }

  /** Returns true if field jumpStartRiseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJumpStartRiseTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JUMPSTARTRISETIME_ISSET_ID);
  }

  public void setJumpStartRiseTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JUMPSTARTRISETIME_ISSET_ID, value);
  }

  public double getJumpGlideTime() {
    return this.jumpGlideTime;
  }

  public RunnerGameSettingTable setJumpGlideTime(double jumpGlideTime) {
    this.jumpGlideTime = jumpGlideTime;
    setJumpGlideTimeIsSet(true);
    return this;
  }

  public void unsetJumpGlideTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JUMPGLIDETIME_ISSET_ID);
  }

  /** Returns true if field jumpGlideTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJumpGlideTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JUMPGLIDETIME_ISSET_ID);
  }

  public void setJumpGlideTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JUMPGLIDETIME_ISSET_ID, value);
  }

  public double getSuperJumpSpeed() {
    return this.superJumpSpeed;
  }

  public RunnerGameSettingTable setSuperJumpSpeed(double superJumpSpeed) {
    this.superJumpSpeed = superJumpSpeed;
    setSuperJumpSpeedIsSet(true);
    return this;
  }

  public void unsetSuperJumpSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPERJUMPSPEED_ISSET_ID);
  }

  /** Returns true if field superJumpSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperJumpSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPERJUMPSPEED_ISSET_ID);
  }

  public void setSuperJumpSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPERJUMPSPEED_ISSET_ID, value);
  }

  public double getSuperJumpStartRiseTime() {
    return this.superJumpStartRiseTime;
  }

  public RunnerGameSettingTable setSuperJumpStartRiseTime(double superJumpStartRiseTime) {
    this.superJumpStartRiseTime = superJumpStartRiseTime;
    setSuperJumpStartRiseTimeIsSet(true);
    return this;
  }

  public void unsetSuperJumpStartRiseTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPERJUMPSTARTRISETIME_ISSET_ID);
  }

  /** Returns true if field superJumpStartRiseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperJumpStartRiseTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPERJUMPSTARTRISETIME_ISSET_ID);
  }

  public void setSuperJumpStartRiseTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPERJUMPSTARTRISETIME_ISSET_ID, value);
  }

  public double getSuperJumpGlideTime() {
    return this.superJumpGlideTime;
  }

  public RunnerGameSettingTable setSuperJumpGlideTime(double superJumpGlideTime) {
    this.superJumpGlideTime = superJumpGlideTime;
    setSuperJumpGlideTimeIsSet(true);
    return this;
  }

  public void unsetSuperJumpGlideTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPERJUMPGLIDETIME_ISSET_ID);
  }

  /** Returns true if field superJumpGlideTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperJumpGlideTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPERJUMPGLIDETIME_ISSET_ID);
  }

  public void setSuperJumpGlideTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPERJUMPGLIDETIME_ISSET_ID, value);
  }

  public double getJumpEndDelayTime() {
    return this.jumpEndDelayTime;
  }

  public RunnerGameSettingTable setJumpEndDelayTime(double jumpEndDelayTime) {
    this.jumpEndDelayTime = jumpEndDelayTime;
    setJumpEndDelayTimeIsSet(true);
    return this;
  }

  public void unsetJumpEndDelayTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JUMPENDDELAYTIME_ISSET_ID);
  }

  /** Returns true if field jumpEndDelayTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJumpEndDelayTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JUMPENDDELAYTIME_ISSET_ID);
  }

  public void setJumpEndDelayTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JUMPENDDELAYTIME_ISSET_ID, value);
  }

  public int getTrunkLoopCount() {
    return this.trunkLoopCount;
  }

  public RunnerGameSettingTable setTrunkLoopCount(int trunkLoopCount) {
    this.trunkLoopCount = trunkLoopCount;
    setTrunkLoopCountIsSet(true);
    return this;
  }

  public void unsetTrunkLoopCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRUNKLOOPCOUNT_ISSET_ID);
  }

  /** Returns true if field trunkLoopCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTrunkLoopCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TRUNKLOOPCOUNT_ISSET_ID);
  }

  public void setTrunkLoopCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRUNKLOOPCOUNT_ISSET_ID, value);
  }

  public int getHitWaitTimeListSize() {
    return (this.hitWaitTimeList == null) ? 0 : this.hitWaitTimeList.size();
  }

  public java.util.Iterator<Double> getHitWaitTimeListIterator() {
    return (this.hitWaitTimeList == null) ? null : this.hitWaitTimeList.iterator();
  }

  public void addToHitWaitTimeList(double elem) {
    if (this.hitWaitTimeList == null) {
      this.hitWaitTimeList = new ArrayList<Double>();
    }
    this.hitWaitTimeList.add(elem);
  }

  public List<Double> getHitWaitTimeList() {
    return this.hitWaitTimeList;
  }

  public RunnerGameSettingTable setHitWaitTimeList(List<Double> hitWaitTimeList) {
    this.hitWaitTimeList = hitWaitTimeList;
    return this;
  }

  public void unsetHitWaitTimeList() {
    this.hitWaitTimeList = null;
  }

  /** Returns true if field hitWaitTimeList is set (has been assigned a value) and false otherwise */
  public boolean isSetHitWaitTimeList() {
    return this.hitWaitTimeList != null;
  }

  public void setHitWaitTimeListIsSet(boolean value) {
    if (!value) {
      this.hitWaitTimeList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INIT_SPEED:
      if (value == null) {
        unsetInitSpeed();
      } else {
        setInitSpeed((Double)value);
      }
      break;

    case GRAVITY:
      if (value == null) {
        unsetGravity();
      } else {
        setGravity((Double)value);
      }
      break;

    case JUMP_SPEED:
      if (value == null) {
        unsetJumpSpeed();
      } else {
        setJumpSpeed((Double)value);
      }
      break;

    case JUMP_START_RISE_TIME:
      if (value == null) {
        unsetJumpStartRiseTime();
      } else {
        setJumpStartRiseTime((Double)value);
      }
      break;

    case JUMP_GLIDE_TIME:
      if (value == null) {
        unsetJumpGlideTime();
      } else {
        setJumpGlideTime((Double)value);
      }
      break;

    case SUPER_JUMP_SPEED:
      if (value == null) {
        unsetSuperJumpSpeed();
      } else {
        setSuperJumpSpeed((Double)value);
      }
      break;

    case SUPER_JUMP_START_RISE_TIME:
      if (value == null) {
        unsetSuperJumpStartRiseTime();
      } else {
        setSuperJumpStartRiseTime((Double)value);
      }
      break;

    case SUPER_JUMP_GLIDE_TIME:
      if (value == null) {
        unsetSuperJumpGlideTime();
      } else {
        setSuperJumpGlideTime((Double)value);
      }
      break;

    case JUMP_END_DELAY_TIME:
      if (value == null) {
        unsetJumpEndDelayTime();
      } else {
        setJumpEndDelayTime((Double)value);
      }
      break;

    case TRUNK_LOOP_COUNT:
      if (value == null) {
        unsetTrunkLoopCount();
      } else {
        setTrunkLoopCount((Integer)value);
      }
      break;

    case HIT_WAIT_TIME_LIST:
      if (value == null) {
        unsetHitWaitTimeList();
      } else {
        setHitWaitTimeList((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INIT_SPEED:
      return Double.valueOf(getInitSpeed());

    case GRAVITY:
      return Double.valueOf(getGravity());

    case JUMP_SPEED:
      return Double.valueOf(getJumpSpeed());

    case JUMP_START_RISE_TIME:
      return Double.valueOf(getJumpStartRiseTime());

    case JUMP_GLIDE_TIME:
      return Double.valueOf(getJumpGlideTime());

    case SUPER_JUMP_SPEED:
      return Double.valueOf(getSuperJumpSpeed());

    case SUPER_JUMP_START_RISE_TIME:
      return Double.valueOf(getSuperJumpStartRiseTime());

    case SUPER_JUMP_GLIDE_TIME:
      return Double.valueOf(getSuperJumpGlideTime());

    case JUMP_END_DELAY_TIME:
      return Double.valueOf(getJumpEndDelayTime());

    case TRUNK_LOOP_COUNT:
      return Integer.valueOf(getTrunkLoopCount());

    case HIT_WAIT_TIME_LIST:
      return getHitWaitTimeList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INIT_SPEED:
      return isSetInitSpeed();
    case GRAVITY:
      return isSetGravity();
    case JUMP_SPEED:
      return isSetJumpSpeed();
    case JUMP_START_RISE_TIME:
      return isSetJumpStartRiseTime();
    case JUMP_GLIDE_TIME:
      return isSetJumpGlideTime();
    case SUPER_JUMP_SPEED:
      return isSetSuperJumpSpeed();
    case SUPER_JUMP_START_RISE_TIME:
      return isSetSuperJumpStartRiseTime();
    case SUPER_JUMP_GLIDE_TIME:
      return isSetSuperJumpGlideTime();
    case JUMP_END_DELAY_TIME:
      return isSetJumpEndDelayTime();
    case TRUNK_LOOP_COUNT:
      return isSetTrunkLoopCount();
    case HIT_WAIT_TIME_LIST:
      return isSetHitWaitTimeList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RunnerGameSettingTable)
      return this.equals((RunnerGameSettingTable)that);
    return false;
  }

  public boolean equals(RunnerGameSettingTable that) {
    if (that == null)
      return false;

    boolean this_present_initSpeed = true;
    boolean that_present_initSpeed = true;
    if (this_present_initSpeed || that_present_initSpeed) {
      if (!(this_present_initSpeed && that_present_initSpeed))
        return false;
      if (this.initSpeed != that.initSpeed)
        return false;
    }

    boolean this_present_gravity = true;
    boolean that_present_gravity = true;
    if (this_present_gravity || that_present_gravity) {
      if (!(this_present_gravity && that_present_gravity))
        return false;
      if (this.gravity != that.gravity)
        return false;
    }

    boolean this_present_jumpSpeed = true;
    boolean that_present_jumpSpeed = true;
    if (this_present_jumpSpeed || that_present_jumpSpeed) {
      if (!(this_present_jumpSpeed && that_present_jumpSpeed))
        return false;
      if (this.jumpSpeed != that.jumpSpeed)
        return false;
    }

    boolean this_present_jumpStartRiseTime = true;
    boolean that_present_jumpStartRiseTime = true;
    if (this_present_jumpStartRiseTime || that_present_jumpStartRiseTime) {
      if (!(this_present_jumpStartRiseTime && that_present_jumpStartRiseTime))
        return false;
      if (this.jumpStartRiseTime != that.jumpStartRiseTime)
        return false;
    }

    boolean this_present_jumpGlideTime = true;
    boolean that_present_jumpGlideTime = true;
    if (this_present_jumpGlideTime || that_present_jumpGlideTime) {
      if (!(this_present_jumpGlideTime && that_present_jumpGlideTime))
        return false;
      if (this.jumpGlideTime != that.jumpGlideTime)
        return false;
    }

    boolean this_present_superJumpSpeed = true;
    boolean that_present_superJumpSpeed = true;
    if (this_present_superJumpSpeed || that_present_superJumpSpeed) {
      if (!(this_present_superJumpSpeed && that_present_superJumpSpeed))
        return false;
      if (this.superJumpSpeed != that.superJumpSpeed)
        return false;
    }

    boolean this_present_superJumpStartRiseTime = true;
    boolean that_present_superJumpStartRiseTime = true;
    if (this_present_superJumpStartRiseTime || that_present_superJumpStartRiseTime) {
      if (!(this_present_superJumpStartRiseTime && that_present_superJumpStartRiseTime))
        return false;
      if (this.superJumpStartRiseTime != that.superJumpStartRiseTime)
        return false;
    }

    boolean this_present_superJumpGlideTime = true;
    boolean that_present_superJumpGlideTime = true;
    if (this_present_superJumpGlideTime || that_present_superJumpGlideTime) {
      if (!(this_present_superJumpGlideTime && that_present_superJumpGlideTime))
        return false;
      if (this.superJumpGlideTime != that.superJumpGlideTime)
        return false;
    }

    boolean this_present_jumpEndDelayTime = true;
    boolean that_present_jumpEndDelayTime = true;
    if (this_present_jumpEndDelayTime || that_present_jumpEndDelayTime) {
      if (!(this_present_jumpEndDelayTime && that_present_jumpEndDelayTime))
        return false;
      if (this.jumpEndDelayTime != that.jumpEndDelayTime)
        return false;
    }

    boolean this_present_trunkLoopCount = true;
    boolean that_present_trunkLoopCount = true;
    if (this_present_trunkLoopCount || that_present_trunkLoopCount) {
      if (!(this_present_trunkLoopCount && that_present_trunkLoopCount))
        return false;
      if (this.trunkLoopCount != that.trunkLoopCount)
        return false;
    }

    boolean this_present_hitWaitTimeList = true && this.isSetHitWaitTimeList();
    boolean that_present_hitWaitTimeList = true && that.isSetHitWaitTimeList();
    if (this_present_hitWaitTimeList || that_present_hitWaitTimeList) {
      if (!(this_present_hitWaitTimeList && that_present_hitWaitTimeList))
        return false;
      if (!this.hitWaitTimeList.equals(that.hitWaitTimeList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RunnerGameSettingTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInitSpeed()).compareTo(other.isSetInitSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initSpeed, other.initSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGravity()).compareTo(other.isSetGravity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGravity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gravity, other.gravity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJumpSpeed()).compareTo(other.isSetJumpSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJumpSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jumpSpeed, other.jumpSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJumpStartRiseTime()).compareTo(other.isSetJumpStartRiseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJumpStartRiseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jumpStartRiseTime, other.jumpStartRiseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJumpGlideTime()).compareTo(other.isSetJumpGlideTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJumpGlideTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jumpGlideTime, other.jumpGlideTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperJumpSpeed()).compareTo(other.isSetSuperJumpSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperJumpSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superJumpSpeed, other.superJumpSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperJumpStartRiseTime()).compareTo(other.isSetSuperJumpStartRiseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperJumpStartRiseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superJumpStartRiseTime, other.superJumpStartRiseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperJumpGlideTime()).compareTo(other.isSetSuperJumpGlideTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperJumpGlideTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superJumpGlideTime, other.superJumpGlideTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJumpEndDelayTime()).compareTo(other.isSetJumpEndDelayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJumpEndDelayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jumpEndDelayTime, other.jumpEndDelayTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrunkLoopCount()).compareTo(other.isSetTrunkLoopCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrunkLoopCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trunkLoopCount, other.trunkLoopCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHitWaitTimeList()).compareTo(other.isSetHitWaitTimeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitWaitTimeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitWaitTimeList, other.hitWaitTimeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RunnerGameSettingTable(");
    boolean first = true;

    sb.append("initSpeed:");
    sb.append(this.initSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gravity:");
    sb.append(this.gravity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jumpSpeed:");
    sb.append(this.jumpSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jumpStartRiseTime:");
    sb.append(this.jumpStartRiseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jumpGlideTime:");
    sb.append(this.jumpGlideTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superJumpSpeed:");
    sb.append(this.superJumpSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superJumpStartRiseTime:");
    sb.append(this.superJumpStartRiseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superJumpGlideTime:");
    sb.append(this.superJumpGlideTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jumpEndDelayTime:");
    sb.append(this.jumpEndDelayTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trunkLoopCount:");
    sb.append(this.trunkLoopCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitWaitTimeList:");
    if (this.hitWaitTimeList == null) {
      sb.append("null");
    } else {
      sb.append(this.hitWaitTimeList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RunnerGameSettingTableStandardSchemeFactory implements SchemeFactory {
    public RunnerGameSettingTableStandardScheme getScheme() {
      return new RunnerGameSettingTableStandardScheme();
    }
  }

  private static class RunnerGameSettingTableStandardScheme extends StandardScheme<RunnerGameSettingTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RunnerGameSettingTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INIT_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initSpeed = iprot.readDouble();
              struct.setInitSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GRAVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.gravity = iprot.readDouble();
              struct.setGravityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JUMP_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.jumpSpeed = iprot.readDouble();
              struct.setJumpSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JUMP_START_RISE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.jumpStartRiseTime = iprot.readDouble();
              struct.setJumpStartRiseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JUMP_GLIDE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.jumpGlideTime = iprot.readDouble();
              struct.setJumpGlideTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUPER_JUMP_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.superJumpSpeed = iprot.readDouble();
              struct.setSuperJumpSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUPER_JUMP_START_RISE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.superJumpStartRiseTime = iprot.readDouble();
              struct.setSuperJumpStartRiseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUPER_JUMP_GLIDE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.superJumpGlideTime = iprot.readDouble();
              struct.setSuperJumpGlideTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JUMP_END_DELAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.jumpEndDelayTime = iprot.readDouble();
              struct.setJumpEndDelayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRUNK_LOOP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.trunkLoopCount = iprot.readI32();
              struct.setTrunkLoopCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HIT_WAIT_TIME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                struct.hitWaitTimeList = new ArrayList<Double>(_list256.size);
                for (int _i257 = 0; _i257 < _list256.size; ++_i257)
                {
                  double _elem258;
                  _elem258 = iprot.readDouble();
                  struct.hitWaitTimeList.add(_elem258);
                }
                iprot.readListEnd();
              }
              struct.setHitWaitTimeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RunnerGameSettingTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INIT_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.initSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GRAVITY_FIELD_DESC);
      oprot.writeDouble(struct.gravity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JUMP_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.jumpSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JUMP_START_RISE_TIME_FIELD_DESC);
      oprot.writeDouble(struct.jumpStartRiseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JUMP_GLIDE_TIME_FIELD_DESC);
      oprot.writeDouble(struct.jumpGlideTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPER_JUMP_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.superJumpSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPER_JUMP_START_RISE_TIME_FIELD_DESC);
      oprot.writeDouble(struct.superJumpStartRiseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPER_JUMP_GLIDE_TIME_FIELD_DESC);
      oprot.writeDouble(struct.superJumpGlideTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JUMP_END_DELAY_TIME_FIELD_DESC);
      oprot.writeDouble(struct.jumpEndDelayTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRUNK_LOOP_COUNT_FIELD_DESC);
      oprot.writeI32(struct.trunkLoopCount);
      oprot.writeFieldEnd();
      if (struct.hitWaitTimeList != null) {
        oprot.writeFieldBegin(HIT_WAIT_TIME_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.hitWaitTimeList.size()));
          for (double _iter259 : struct.hitWaitTimeList)
          {
            oprot.writeDouble(_iter259);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RunnerGameSettingTableTupleSchemeFactory implements SchemeFactory {
    public RunnerGameSettingTableTupleScheme getScheme() {
      return new RunnerGameSettingTableTupleScheme();
    }
  }

  private static class RunnerGameSettingTableTupleScheme extends TupleScheme<RunnerGameSettingTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RunnerGameSettingTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInitSpeed()) {
        optionals.set(0);
      }
      if (struct.isSetGravity()) {
        optionals.set(1);
      }
      if (struct.isSetJumpSpeed()) {
        optionals.set(2);
      }
      if (struct.isSetJumpStartRiseTime()) {
        optionals.set(3);
      }
      if (struct.isSetJumpGlideTime()) {
        optionals.set(4);
      }
      if (struct.isSetSuperJumpSpeed()) {
        optionals.set(5);
      }
      if (struct.isSetSuperJumpStartRiseTime()) {
        optionals.set(6);
      }
      if (struct.isSetSuperJumpGlideTime()) {
        optionals.set(7);
      }
      if (struct.isSetJumpEndDelayTime()) {
        optionals.set(8);
      }
      if (struct.isSetTrunkLoopCount()) {
        optionals.set(9);
      }
      if (struct.isSetHitWaitTimeList()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetInitSpeed()) {
        oprot.writeDouble(struct.initSpeed);
      }
      if (struct.isSetGravity()) {
        oprot.writeDouble(struct.gravity);
      }
      if (struct.isSetJumpSpeed()) {
        oprot.writeDouble(struct.jumpSpeed);
      }
      if (struct.isSetJumpStartRiseTime()) {
        oprot.writeDouble(struct.jumpStartRiseTime);
      }
      if (struct.isSetJumpGlideTime()) {
        oprot.writeDouble(struct.jumpGlideTime);
      }
      if (struct.isSetSuperJumpSpeed()) {
        oprot.writeDouble(struct.superJumpSpeed);
      }
      if (struct.isSetSuperJumpStartRiseTime()) {
        oprot.writeDouble(struct.superJumpStartRiseTime);
      }
      if (struct.isSetSuperJumpGlideTime()) {
        oprot.writeDouble(struct.superJumpGlideTime);
      }
      if (struct.isSetJumpEndDelayTime()) {
        oprot.writeDouble(struct.jumpEndDelayTime);
      }
      if (struct.isSetTrunkLoopCount()) {
        oprot.writeI32(struct.trunkLoopCount);
      }
      if (struct.isSetHitWaitTimeList()) {
        {
          oprot.writeI32(struct.hitWaitTimeList.size());
          for (double _iter260 : struct.hitWaitTimeList)
          {
            oprot.writeDouble(_iter260);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RunnerGameSettingTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.initSpeed = iprot.readDouble();
        struct.setInitSpeedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gravity = iprot.readDouble();
        struct.setGravityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jumpSpeed = iprot.readDouble();
        struct.setJumpSpeedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jumpStartRiseTime = iprot.readDouble();
        struct.setJumpStartRiseTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jumpGlideTime = iprot.readDouble();
        struct.setJumpGlideTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.superJumpSpeed = iprot.readDouble();
        struct.setSuperJumpSpeedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.superJumpStartRiseTime = iprot.readDouble();
        struct.setSuperJumpStartRiseTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.superJumpGlideTime = iprot.readDouble();
        struct.setSuperJumpGlideTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.jumpEndDelayTime = iprot.readDouble();
        struct.setJumpEndDelayTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.trunkLoopCount = iprot.readI32();
        struct.setTrunkLoopCountIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.hitWaitTimeList = new ArrayList<Double>(_list261.size);
          for (int _i262 = 0; _i262 < _list261.size; ++_i262)
          {
            double _elem263;
            _elem263 = iprot.readDouble();
            struct.hitWaitTimeList.add(_elem263);
          }
        }
        struct.setHitWaitTimeListIsSet(true);
      }
    }
  }

}

