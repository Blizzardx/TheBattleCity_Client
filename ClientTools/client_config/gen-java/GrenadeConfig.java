/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GrenadeConfig implements org.apache.thrift.TBase<GrenadeConfig, GrenadeConfig._Fields>, java.io.Serializable, Cloneable, Comparable<GrenadeConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GrenadeConfig");

  private static final org.apache.thrift.protocol.TField DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("diff", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField RESP_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("respRange", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField WAIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("waitTime", org.apache.thrift.protocol.TType.I32, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GrenadeConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GrenadeConfigTupleSchemeFactory());
  }

  public int diff; // required
  public int respRange; // required
  public int waitTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIFF((short)10, "diff"),
    RESP_RANGE((short)20, "respRange"),
    WAIT_TIME((short)30, "waitTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // DIFF
          return DIFF;
        case 20: // RESP_RANGE
          return RESP_RANGE;
        case 30: // WAIT_TIME
          return WAIT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIFF_ISSET_ID = 0;
  private static final int __RESPRANGE_ISSET_ID = 1;
  private static final int __WAITTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIFF, new org.apache.thrift.meta_data.FieldMetaData("diff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESP_RANGE, new org.apache.thrift.meta_data.FieldMetaData("respRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WAIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("waitTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GrenadeConfig.class, metaDataMap);
  }

  public GrenadeConfig() {
  }

  public GrenadeConfig(
    int diff,
    int respRange,
    int waitTime)
  {
    this();
    this.diff = diff;
    setDiffIsSet(true);
    this.respRange = respRange;
    setRespRangeIsSet(true);
    this.waitTime = waitTime;
    setWaitTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GrenadeConfig(GrenadeConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.diff = other.diff;
    this.respRange = other.respRange;
    this.waitTime = other.waitTime;
  }

  public GrenadeConfig deepCopy() {
    return new GrenadeConfig(this);
  }

  @Override
  public void clear() {
    setDiffIsSet(false);
    this.diff = 0;
    setRespRangeIsSet(false);
    this.respRange = 0;
    setWaitTimeIsSet(false);
    this.waitTime = 0;
  }

  public int getDiff() {
    return this.diff;
  }

  public GrenadeConfig setDiff(int diff) {
    this.diff = diff;
    setDiffIsSet(true);
    return this;
  }

  public void unsetDiff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFF_ISSET_ID);
  }

  /** Returns true if field diff is set (has been assigned a value) and false otherwise */
  public boolean isSetDiff() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFF_ISSET_ID);
  }

  public void setDiffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFF_ISSET_ID, value);
  }

  public int getRespRange() {
    return this.respRange;
  }

  public GrenadeConfig setRespRange(int respRange) {
    this.respRange = respRange;
    setRespRangeIsSet(true);
    return this;
  }

  public void unsetRespRange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPRANGE_ISSET_ID);
  }

  /** Returns true if field respRange is set (has been assigned a value) and false otherwise */
  public boolean isSetRespRange() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPRANGE_ISSET_ID);
  }

  public void setRespRangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPRANGE_ISSET_ID, value);
  }

  public int getWaitTime() {
    return this.waitTime;
  }

  public GrenadeConfig setWaitTime(int waitTime) {
    this.waitTime = waitTime;
    setWaitTimeIsSet(true);
    return this;
  }

  public void unsetWaitTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAITTIME_ISSET_ID);
  }

  /** Returns true if field waitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitTime() {
    return EncodingUtils.testBit(__isset_bitfield, __WAITTIME_ISSET_ID);
  }

  public void setWaitTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAITTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIFF:
      if (value == null) {
        unsetDiff();
      } else {
        setDiff((Integer)value);
      }
      break;

    case RESP_RANGE:
      if (value == null) {
        unsetRespRange();
      } else {
        setRespRange((Integer)value);
      }
      break;

    case WAIT_TIME:
      if (value == null) {
        unsetWaitTime();
      } else {
        setWaitTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIFF:
      return Integer.valueOf(getDiff());

    case RESP_RANGE:
      return Integer.valueOf(getRespRange());

    case WAIT_TIME:
      return Integer.valueOf(getWaitTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIFF:
      return isSetDiff();
    case RESP_RANGE:
      return isSetRespRange();
    case WAIT_TIME:
      return isSetWaitTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GrenadeConfig)
      return this.equals((GrenadeConfig)that);
    return false;
  }

  public boolean equals(GrenadeConfig that) {
    if (that == null)
      return false;

    boolean this_present_diff = true;
    boolean that_present_diff = true;
    if (this_present_diff || that_present_diff) {
      if (!(this_present_diff && that_present_diff))
        return false;
      if (this.diff != that.diff)
        return false;
    }

    boolean this_present_respRange = true;
    boolean that_present_respRange = true;
    if (this_present_respRange || that_present_respRange) {
      if (!(this_present_respRange && that_present_respRange))
        return false;
      if (this.respRange != that.respRange)
        return false;
    }

    boolean this_present_waitTime = true;
    boolean that_present_waitTime = true;
    if (this_present_waitTime || that_present_waitTime) {
      if (!(this_present_waitTime && that_present_waitTime))
        return false;
      if (this.waitTime != that.waitTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GrenadeConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDiff()).compareTo(other.isSetDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diff, other.diff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRespRange()).compareTo(other.isSetRespRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRespRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respRange, other.respRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitTime()).compareTo(other.isSetWaitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitTime, other.waitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GrenadeConfig(");
    boolean first = true;

    sb.append("diff:");
    sb.append(this.diff);
    first = false;
    if (!first) sb.append(", ");
    sb.append("respRange:");
    sb.append(this.respRange);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waitTime:");
    sb.append(this.waitTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GrenadeConfigStandardSchemeFactory implements SchemeFactory {
    public GrenadeConfigStandardScheme getScheme() {
      return new GrenadeConfigStandardScheme();
    }
  }

  private static class GrenadeConfigStandardScheme extends StandardScheme<GrenadeConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GrenadeConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.diff = iprot.readI32();
              struct.setDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RESP_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.respRange = iprot.readI32();
              struct.setRespRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // WAIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.waitTime = iprot.readI32();
              struct.setWaitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GrenadeConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DIFF_FIELD_DESC);
      oprot.writeI32(struct.diff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESP_RANGE_FIELD_DESC);
      oprot.writeI32(struct.respRange);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAIT_TIME_FIELD_DESC);
      oprot.writeI32(struct.waitTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GrenadeConfigTupleSchemeFactory implements SchemeFactory {
    public GrenadeConfigTupleScheme getScheme() {
      return new GrenadeConfigTupleScheme();
    }
  }

  private static class GrenadeConfigTupleScheme extends TupleScheme<GrenadeConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GrenadeConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDiff()) {
        optionals.set(0);
      }
      if (struct.isSetRespRange()) {
        optionals.set(1);
      }
      if (struct.isSetWaitTime()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDiff()) {
        oprot.writeI32(struct.diff);
      }
      if (struct.isSetRespRange()) {
        oprot.writeI32(struct.respRange);
      }
      if (struct.isSetWaitTime()) {
        oprot.writeI32(struct.waitTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GrenadeConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.diff = iprot.readI32();
        struct.setDiffIsSet(true);
      }
      if (incoming.get(1)) {
        struct.respRange = iprot.readI32();
        struct.setRespRangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.waitTime = iprot.readI32();
        struct.setWaitTimeIsSet(true);
      }
    }
  }

}

