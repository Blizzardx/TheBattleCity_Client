/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CharactorConfigTable implements org.apache.thrift.TBase<CharactorConfigTable, CharactorConfigTable._Fields>, java.io.Serializable, Cloneable, Comparable<CharactorConfigTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CharactorConfigTable");

  private static final org.apache.thrift.protocol.TField CHARACTOR_COFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("charactorCofigMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CharactorConfigTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CharactorConfigTableTupleSchemeFactory());
  }

  public Map<Integer,CharactorConfig> charactorCofigMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHARACTOR_COFIG_MAP((short)1, "charactorCofigMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHARACTOR_COFIG_MAP
          return CHARACTOR_COFIG_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHARACTOR_COFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("charactorCofigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CharactorConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CharactorConfigTable.class, metaDataMap);
  }

  public CharactorConfigTable() {
  }

  public CharactorConfigTable(
    Map<Integer,CharactorConfig> charactorCofigMap)
  {
    this();
    this.charactorCofigMap = charactorCofigMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CharactorConfigTable(CharactorConfigTable other) {
    if (other.isSetCharactorCofigMap()) {
      Map<Integer,CharactorConfig> __this__charactorCofigMap = new HashMap<Integer,CharactorConfig>(other.charactorCofigMap.size());
      for (Map.Entry<Integer, CharactorConfig> other_element : other.charactorCofigMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        CharactorConfig other_element_value = other_element.getValue();

        Integer __this__charactorCofigMap_copy_key = other_element_key;

        CharactorConfig __this__charactorCofigMap_copy_value = new CharactorConfig(other_element_value);

        __this__charactorCofigMap.put(__this__charactorCofigMap_copy_key, __this__charactorCofigMap_copy_value);
      }
      this.charactorCofigMap = __this__charactorCofigMap;
    }
  }

  public CharactorConfigTable deepCopy() {
    return new CharactorConfigTable(this);
  }

  @Override
  public void clear() {
    this.charactorCofigMap = null;
  }

  public int getCharactorCofigMapSize() {
    return (this.charactorCofigMap == null) ? 0 : this.charactorCofigMap.size();
  }

  public void putToCharactorCofigMap(int key, CharactorConfig val) {
    if (this.charactorCofigMap == null) {
      this.charactorCofigMap = new HashMap<Integer,CharactorConfig>();
    }
    this.charactorCofigMap.put(key, val);
  }

  public Map<Integer,CharactorConfig> getCharactorCofigMap() {
    return this.charactorCofigMap;
  }

  public CharactorConfigTable setCharactorCofigMap(Map<Integer,CharactorConfig> charactorCofigMap) {
    this.charactorCofigMap = charactorCofigMap;
    return this;
  }

  public void unsetCharactorCofigMap() {
    this.charactorCofigMap = null;
  }

  /** Returns true if field charactorCofigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetCharactorCofigMap() {
    return this.charactorCofigMap != null;
  }

  public void setCharactorCofigMapIsSet(boolean value) {
    if (!value) {
      this.charactorCofigMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHARACTOR_COFIG_MAP:
      if (value == null) {
        unsetCharactorCofigMap();
      } else {
        setCharactorCofigMap((Map<Integer,CharactorConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHARACTOR_COFIG_MAP:
      return getCharactorCofigMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHARACTOR_COFIG_MAP:
      return isSetCharactorCofigMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CharactorConfigTable)
      return this.equals((CharactorConfigTable)that);
    return false;
  }

  public boolean equals(CharactorConfigTable that) {
    if (that == null)
      return false;

    boolean this_present_charactorCofigMap = true && this.isSetCharactorCofigMap();
    boolean that_present_charactorCofigMap = true && that.isSetCharactorCofigMap();
    if (this_present_charactorCofigMap || that_present_charactorCofigMap) {
      if (!(this_present_charactorCofigMap && that_present_charactorCofigMap))
        return false;
      if (!this.charactorCofigMap.equals(that.charactorCofigMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CharactorConfigTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCharactorCofigMap()).compareTo(other.isSetCharactorCofigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharactorCofigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charactorCofigMap, other.charactorCofigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CharactorConfigTable(");
    boolean first = true;

    sb.append("charactorCofigMap:");
    if (this.charactorCofigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.charactorCofigMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CharactorConfigTableStandardSchemeFactory implements SchemeFactory {
    public CharactorConfigTableStandardScheme getScheme() {
      return new CharactorConfigTableStandardScheme();
    }
  }

  private static class CharactorConfigTableStandardScheme extends StandardScheme<CharactorConfigTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CharactorConfigTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHARACTOR_COFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.charactorCofigMap = new HashMap<Integer,CharactorConfig>(2*_map40.size);
                for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                {
                  int _key42;
                  CharactorConfig _val43;
                  _key42 = iprot.readI32();
                  _val43 = new CharactorConfig();
                  _val43.read(iprot);
                  struct.charactorCofigMap.put(_key42, _val43);
                }
                iprot.readMapEnd();
              }
              struct.setCharactorCofigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CharactorConfigTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.charactorCofigMap != null) {
        oprot.writeFieldBegin(CHARACTOR_COFIG_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.charactorCofigMap.size()));
          for (Map.Entry<Integer, CharactorConfig> _iter44 : struct.charactorCofigMap.entrySet())
          {
            oprot.writeI32(_iter44.getKey());
            _iter44.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CharactorConfigTableTupleSchemeFactory implements SchemeFactory {
    public CharactorConfigTableTupleScheme getScheme() {
      return new CharactorConfigTableTupleScheme();
    }
  }

  private static class CharactorConfigTableTupleScheme extends TupleScheme<CharactorConfigTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CharactorConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharactorCofigMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCharactorCofigMap()) {
        {
          oprot.writeI32(struct.charactorCofigMap.size());
          for (Map.Entry<Integer, CharactorConfig> _iter45 : struct.charactorCofigMap.entrySet())
          {
            oprot.writeI32(_iter45.getKey());
            _iter45.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CharactorConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.charactorCofigMap = new HashMap<Integer,CharactorConfig>(2*_map46.size);
          for (int _i47 = 0; _i47 < _map46.size; ++_i47)
          {
            int _key48;
            CharactorConfig _val49;
            _key48 = iprot.readI32();
            _val49 = new CharactorConfig();
            _val49.read(iprot);
            struct.charactorCofigMap.put(_key48, _val49);
          }
        }
        struct.setCharactorCofigMapIsSet(true);
      }
    }
  }

}

