/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StageConfig implements org.apache.thrift.TBase<StageConfig, StageConfig._Fields>, java.io.Serializable, Cloneable, Comparable<StageConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StageConfig");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NEXT_STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nextStageId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField NAME_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nameMessageId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField NAME_AUDIO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nameAudioId", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField DESC_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("descMessageId", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField DESC_AUDIO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("descAudioId", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField HELP_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("helpMessageId", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField HELP_AUDIO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("helpAudioId", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField STAGE_MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageMapId", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField RECOMMEND_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendLevel", org.apache.thrift.protocol.TType.I16, (short)51);
  private static final org.apache.thrift.protocol.TField STAGE_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("stageIcon", org.apache.thrift.protocol.TType.STRING, (short)60);
  private static final org.apache.thrift.protocol.TField ENTER_LIMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("enterLimitId", org.apache.thrift.protocol.TType.I32, (short)90);
  private static final org.apache.thrift.protocol.TField ENTER_FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("enterFuncId", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField WIN_LIMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("winLimitId", org.apache.thrift.protocol.TType.I32, (short)130);
  private static final org.apache.thrift.protocol.TField WIN_FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("winFuncId", org.apache.thrift.protocol.TType.I32, (short)140);
  private static final org.apache.thrift.protocol.TField LOSE_FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loseFuncId", org.apache.thrift.protocol.TType.I32, (short)141);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StageConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StageConfigTupleSchemeFactory());
  }

  public int id; // required
  public int nextStageId; // required
  public int nameMessageId; // required
  public String nameAudioId; // required
  public int descMessageId; // required
  public String descAudioId; // required
  public int helpMessageId; // required
  public String helpAudioId; // required
  public int stageMapId; // required
  public short recommendLevel; // required
  public String stageIcon; // required
  public int enterLimitId; // required
  public int enterFuncId; // required
  public int winLimitId; // required
  public int winFuncId; // required
  public int loseFuncId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)10, "id"),
    NEXT_STAGE_ID((short)11, "nextStageId"),
    NAME_MESSAGE_ID((short)20, "nameMessageId"),
    NAME_AUDIO_ID((short)21, "nameAudioId"),
    DESC_MESSAGE_ID((short)30, "descMessageId"),
    DESC_AUDIO_ID((short)31, "descAudioId"),
    HELP_MESSAGE_ID((short)40, "helpMessageId"),
    HELP_AUDIO_ID((short)41, "helpAudioId"),
    STAGE_MAP_ID((short)50, "stageMapId"),
    RECOMMEND_LEVEL((short)51, "recommendLevel"),
    STAGE_ICON((short)60, "stageIcon"),
    ENTER_LIMIT_ID((short)90, "enterLimitId"),
    ENTER_FUNC_ID((short)100, "enterFuncId"),
    WIN_LIMIT_ID((short)130, "winLimitId"),
    WIN_FUNC_ID((short)140, "winFuncId"),
    LOSE_FUNC_ID((short)141, "loseFuncId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // ID
          return ID;
        case 11: // NEXT_STAGE_ID
          return NEXT_STAGE_ID;
        case 20: // NAME_MESSAGE_ID
          return NAME_MESSAGE_ID;
        case 21: // NAME_AUDIO_ID
          return NAME_AUDIO_ID;
        case 30: // DESC_MESSAGE_ID
          return DESC_MESSAGE_ID;
        case 31: // DESC_AUDIO_ID
          return DESC_AUDIO_ID;
        case 40: // HELP_MESSAGE_ID
          return HELP_MESSAGE_ID;
        case 41: // HELP_AUDIO_ID
          return HELP_AUDIO_ID;
        case 50: // STAGE_MAP_ID
          return STAGE_MAP_ID;
        case 51: // RECOMMEND_LEVEL
          return RECOMMEND_LEVEL;
        case 60: // STAGE_ICON
          return STAGE_ICON;
        case 90: // ENTER_LIMIT_ID
          return ENTER_LIMIT_ID;
        case 100: // ENTER_FUNC_ID
          return ENTER_FUNC_ID;
        case 130: // WIN_LIMIT_ID
          return WIN_LIMIT_ID;
        case 140: // WIN_FUNC_ID
          return WIN_FUNC_ID;
        case 141: // LOSE_FUNC_ID
          return LOSE_FUNC_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NEXTSTAGEID_ISSET_ID = 1;
  private static final int __NAMEMESSAGEID_ISSET_ID = 2;
  private static final int __DESCMESSAGEID_ISSET_ID = 3;
  private static final int __HELPMESSAGEID_ISSET_ID = 4;
  private static final int __STAGEMAPID_ISSET_ID = 5;
  private static final int __RECOMMENDLEVEL_ISSET_ID = 6;
  private static final int __ENTERLIMITID_ISSET_ID = 7;
  private static final int __ENTERFUNCID_ISSET_ID = 8;
  private static final int __WINLIMITID_ISSET_ID = 9;
  private static final int __WINFUNCID_ISSET_ID = 10;
  private static final int __LOSEFUNCID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEXT_STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("nextStageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("nameMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_AUDIO_ID, new org.apache.thrift.meta_data.FieldMetaData("nameAudioId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("descMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESC_AUDIO_ID, new org.apache.thrift.meta_data.FieldMetaData("descAudioId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HELP_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("helpMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HELP_AUDIO_ID, new org.apache.thrift.meta_data.FieldMetaData("helpAudioId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAGE_MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("stageMapId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOMMEND_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("recommendLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.STAGE_ICON, new org.apache.thrift.meta_data.FieldMetaData("stageIcon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTER_LIMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("enterLimitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTER_FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("enterFuncId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIN_LIMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("winLimitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIN_FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("winFuncId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOSE_FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("loseFuncId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StageConfig.class, metaDataMap);
  }

  public StageConfig() {
  }

  public StageConfig(
    int id,
    int nextStageId,
    int nameMessageId,
    String nameAudioId,
    int descMessageId,
    String descAudioId,
    int helpMessageId,
    String helpAudioId,
    int stageMapId,
    short recommendLevel,
    String stageIcon,
    int enterLimitId,
    int enterFuncId,
    int winLimitId,
    int winFuncId,
    int loseFuncId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.nextStageId = nextStageId;
    setNextStageIdIsSet(true);
    this.nameMessageId = nameMessageId;
    setNameMessageIdIsSet(true);
    this.nameAudioId = nameAudioId;
    this.descMessageId = descMessageId;
    setDescMessageIdIsSet(true);
    this.descAudioId = descAudioId;
    this.helpMessageId = helpMessageId;
    setHelpMessageIdIsSet(true);
    this.helpAudioId = helpAudioId;
    this.stageMapId = stageMapId;
    setStageMapIdIsSet(true);
    this.recommendLevel = recommendLevel;
    setRecommendLevelIsSet(true);
    this.stageIcon = stageIcon;
    this.enterLimitId = enterLimitId;
    setEnterLimitIdIsSet(true);
    this.enterFuncId = enterFuncId;
    setEnterFuncIdIsSet(true);
    this.winLimitId = winLimitId;
    setWinLimitIdIsSet(true);
    this.winFuncId = winFuncId;
    setWinFuncIdIsSet(true);
    this.loseFuncId = loseFuncId;
    setLoseFuncIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StageConfig(StageConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.nextStageId = other.nextStageId;
    this.nameMessageId = other.nameMessageId;
    if (other.isSetNameAudioId()) {
      this.nameAudioId = other.nameAudioId;
    }
    this.descMessageId = other.descMessageId;
    if (other.isSetDescAudioId()) {
      this.descAudioId = other.descAudioId;
    }
    this.helpMessageId = other.helpMessageId;
    if (other.isSetHelpAudioId()) {
      this.helpAudioId = other.helpAudioId;
    }
    this.stageMapId = other.stageMapId;
    this.recommendLevel = other.recommendLevel;
    if (other.isSetStageIcon()) {
      this.stageIcon = other.stageIcon;
    }
    this.enterLimitId = other.enterLimitId;
    this.enterFuncId = other.enterFuncId;
    this.winLimitId = other.winLimitId;
    this.winFuncId = other.winFuncId;
    this.loseFuncId = other.loseFuncId;
  }

  public StageConfig deepCopy() {
    return new StageConfig(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setNextStageIdIsSet(false);
    this.nextStageId = 0;
    setNameMessageIdIsSet(false);
    this.nameMessageId = 0;
    this.nameAudioId = null;
    setDescMessageIdIsSet(false);
    this.descMessageId = 0;
    this.descAudioId = null;
    setHelpMessageIdIsSet(false);
    this.helpMessageId = 0;
    this.helpAudioId = null;
    setStageMapIdIsSet(false);
    this.stageMapId = 0;
    setRecommendLevelIsSet(false);
    this.recommendLevel = 0;
    this.stageIcon = null;
    setEnterLimitIdIsSet(false);
    this.enterLimitId = 0;
    setEnterFuncIdIsSet(false);
    this.enterFuncId = 0;
    setWinLimitIdIsSet(false);
    this.winLimitId = 0;
    setWinFuncIdIsSet(false);
    this.winFuncId = 0;
    setLoseFuncIdIsSet(false);
    this.loseFuncId = 0;
  }

  public int getId() {
    return this.id;
  }

  public StageConfig setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getNextStageId() {
    return this.nextStageId;
  }

  public StageConfig setNextStageId(int nextStageId) {
    this.nextStageId = nextStageId;
    setNextStageIdIsSet(true);
    return this;
  }

  public void unsetNextStageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTSTAGEID_ISSET_ID);
  }

  /** Returns true if field nextStageId is set (has been assigned a value) and false otherwise */
  public boolean isSetNextStageId() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTSTAGEID_ISSET_ID);
  }

  public void setNextStageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTSTAGEID_ISSET_ID, value);
  }

  public int getNameMessageId() {
    return this.nameMessageId;
  }

  public StageConfig setNameMessageId(int nameMessageId) {
    this.nameMessageId = nameMessageId;
    setNameMessageIdIsSet(true);
    return this;
  }

  public void unsetNameMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID);
  }

  /** Returns true if field nameMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetNameMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID);
  }

  public void setNameMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID, value);
  }

  public String getNameAudioId() {
    return this.nameAudioId;
  }

  public StageConfig setNameAudioId(String nameAudioId) {
    this.nameAudioId = nameAudioId;
    return this;
  }

  public void unsetNameAudioId() {
    this.nameAudioId = null;
  }

  /** Returns true if field nameAudioId is set (has been assigned a value) and false otherwise */
  public boolean isSetNameAudioId() {
    return this.nameAudioId != null;
  }

  public void setNameAudioIdIsSet(boolean value) {
    if (!value) {
      this.nameAudioId = null;
    }
  }

  public int getDescMessageId() {
    return this.descMessageId;
  }

  public StageConfig setDescMessageId(int descMessageId) {
    this.descMessageId = descMessageId;
    setDescMessageIdIsSet(true);
    return this;
  }

  public void unsetDescMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID);
  }

  /** Returns true if field descMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetDescMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID);
  }

  public void setDescMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID, value);
  }

  public String getDescAudioId() {
    return this.descAudioId;
  }

  public StageConfig setDescAudioId(String descAudioId) {
    this.descAudioId = descAudioId;
    return this;
  }

  public void unsetDescAudioId() {
    this.descAudioId = null;
  }

  /** Returns true if field descAudioId is set (has been assigned a value) and false otherwise */
  public boolean isSetDescAudioId() {
    return this.descAudioId != null;
  }

  public void setDescAudioIdIsSet(boolean value) {
    if (!value) {
      this.descAudioId = null;
    }
  }

  public int getHelpMessageId() {
    return this.helpMessageId;
  }

  public StageConfig setHelpMessageId(int helpMessageId) {
    this.helpMessageId = helpMessageId;
    setHelpMessageIdIsSet(true);
    return this;
  }

  public void unsetHelpMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HELPMESSAGEID_ISSET_ID);
  }

  /** Returns true if field helpMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetHelpMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __HELPMESSAGEID_ISSET_ID);
  }

  public void setHelpMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HELPMESSAGEID_ISSET_ID, value);
  }

  public String getHelpAudioId() {
    return this.helpAudioId;
  }

  public StageConfig setHelpAudioId(String helpAudioId) {
    this.helpAudioId = helpAudioId;
    return this;
  }

  public void unsetHelpAudioId() {
    this.helpAudioId = null;
  }

  /** Returns true if field helpAudioId is set (has been assigned a value) and false otherwise */
  public boolean isSetHelpAudioId() {
    return this.helpAudioId != null;
  }

  public void setHelpAudioIdIsSet(boolean value) {
    if (!value) {
      this.helpAudioId = null;
    }
  }

  public int getStageMapId() {
    return this.stageMapId;
  }

  public StageConfig setStageMapId(int stageMapId) {
    this.stageMapId = stageMapId;
    setStageMapIdIsSet(true);
    return this;
  }

  public void unsetStageMapId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGEMAPID_ISSET_ID);
  }

  /** Returns true if field stageMapId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageMapId() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGEMAPID_ISSET_ID);
  }

  public void setStageMapIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGEMAPID_ISSET_ID, value);
  }

  public short getRecommendLevel() {
    return this.recommendLevel;
  }

  public StageConfig setRecommendLevel(short recommendLevel) {
    this.recommendLevel = recommendLevel;
    setRecommendLevelIsSet(true);
    return this;
  }

  public void unsetRecommendLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOMMENDLEVEL_ISSET_ID);
  }

  /** Returns true if field recommendLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOMMENDLEVEL_ISSET_ID);
  }

  public void setRecommendLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOMMENDLEVEL_ISSET_ID, value);
  }

  public String getStageIcon() {
    return this.stageIcon;
  }

  public StageConfig setStageIcon(String stageIcon) {
    this.stageIcon = stageIcon;
    return this;
  }

  public void unsetStageIcon() {
    this.stageIcon = null;
  }

  /** Returns true if field stageIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetStageIcon() {
    return this.stageIcon != null;
  }

  public void setStageIconIsSet(boolean value) {
    if (!value) {
      this.stageIcon = null;
    }
  }

  public int getEnterLimitId() {
    return this.enterLimitId;
  }

  public StageConfig setEnterLimitId(int enterLimitId) {
    this.enterLimitId = enterLimitId;
    setEnterLimitIdIsSet(true);
    return this;
  }

  public void unsetEnterLimitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTERLIMITID_ISSET_ID);
  }

  /** Returns true if field enterLimitId is set (has been assigned a value) and false otherwise */
  public boolean isSetEnterLimitId() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTERLIMITID_ISSET_ID);
  }

  public void setEnterLimitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTERLIMITID_ISSET_ID, value);
  }

  public int getEnterFuncId() {
    return this.enterFuncId;
  }

  public StageConfig setEnterFuncId(int enterFuncId) {
    this.enterFuncId = enterFuncId;
    setEnterFuncIdIsSet(true);
    return this;
  }

  public void unsetEnterFuncId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTERFUNCID_ISSET_ID);
  }

  /** Returns true if field enterFuncId is set (has been assigned a value) and false otherwise */
  public boolean isSetEnterFuncId() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTERFUNCID_ISSET_ID);
  }

  public void setEnterFuncIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTERFUNCID_ISSET_ID, value);
  }

  public int getWinLimitId() {
    return this.winLimitId;
  }

  public StageConfig setWinLimitId(int winLimitId) {
    this.winLimitId = winLimitId;
    setWinLimitIdIsSet(true);
    return this;
  }

  public void unsetWinLimitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINLIMITID_ISSET_ID);
  }

  /** Returns true if field winLimitId is set (has been assigned a value) and false otherwise */
  public boolean isSetWinLimitId() {
    return EncodingUtils.testBit(__isset_bitfield, __WINLIMITID_ISSET_ID);
  }

  public void setWinLimitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINLIMITID_ISSET_ID, value);
  }

  public int getWinFuncId() {
    return this.winFuncId;
  }

  public StageConfig setWinFuncId(int winFuncId) {
    this.winFuncId = winFuncId;
    setWinFuncIdIsSet(true);
    return this;
  }

  public void unsetWinFuncId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINFUNCID_ISSET_ID);
  }

  /** Returns true if field winFuncId is set (has been assigned a value) and false otherwise */
  public boolean isSetWinFuncId() {
    return EncodingUtils.testBit(__isset_bitfield, __WINFUNCID_ISSET_ID);
  }

  public void setWinFuncIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINFUNCID_ISSET_ID, value);
  }

  public int getLoseFuncId() {
    return this.loseFuncId;
  }

  public StageConfig setLoseFuncId(int loseFuncId) {
    this.loseFuncId = loseFuncId;
    setLoseFuncIdIsSet(true);
    return this;
  }

  public void unsetLoseFuncId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOSEFUNCID_ISSET_ID);
  }

  /** Returns true if field loseFuncId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoseFuncId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOSEFUNCID_ISSET_ID);
  }

  public void setLoseFuncIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOSEFUNCID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NEXT_STAGE_ID:
      if (value == null) {
        unsetNextStageId();
      } else {
        setNextStageId((Integer)value);
      }
      break;

    case NAME_MESSAGE_ID:
      if (value == null) {
        unsetNameMessageId();
      } else {
        setNameMessageId((Integer)value);
      }
      break;

    case NAME_AUDIO_ID:
      if (value == null) {
        unsetNameAudioId();
      } else {
        setNameAudioId((String)value);
      }
      break;

    case DESC_MESSAGE_ID:
      if (value == null) {
        unsetDescMessageId();
      } else {
        setDescMessageId((Integer)value);
      }
      break;

    case DESC_AUDIO_ID:
      if (value == null) {
        unsetDescAudioId();
      } else {
        setDescAudioId((String)value);
      }
      break;

    case HELP_MESSAGE_ID:
      if (value == null) {
        unsetHelpMessageId();
      } else {
        setHelpMessageId((Integer)value);
      }
      break;

    case HELP_AUDIO_ID:
      if (value == null) {
        unsetHelpAudioId();
      } else {
        setHelpAudioId((String)value);
      }
      break;

    case STAGE_MAP_ID:
      if (value == null) {
        unsetStageMapId();
      } else {
        setStageMapId((Integer)value);
      }
      break;

    case RECOMMEND_LEVEL:
      if (value == null) {
        unsetRecommendLevel();
      } else {
        setRecommendLevel((Short)value);
      }
      break;

    case STAGE_ICON:
      if (value == null) {
        unsetStageIcon();
      } else {
        setStageIcon((String)value);
      }
      break;

    case ENTER_LIMIT_ID:
      if (value == null) {
        unsetEnterLimitId();
      } else {
        setEnterLimitId((Integer)value);
      }
      break;

    case ENTER_FUNC_ID:
      if (value == null) {
        unsetEnterFuncId();
      } else {
        setEnterFuncId((Integer)value);
      }
      break;

    case WIN_LIMIT_ID:
      if (value == null) {
        unsetWinLimitId();
      } else {
        setWinLimitId((Integer)value);
      }
      break;

    case WIN_FUNC_ID:
      if (value == null) {
        unsetWinFuncId();
      } else {
        setWinFuncId((Integer)value);
      }
      break;

    case LOSE_FUNC_ID:
      if (value == null) {
        unsetLoseFuncId();
      } else {
        setLoseFuncId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NEXT_STAGE_ID:
      return Integer.valueOf(getNextStageId());

    case NAME_MESSAGE_ID:
      return Integer.valueOf(getNameMessageId());

    case NAME_AUDIO_ID:
      return getNameAudioId();

    case DESC_MESSAGE_ID:
      return Integer.valueOf(getDescMessageId());

    case DESC_AUDIO_ID:
      return getDescAudioId();

    case HELP_MESSAGE_ID:
      return Integer.valueOf(getHelpMessageId());

    case HELP_AUDIO_ID:
      return getHelpAudioId();

    case STAGE_MAP_ID:
      return Integer.valueOf(getStageMapId());

    case RECOMMEND_LEVEL:
      return Short.valueOf(getRecommendLevel());

    case STAGE_ICON:
      return getStageIcon();

    case ENTER_LIMIT_ID:
      return Integer.valueOf(getEnterLimitId());

    case ENTER_FUNC_ID:
      return Integer.valueOf(getEnterFuncId());

    case WIN_LIMIT_ID:
      return Integer.valueOf(getWinLimitId());

    case WIN_FUNC_ID:
      return Integer.valueOf(getWinFuncId());

    case LOSE_FUNC_ID:
      return Integer.valueOf(getLoseFuncId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NEXT_STAGE_ID:
      return isSetNextStageId();
    case NAME_MESSAGE_ID:
      return isSetNameMessageId();
    case NAME_AUDIO_ID:
      return isSetNameAudioId();
    case DESC_MESSAGE_ID:
      return isSetDescMessageId();
    case DESC_AUDIO_ID:
      return isSetDescAudioId();
    case HELP_MESSAGE_ID:
      return isSetHelpMessageId();
    case HELP_AUDIO_ID:
      return isSetHelpAudioId();
    case STAGE_MAP_ID:
      return isSetStageMapId();
    case RECOMMEND_LEVEL:
      return isSetRecommendLevel();
    case STAGE_ICON:
      return isSetStageIcon();
    case ENTER_LIMIT_ID:
      return isSetEnterLimitId();
    case ENTER_FUNC_ID:
      return isSetEnterFuncId();
    case WIN_LIMIT_ID:
      return isSetWinLimitId();
    case WIN_FUNC_ID:
      return isSetWinFuncId();
    case LOSE_FUNC_ID:
      return isSetLoseFuncId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StageConfig)
      return this.equals((StageConfig)that);
    return false;
  }

  public boolean equals(StageConfig that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nextStageId = true;
    boolean that_present_nextStageId = true;
    if (this_present_nextStageId || that_present_nextStageId) {
      if (!(this_present_nextStageId && that_present_nextStageId))
        return false;
      if (this.nextStageId != that.nextStageId)
        return false;
    }

    boolean this_present_nameMessageId = true;
    boolean that_present_nameMessageId = true;
    if (this_present_nameMessageId || that_present_nameMessageId) {
      if (!(this_present_nameMessageId && that_present_nameMessageId))
        return false;
      if (this.nameMessageId != that.nameMessageId)
        return false;
    }

    boolean this_present_nameAudioId = true && this.isSetNameAudioId();
    boolean that_present_nameAudioId = true && that.isSetNameAudioId();
    if (this_present_nameAudioId || that_present_nameAudioId) {
      if (!(this_present_nameAudioId && that_present_nameAudioId))
        return false;
      if (!this.nameAudioId.equals(that.nameAudioId))
        return false;
    }

    boolean this_present_descMessageId = true;
    boolean that_present_descMessageId = true;
    if (this_present_descMessageId || that_present_descMessageId) {
      if (!(this_present_descMessageId && that_present_descMessageId))
        return false;
      if (this.descMessageId != that.descMessageId)
        return false;
    }

    boolean this_present_descAudioId = true && this.isSetDescAudioId();
    boolean that_present_descAudioId = true && that.isSetDescAudioId();
    if (this_present_descAudioId || that_present_descAudioId) {
      if (!(this_present_descAudioId && that_present_descAudioId))
        return false;
      if (!this.descAudioId.equals(that.descAudioId))
        return false;
    }

    boolean this_present_helpMessageId = true;
    boolean that_present_helpMessageId = true;
    if (this_present_helpMessageId || that_present_helpMessageId) {
      if (!(this_present_helpMessageId && that_present_helpMessageId))
        return false;
      if (this.helpMessageId != that.helpMessageId)
        return false;
    }

    boolean this_present_helpAudioId = true && this.isSetHelpAudioId();
    boolean that_present_helpAudioId = true && that.isSetHelpAudioId();
    if (this_present_helpAudioId || that_present_helpAudioId) {
      if (!(this_present_helpAudioId && that_present_helpAudioId))
        return false;
      if (!this.helpAudioId.equals(that.helpAudioId))
        return false;
    }

    boolean this_present_stageMapId = true;
    boolean that_present_stageMapId = true;
    if (this_present_stageMapId || that_present_stageMapId) {
      if (!(this_present_stageMapId && that_present_stageMapId))
        return false;
      if (this.stageMapId != that.stageMapId)
        return false;
    }

    boolean this_present_recommendLevel = true;
    boolean that_present_recommendLevel = true;
    if (this_present_recommendLevel || that_present_recommendLevel) {
      if (!(this_present_recommendLevel && that_present_recommendLevel))
        return false;
      if (this.recommendLevel != that.recommendLevel)
        return false;
    }

    boolean this_present_stageIcon = true && this.isSetStageIcon();
    boolean that_present_stageIcon = true && that.isSetStageIcon();
    if (this_present_stageIcon || that_present_stageIcon) {
      if (!(this_present_stageIcon && that_present_stageIcon))
        return false;
      if (!this.stageIcon.equals(that.stageIcon))
        return false;
    }

    boolean this_present_enterLimitId = true;
    boolean that_present_enterLimitId = true;
    if (this_present_enterLimitId || that_present_enterLimitId) {
      if (!(this_present_enterLimitId && that_present_enterLimitId))
        return false;
      if (this.enterLimitId != that.enterLimitId)
        return false;
    }

    boolean this_present_enterFuncId = true;
    boolean that_present_enterFuncId = true;
    if (this_present_enterFuncId || that_present_enterFuncId) {
      if (!(this_present_enterFuncId && that_present_enterFuncId))
        return false;
      if (this.enterFuncId != that.enterFuncId)
        return false;
    }

    boolean this_present_winLimitId = true;
    boolean that_present_winLimitId = true;
    if (this_present_winLimitId || that_present_winLimitId) {
      if (!(this_present_winLimitId && that_present_winLimitId))
        return false;
      if (this.winLimitId != that.winLimitId)
        return false;
    }

    boolean this_present_winFuncId = true;
    boolean that_present_winFuncId = true;
    if (this_present_winFuncId || that_present_winFuncId) {
      if (!(this_present_winFuncId && that_present_winFuncId))
        return false;
      if (this.winFuncId != that.winFuncId)
        return false;
    }

    boolean this_present_loseFuncId = true;
    boolean that_present_loseFuncId = true;
    if (this_present_loseFuncId || that_present_loseFuncId) {
      if (!(this_present_loseFuncId && that_present_loseFuncId))
        return false;
      if (this.loseFuncId != that.loseFuncId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StageConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextStageId()).compareTo(other.isSetNextStageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextStageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextStageId, other.nextStageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameMessageId()).compareTo(other.isSetNameMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameMessageId, other.nameMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameAudioId()).compareTo(other.isSetNameAudioId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameAudioId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameAudioId, other.nameAudioId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescMessageId()).compareTo(other.isSetDescMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descMessageId, other.descMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescAudioId()).compareTo(other.isSetDescAudioId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescAudioId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descAudioId, other.descAudioId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHelpMessageId()).compareTo(other.isSetHelpMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelpMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helpMessageId, other.helpMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHelpAudioId()).compareTo(other.isSetHelpAudioId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelpAudioId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helpAudioId, other.helpAudioId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStageMapId()).compareTo(other.isSetStageMapId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageMapId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageMapId, other.stageMapId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendLevel()).compareTo(other.isSetRecommendLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendLevel, other.recommendLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStageIcon()).compareTo(other.isSetStageIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageIcon, other.stageIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnterLimitId()).compareTo(other.isSetEnterLimitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnterLimitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enterLimitId, other.enterLimitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnterFuncId()).compareTo(other.isSetEnterFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnterFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enterFuncId, other.enterFuncId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinLimitId()).compareTo(other.isSetWinLimitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinLimitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winLimitId, other.winLimitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinFuncId()).compareTo(other.isSetWinFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winFuncId, other.winFuncId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoseFuncId()).compareTo(other.isSetLoseFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoseFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loseFuncId, other.loseFuncId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StageConfig(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextStageId:");
    sb.append(this.nextStageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameMessageId:");
    sb.append(this.nameMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameAudioId:");
    if (this.nameAudioId == null) {
      sb.append("null");
    } else {
      sb.append(this.nameAudioId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descMessageId:");
    sb.append(this.descMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("descAudioId:");
    if (this.descAudioId == null) {
      sb.append("null");
    } else {
      sb.append(this.descAudioId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("helpMessageId:");
    sb.append(this.helpMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("helpAudioId:");
    if (this.helpAudioId == null) {
      sb.append("null");
    } else {
      sb.append(this.helpAudioId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageMapId:");
    sb.append(this.stageMapId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommendLevel:");
    sb.append(this.recommendLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageIcon:");
    if (this.stageIcon == null) {
      sb.append("null");
    } else {
      sb.append(this.stageIcon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enterLimitId:");
    sb.append(this.enterLimitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enterFuncId:");
    sb.append(this.enterFuncId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("winLimitId:");
    sb.append(this.winLimitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("winFuncId:");
    sb.append(this.winFuncId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loseFuncId:");
    sb.append(this.loseFuncId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StageConfigStandardSchemeFactory implements SchemeFactory {
    public StageConfigStandardScheme getScheme() {
      return new StageConfigStandardScheme();
    }
  }

  private static class StageConfigStandardScheme extends StandardScheme<StageConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StageConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NEXT_STAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextStageId = iprot.readI32();
              struct.setNextStageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NAME_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nameMessageId = iprot.readI32();
              struct.setNameMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NAME_AUDIO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameAudioId = iprot.readString();
              struct.setNameAudioIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DESC_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.descMessageId = iprot.readI32();
              struct.setDescMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DESC_AUDIO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descAudioId = iprot.readString();
              struct.setDescAudioIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // HELP_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.helpMessageId = iprot.readI32();
              struct.setHelpMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // HELP_AUDIO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.helpAudioId = iprot.readString();
              struct.setHelpAudioIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // STAGE_MAP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stageMapId = iprot.readI32();
              struct.setStageMapIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // RECOMMEND_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.recommendLevel = iprot.readI16();
              struct.setRecommendLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // STAGE_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stageIcon = iprot.readString();
              struct.setStageIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // ENTER_LIMIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enterLimitId = iprot.readI32();
              struct.setEnterLimitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // ENTER_FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enterFuncId = iprot.readI32();
              struct.setEnterFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 130: // WIN_LIMIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.winLimitId = iprot.readI32();
              struct.setWinLimitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 140: // WIN_FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.winFuncId = iprot.readI32();
              struct.setWinFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 141: // LOSE_FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loseFuncId = iprot.readI32();
              struct.setLoseFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StageConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXT_STAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.nextStageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAME_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.nameMessageId);
      oprot.writeFieldEnd();
      if (struct.nameAudioId != null) {
        oprot.writeFieldBegin(NAME_AUDIO_ID_FIELD_DESC);
        oprot.writeString(struct.nameAudioId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DESC_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.descMessageId);
      oprot.writeFieldEnd();
      if (struct.descAudioId != null) {
        oprot.writeFieldBegin(DESC_AUDIO_ID_FIELD_DESC);
        oprot.writeString(struct.descAudioId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HELP_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.helpMessageId);
      oprot.writeFieldEnd();
      if (struct.helpAudioId != null) {
        oprot.writeFieldBegin(HELP_AUDIO_ID_FIELD_DESC);
        oprot.writeString(struct.helpAudioId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAGE_MAP_ID_FIELD_DESC);
      oprot.writeI32(struct.stageMapId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECOMMEND_LEVEL_FIELD_DESC);
      oprot.writeI16(struct.recommendLevel);
      oprot.writeFieldEnd();
      if (struct.stageIcon != null) {
        oprot.writeFieldBegin(STAGE_ICON_FIELD_DESC);
        oprot.writeString(struct.stageIcon);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENTER_LIMIT_ID_FIELD_DESC);
      oprot.writeI32(struct.enterLimitId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTER_FUNC_ID_FIELD_DESC);
      oprot.writeI32(struct.enterFuncId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIN_LIMIT_ID_FIELD_DESC);
      oprot.writeI32(struct.winLimitId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIN_FUNC_ID_FIELD_DESC);
      oprot.writeI32(struct.winFuncId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOSE_FUNC_ID_FIELD_DESC);
      oprot.writeI32(struct.loseFuncId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StageConfigTupleSchemeFactory implements SchemeFactory {
    public StageConfigTupleScheme getScheme() {
      return new StageConfigTupleScheme();
    }
  }

  private static class StageConfigTupleScheme extends TupleScheme<StageConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StageConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNextStageId()) {
        optionals.set(1);
      }
      if (struct.isSetNameMessageId()) {
        optionals.set(2);
      }
      if (struct.isSetNameAudioId()) {
        optionals.set(3);
      }
      if (struct.isSetDescMessageId()) {
        optionals.set(4);
      }
      if (struct.isSetDescAudioId()) {
        optionals.set(5);
      }
      if (struct.isSetHelpMessageId()) {
        optionals.set(6);
      }
      if (struct.isSetHelpAudioId()) {
        optionals.set(7);
      }
      if (struct.isSetStageMapId()) {
        optionals.set(8);
      }
      if (struct.isSetRecommendLevel()) {
        optionals.set(9);
      }
      if (struct.isSetStageIcon()) {
        optionals.set(10);
      }
      if (struct.isSetEnterLimitId()) {
        optionals.set(11);
      }
      if (struct.isSetEnterFuncId()) {
        optionals.set(12);
      }
      if (struct.isSetWinLimitId()) {
        optionals.set(13);
      }
      if (struct.isSetWinFuncId()) {
        optionals.set(14);
      }
      if (struct.isSetLoseFuncId()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNextStageId()) {
        oprot.writeI32(struct.nextStageId);
      }
      if (struct.isSetNameMessageId()) {
        oprot.writeI32(struct.nameMessageId);
      }
      if (struct.isSetNameAudioId()) {
        oprot.writeString(struct.nameAudioId);
      }
      if (struct.isSetDescMessageId()) {
        oprot.writeI32(struct.descMessageId);
      }
      if (struct.isSetDescAudioId()) {
        oprot.writeString(struct.descAudioId);
      }
      if (struct.isSetHelpMessageId()) {
        oprot.writeI32(struct.helpMessageId);
      }
      if (struct.isSetHelpAudioId()) {
        oprot.writeString(struct.helpAudioId);
      }
      if (struct.isSetStageMapId()) {
        oprot.writeI32(struct.stageMapId);
      }
      if (struct.isSetRecommendLevel()) {
        oprot.writeI16(struct.recommendLevel);
      }
      if (struct.isSetStageIcon()) {
        oprot.writeString(struct.stageIcon);
      }
      if (struct.isSetEnterLimitId()) {
        oprot.writeI32(struct.enterLimitId);
      }
      if (struct.isSetEnterFuncId()) {
        oprot.writeI32(struct.enterFuncId);
      }
      if (struct.isSetWinLimitId()) {
        oprot.writeI32(struct.winLimitId);
      }
      if (struct.isSetWinFuncId()) {
        oprot.writeI32(struct.winFuncId);
      }
      if (struct.isSetLoseFuncId()) {
        oprot.writeI32(struct.loseFuncId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StageConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nextStageId = iprot.readI32();
        struct.setNextStageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nameMessageId = iprot.readI32();
        struct.setNameMessageIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nameAudioId = iprot.readString();
        struct.setNameAudioIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.descMessageId = iprot.readI32();
        struct.setDescMessageIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.descAudioId = iprot.readString();
        struct.setDescAudioIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.helpMessageId = iprot.readI32();
        struct.setHelpMessageIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.helpAudioId = iprot.readString();
        struct.setHelpAudioIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stageMapId = iprot.readI32();
        struct.setStageMapIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.recommendLevel = iprot.readI16();
        struct.setRecommendLevelIsSet(true);
      }
      if (incoming.get(10)) {
        struct.stageIcon = iprot.readString();
        struct.setStageIconIsSet(true);
      }
      if (incoming.get(11)) {
        struct.enterLimitId = iprot.readI32();
        struct.setEnterLimitIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.enterFuncId = iprot.readI32();
        struct.setEnterFuncIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.winLimitId = iprot.readI32();
        struct.setWinLimitIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.winFuncId = iprot.readI32();
        struct.setWinFuncIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loseFuncId = iprot.readI32();
        struct.setLoseFuncIdIsSet(true);
      }
    }
  }

}

