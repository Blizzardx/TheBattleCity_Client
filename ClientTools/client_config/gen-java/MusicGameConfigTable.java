/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MusicGameConfigTable implements org.apache.thrift.TBase<MusicGameConfigTable, MusicGameConfigTable._Fields>, java.io.Serializable, Cloneable, Comparable<MusicGameConfigTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MusicGameConfigTable");

  private static final org.apache.thrift.protocol.TField MUSIC_RANGE_CONFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("musicRangeConfigMap", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField MUSIC_SPEED_CONFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("musicSpeedConfigMap", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField MUSIC_ERROR_CONFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("musicErrorConfigMap", org.apache.thrift.protocol.TType.LIST, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MusicGameConfigTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MusicGameConfigTableTupleSchemeFactory());
  }

  public List<MusicGameRangeConfig> musicRangeConfigMap; // required
  public List<MusicGameSpeedConfig> musicSpeedConfigMap; // required
  public List<MusicGameErrorConfig> musicErrorConfigMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MUSIC_RANGE_CONFIG_MAP((short)10, "musicRangeConfigMap"),
    MUSIC_SPEED_CONFIG_MAP((short)20, "musicSpeedConfigMap"),
    MUSIC_ERROR_CONFIG_MAP((short)30, "musicErrorConfigMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // MUSIC_RANGE_CONFIG_MAP
          return MUSIC_RANGE_CONFIG_MAP;
        case 20: // MUSIC_SPEED_CONFIG_MAP
          return MUSIC_SPEED_CONFIG_MAP;
        case 30: // MUSIC_ERROR_CONFIG_MAP
          return MUSIC_ERROR_CONFIG_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MUSIC_RANGE_CONFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("musicRangeConfigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MusicGameRangeConfig.class))));
    tmpMap.put(_Fields.MUSIC_SPEED_CONFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("musicSpeedConfigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MusicGameSpeedConfig.class))));
    tmpMap.put(_Fields.MUSIC_ERROR_CONFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("musicErrorConfigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MusicGameErrorConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MusicGameConfigTable.class, metaDataMap);
  }

  public MusicGameConfigTable() {
  }

  public MusicGameConfigTable(
    List<MusicGameRangeConfig> musicRangeConfigMap,
    List<MusicGameSpeedConfig> musicSpeedConfigMap,
    List<MusicGameErrorConfig> musicErrorConfigMap)
  {
    this();
    this.musicRangeConfigMap = musicRangeConfigMap;
    this.musicSpeedConfigMap = musicSpeedConfigMap;
    this.musicErrorConfigMap = musicErrorConfigMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MusicGameConfigTable(MusicGameConfigTable other) {
    if (other.isSetMusicRangeConfigMap()) {
      List<MusicGameRangeConfig> __this__musicRangeConfigMap = new ArrayList<MusicGameRangeConfig>(other.musicRangeConfigMap.size());
      for (MusicGameRangeConfig other_element : other.musicRangeConfigMap) {
        __this__musicRangeConfigMap.add(new MusicGameRangeConfig(other_element));
      }
      this.musicRangeConfigMap = __this__musicRangeConfigMap;
    }
    if (other.isSetMusicSpeedConfigMap()) {
      List<MusicGameSpeedConfig> __this__musicSpeedConfigMap = new ArrayList<MusicGameSpeedConfig>(other.musicSpeedConfigMap.size());
      for (MusicGameSpeedConfig other_element : other.musicSpeedConfigMap) {
        __this__musicSpeedConfigMap.add(new MusicGameSpeedConfig(other_element));
      }
      this.musicSpeedConfigMap = __this__musicSpeedConfigMap;
    }
    if (other.isSetMusicErrorConfigMap()) {
      List<MusicGameErrorConfig> __this__musicErrorConfigMap = new ArrayList<MusicGameErrorConfig>(other.musicErrorConfigMap.size());
      for (MusicGameErrorConfig other_element : other.musicErrorConfigMap) {
        __this__musicErrorConfigMap.add(new MusicGameErrorConfig(other_element));
      }
      this.musicErrorConfigMap = __this__musicErrorConfigMap;
    }
  }

  public MusicGameConfigTable deepCopy() {
    return new MusicGameConfigTable(this);
  }

  @Override
  public void clear() {
    this.musicRangeConfigMap = null;
    this.musicSpeedConfigMap = null;
    this.musicErrorConfigMap = null;
  }

  public int getMusicRangeConfigMapSize() {
    return (this.musicRangeConfigMap == null) ? 0 : this.musicRangeConfigMap.size();
  }

  public java.util.Iterator<MusicGameRangeConfig> getMusicRangeConfigMapIterator() {
    return (this.musicRangeConfigMap == null) ? null : this.musicRangeConfigMap.iterator();
  }

  public void addToMusicRangeConfigMap(MusicGameRangeConfig elem) {
    if (this.musicRangeConfigMap == null) {
      this.musicRangeConfigMap = new ArrayList<MusicGameRangeConfig>();
    }
    this.musicRangeConfigMap.add(elem);
  }

  public List<MusicGameRangeConfig> getMusicRangeConfigMap() {
    return this.musicRangeConfigMap;
  }

  public MusicGameConfigTable setMusicRangeConfigMap(List<MusicGameRangeConfig> musicRangeConfigMap) {
    this.musicRangeConfigMap = musicRangeConfigMap;
    return this;
  }

  public void unsetMusicRangeConfigMap() {
    this.musicRangeConfigMap = null;
  }

  /** Returns true if field musicRangeConfigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicRangeConfigMap() {
    return this.musicRangeConfigMap != null;
  }

  public void setMusicRangeConfigMapIsSet(boolean value) {
    if (!value) {
      this.musicRangeConfigMap = null;
    }
  }

  public int getMusicSpeedConfigMapSize() {
    return (this.musicSpeedConfigMap == null) ? 0 : this.musicSpeedConfigMap.size();
  }

  public java.util.Iterator<MusicGameSpeedConfig> getMusicSpeedConfigMapIterator() {
    return (this.musicSpeedConfigMap == null) ? null : this.musicSpeedConfigMap.iterator();
  }

  public void addToMusicSpeedConfigMap(MusicGameSpeedConfig elem) {
    if (this.musicSpeedConfigMap == null) {
      this.musicSpeedConfigMap = new ArrayList<MusicGameSpeedConfig>();
    }
    this.musicSpeedConfigMap.add(elem);
  }

  public List<MusicGameSpeedConfig> getMusicSpeedConfigMap() {
    return this.musicSpeedConfigMap;
  }

  public MusicGameConfigTable setMusicSpeedConfigMap(List<MusicGameSpeedConfig> musicSpeedConfigMap) {
    this.musicSpeedConfigMap = musicSpeedConfigMap;
    return this;
  }

  public void unsetMusicSpeedConfigMap() {
    this.musicSpeedConfigMap = null;
  }

  /** Returns true if field musicSpeedConfigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicSpeedConfigMap() {
    return this.musicSpeedConfigMap != null;
  }

  public void setMusicSpeedConfigMapIsSet(boolean value) {
    if (!value) {
      this.musicSpeedConfigMap = null;
    }
  }

  public int getMusicErrorConfigMapSize() {
    return (this.musicErrorConfigMap == null) ? 0 : this.musicErrorConfigMap.size();
  }

  public java.util.Iterator<MusicGameErrorConfig> getMusicErrorConfigMapIterator() {
    return (this.musicErrorConfigMap == null) ? null : this.musicErrorConfigMap.iterator();
  }

  public void addToMusicErrorConfigMap(MusicGameErrorConfig elem) {
    if (this.musicErrorConfigMap == null) {
      this.musicErrorConfigMap = new ArrayList<MusicGameErrorConfig>();
    }
    this.musicErrorConfigMap.add(elem);
  }

  public List<MusicGameErrorConfig> getMusicErrorConfigMap() {
    return this.musicErrorConfigMap;
  }

  public MusicGameConfigTable setMusicErrorConfigMap(List<MusicGameErrorConfig> musicErrorConfigMap) {
    this.musicErrorConfigMap = musicErrorConfigMap;
    return this;
  }

  public void unsetMusicErrorConfigMap() {
    this.musicErrorConfigMap = null;
  }

  /** Returns true if field musicErrorConfigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicErrorConfigMap() {
    return this.musicErrorConfigMap != null;
  }

  public void setMusicErrorConfigMapIsSet(boolean value) {
    if (!value) {
      this.musicErrorConfigMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MUSIC_RANGE_CONFIG_MAP:
      if (value == null) {
        unsetMusicRangeConfigMap();
      } else {
        setMusicRangeConfigMap((List<MusicGameRangeConfig>)value);
      }
      break;

    case MUSIC_SPEED_CONFIG_MAP:
      if (value == null) {
        unsetMusicSpeedConfigMap();
      } else {
        setMusicSpeedConfigMap((List<MusicGameSpeedConfig>)value);
      }
      break;

    case MUSIC_ERROR_CONFIG_MAP:
      if (value == null) {
        unsetMusicErrorConfigMap();
      } else {
        setMusicErrorConfigMap((List<MusicGameErrorConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MUSIC_RANGE_CONFIG_MAP:
      return getMusicRangeConfigMap();

    case MUSIC_SPEED_CONFIG_MAP:
      return getMusicSpeedConfigMap();

    case MUSIC_ERROR_CONFIG_MAP:
      return getMusicErrorConfigMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MUSIC_RANGE_CONFIG_MAP:
      return isSetMusicRangeConfigMap();
    case MUSIC_SPEED_CONFIG_MAP:
      return isSetMusicSpeedConfigMap();
    case MUSIC_ERROR_CONFIG_MAP:
      return isSetMusicErrorConfigMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MusicGameConfigTable)
      return this.equals((MusicGameConfigTable)that);
    return false;
  }

  public boolean equals(MusicGameConfigTable that) {
    if (that == null)
      return false;

    boolean this_present_musicRangeConfigMap = true && this.isSetMusicRangeConfigMap();
    boolean that_present_musicRangeConfigMap = true && that.isSetMusicRangeConfigMap();
    if (this_present_musicRangeConfigMap || that_present_musicRangeConfigMap) {
      if (!(this_present_musicRangeConfigMap && that_present_musicRangeConfigMap))
        return false;
      if (!this.musicRangeConfigMap.equals(that.musicRangeConfigMap))
        return false;
    }

    boolean this_present_musicSpeedConfigMap = true && this.isSetMusicSpeedConfigMap();
    boolean that_present_musicSpeedConfigMap = true && that.isSetMusicSpeedConfigMap();
    if (this_present_musicSpeedConfigMap || that_present_musicSpeedConfigMap) {
      if (!(this_present_musicSpeedConfigMap && that_present_musicSpeedConfigMap))
        return false;
      if (!this.musicSpeedConfigMap.equals(that.musicSpeedConfigMap))
        return false;
    }

    boolean this_present_musicErrorConfigMap = true && this.isSetMusicErrorConfigMap();
    boolean that_present_musicErrorConfigMap = true && that.isSetMusicErrorConfigMap();
    if (this_present_musicErrorConfigMap || that_present_musicErrorConfigMap) {
      if (!(this_present_musicErrorConfigMap && that_present_musicErrorConfigMap))
        return false;
      if (!this.musicErrorConfigMap.equals(that.musicErrorConfigMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MusicGameConfigTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMusicRangeConfigMap()).compareTo(other.isSetMusicRangeConfigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicRangeConfigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicRangeConfigMap, other.musicRangeConfigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicSpeedConfigMap()).compareTo(other.isSetMusicSpeedConfigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicSpeedConfigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicSpeedConfigMap, other.musicSpeedConfigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicErrorConfigMap()).compareTo(other.isSetMusicErrorConfigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicErrorConfigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicErrorConfigMap, other.musicErrorConfigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MusicGameConfigTable(");
    boolean first = true;

    sb.append("musicRangeConfigMap:");
    if (this.musicRangeConfigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.musicRangeConfigMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicSpeedConfigMap:");
    if (this.musicSpeedConfigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.musicSpeedConfigMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicErrorConfigMap:");
    if (this.musicErrorConfigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.musicErrorConfigMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MusicGameConfigTableStandardSchemeFactory implements SchemeFactory {
    public MusicGameConfigTableStandardScheme getScheme() {
      return new MusicGameConfigTableStandardScheme();
    }
  }

  private static class MusicGameConfigTableStandardScheme extends StandardScheme<MusicGameConfigTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MusicGameConfigTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // MUSIC_RANGE_CONFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                struct.musicRangeConfigMap = new ArrayList<MusicGameRangeConfig>(_list222.size);
                for (int _i223 = 0; _i223 < _list222.size; ++_i223)
                {
                  MusicGameRangeConfig _elem224;
                  _elem224 = new MusicGameRangeConfig();
                  _elem224.read(iprot);
                  struct.musicRangeConfigMap.add(_elem224);
                }
                iprot.readListEnd();
              }
              struct.setMusicRangeConfigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MUSIC_SPEED_CONFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list225 = iprot.readListBegin();
                struct.musicSpeedConfigMap = new ArrayList<MusicGameSpeedConfig>(_list225.size);
                for (int _i226 = 0; _i226 < _list225.size; ++_i226)
                {
                  MusicGameSpeedConfig _elem227;
                  _elem227 = new MusicGameSpeedConfig();
                  _elem227.read(iprot);
                  struct.musicSpeedConfigMap.add(_elem227);
                }
                iprot.readListEnd();
              }
              struct.setMusicSpeedConfigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MUSIC_ERROR_CONFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list228 = iprot.readListBegin();
                struct.musicErrorConfigMap = new ArrayList<MusicGameErrorConfig>(_list228.size);
                for (int _i229 = 0; _i229 < _list228.size; ++_i229)
                {
                  MusicGameErrorConfig _elem230;
                  _elem230 = new MusicGameErrorConfig();
                  _elem230.read(iprot);
                  struct.musicErrorConfigMap.add(_elem230);
                }
                iprot.readListEnd();
              }
              struct.setMusicErrorConfigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MusicGameConfigTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.musicRangeConfigMap != null) {
        oprot.writeFieldBegin(MUSIC_RANGE_CONFIG_MAP_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.musicRangeConfigMap.size()));
          for (MusicGameRangeConfig _iter231 : struct.musicRangeConfigMap)
          {
            _iter231.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.musicSpeedConfigMap != null) {
        oprot.writeFieldBegin(MUSIC_SPEED_CONFIG_MAP_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.musicSpeedConfigMap.size()));
          for (MusicGameSpeedConfig _iter232 : struct.musicSpeedConfigMap)
          {
            _iter232.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.musicErrorConfigMap != null) {
        oprot.writeFieldBegin(MUSIC_ERROR_CONFIG_MAP_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.musicErrorConfigMap.size()));
          for (MusicGameErrorConfig _iter233 : struct.musicErrorConfigMap)
          {
            _iter233.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MusicGameConfigTableTupleSchemeFactory implements SchemeFactory {
    public MusicGameConfigTableTupleScheme getScheme() {
      return new MusicGameConfigTableTupleScheme();
    }
  }

  private static class MusicGameConfigTableTupleScheme extends TupleScheme<MusicGameConfigTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MusicGameConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMusicRangeConfigMap()) {
        optionals.set(0);
      }
      if (struct.isSetMusicSpeedConfigMap()) {
        optionals.set(1);
      }
      if (struct.isSetMusicErrorConfigMap()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMusicRangeConfigMap()) {
        {
          oprot.writeI32(struct.musicRangeConfigMap.size());
          for (MusicGameRangeConfig _iter234 : struct.musicRangeConfigMap)
          {
            _iter234.write(oprot);
          }
        }
      }
      if (struct.isSetMusicSpeedConfigMap()) {
        {
          oprot.writeI32(struct.musicSpeedConfigMap.size());
          for (MusicGameSpeedConfig _iter235 : struct.musicSpeedConfigMap)
          {
            _iter235.write(oprot);
          }
        }
      }
      if (struct.isSetMusicErrorConfigMap()) {
        {
          oprot.writeI32(struct.musicErrorConfigMap.size());
          for (MusicGameErrorConfig _iter236 : struct.musicErrorConfigMap)
          {
            _iter236.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MusicGameConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.musicRangeConfigMap = new ArrayList<MusicGameRangeConfig>(_list237.size);
          for (int _i238 = 0; _i238 < _list237.size; ++_i238)
          {
            MusicGameRangeConfig _elem239;
            _elem239 = new MusicGameRangeConfig();
            _elem239.read(iprot);
            struct.musicRangeConfigMap.add(_elem239);
          }
        }
        struct.setMusicRangeConfigMapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list240 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.musicSpeedConfigMap = new ArrayList<MusicGameSpeedConfig>(_list240.size);
          for (int _i241 = 0; _i241 < _list240.size; ++_i241)
          {
            MusicGameSpeedConfig _elem242;
            _elem242 = new MusicGameSpeedConfig();
            _elem242.read(iprot);
            struct.musicSpeedConfigMap.add(_elem242);
          }
        }
        struct.setMusicSpeedConfigMapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list243 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.musicErrorConfigMap = new ArrayList<MusicGameErrorConfig>(_list243.size);
          for (int _i244 = 0; _i244 < _list243.size; ++_i244)
          {
            MusicGameErrorConfig _elem245;
            _elem245 = new MusicGameErrorConfig();
            _elem245.read(iprot);
            struct.musicErrorConfigMap.add(_elem245);
          }
        }
        struct.setMusicErrorConfigMapIsSet(true);
      }
    }
  }

}

