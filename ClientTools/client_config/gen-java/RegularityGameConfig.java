/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RegularityGameConfig implements org.apache.thrift.TBase<RegularityGameConfig, RegularityGameConfig._Fields>, java.io.Serializable, Cloneable, Comparable<RegularityGameConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegularityGameConfig");

  private static final org.apache.thrift.protocol.TField DIFFICULTYID_FIELD_DESC = new org.apache.thrift.protocol.TField("difficultyid", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField OPTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("optionList", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField ANSWER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("answerList", org.apache.thrift.protocol.TType.LIST, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegularityGameConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegularityGameConfigTupleSchemeFactory());
  }

  public double difficultyid; // required
  public List<RegularityGameOption> optionList; // required
  public List<String> answerList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIFFICULTYID((short)10, "difficultyid"),
    OPTION_LIST((short)20, "optionList"),
    ANSWER_LIST((short)30, "answerList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // DIFFICULTYID
          return DIFFICULTYID;
        case 20: // OPTION_LIST
          return OPTION_LIST;
        case 30: // ANSWER_LIST
          return ANSWER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIFFICULTYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIFFICULTYID, new org.apache.thrift.meta_data.FieldMetaData("difficultyid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("optionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegularityGameOption.class))));
    tmpMap.put(_Fields.ANSWER_LIST, new org.apache.thrift.meta_data.FieldMetaData("answerList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegularityGameConfig.class, metaDataMap);
  }

  public RegularityGameConfig() {
  }

  public RegularityGameConfig(
    double difficultyid,
    List<RegularityGameOption> optionList,
    List<String> answerList)
  {
    this();
    this.difficultyid = difficultyid;
    setDifficultyidIsSet(true);
    this.optionList = optionList;
    this.answerList = answerList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegularityGameConfig(RegularityGameConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.difficultyid = other.difficultyid;
    if (other.isSetOptionList()) {
      List<RegularityGameOption> __this__optionList = new ArrayList<RegularityGameOption>(other.optionList.size());
      for (RegularityGameOption other_element : other.optionList) {
        __this__optionList.add(new RegularityGameOption(other_element));
      }
      this.optionList = __this__optionList;
    }
    if (other.isSetAnswerList()) {
      List<String> __this__answerList = new ArrayList<String>(other.answerList);
      this.answerList = __this__answerList;
    }
  }

  public RegularityGameConfig deepCopy() {
    return new RegularityGameConfig(this);
  }

  @Override
  public void clear() {
    setDifficultyidIsSet(false);
    this.difficultyid = 0.0;
    this.optionList = null;
    this.answerList = null;
  }

  public double getDifficultyid() {
    return this.difficultyid;
  }

  public RegularityGameConfig setDifficultyid(double difficultyid) {
    this.difficultyid = difficultyid;
    setDifficultyidIsSet(true);
    return this;
  }

  public void unsetDifficultyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFFICULTYID_ISSET_ID);
  }

  /** Returns true if field difficultyid is set (has been assigned a value) and false otherwise */
  public boolean isSetDifficultyid() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFFICULTYID_ISSET_ID);
  }

  public void setDifficultyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFFICULTYID_ISSET_ID, value);
  }

  public int getOptionListSize() {
    return (this.optionList == null) ? 0 : this.optionList.size();
  }

  public java.util.Iterator<RegularityGameOption> getOptionListIterator() {
    return (this.optionList == null) ? null : this.optionList.iterator();
  }

  public void addToOptionList(RegularityGameOption elem) {
    if (this.optionList == null) {
      this.optionList = new ArrayList<RegularityGameOption>();
    }
    this.optionList.add(elem);
  }

  public List<RegularityGameOption> getOptionList() {
    return this.optionList;
  }

  public RegularityGameConfig setOptionList(List<RegularityGameOption> optionList) {
    this.optionList = optionList;
    return this;
  }

  public void unsetOptionList() {
    this.optionList = null;
  }

  /** Returns true if field optionList is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionList() {
    return this.optionList != null;
  }

  public void setOptionListIsSet(boolean value) {
    if (!value) {
      this.optionList = null;
    }
  }

  public int getAnswerListSize() {
    return (this.answerList == null) ? 0 : this.answerList.size();
  }

  public java.util.Iterator<String> getAnswerListIterator() {
    return (this.answerList == null) ? null : this.answerList.iterator();
  }

  public void addToAnswerList(String elem) {
    if (this.answerList == null) {
      this.answerList = new ArrayList<String>();
    }
    this.answerList.add(elem);
  }

  public List<String> getAnswerList() {
    return this.answerList;
  }

  public RegularityGameConfig setAnswerList(List<String> answerList) {
    this.answerList = answerList;
    return this;
  }

  public void unsetAnswerList() {
    this.answerList = null;
  }

  /** Returns true if field answerList is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerList() {
    return this.answerList != null;
  }

  public void setAnswerListIsSet(boolean value) {
    if (!value) {
      this.answerList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIFFICULTYID:
      if (value == null) {
        unsetDifficultyid();
      } else {
        setDifficultyid((Double)value);
      }
      break;

    case OPTION_LIST:
      if (value == null) {
        unsetOptionList();
      } else {
        setOptionList((List<RegularityGameOption>)value);
      }
      break;

    case ANSWER_LIST:
      if (value == null) {
        unsetAnswerList();
      } else {
        setAnswerList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIFFICULTYID:
      return Double.valueOf(getDifficultyid());

    case OPTION_LIST:
      return getOptionList();

    case ANSWER_LIST:
      return getAnswerList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIFFICULTYID:
      return isSetDifficultyid();
    case OPTION_LIST:
      return isSetOptionList();
    case ANSWER_LIST:
      return isSetAnswerList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegularityGameConfig)
      return this.equals((RegularityGameConfig)that);
    return false;
  }

  public boolean equals(RegularityGameConfig that) {
    if (that == null)
      return false;

    boolean this_present_difficultyid = true;
    boolean that_present_difficultyid = true;
    if (this_present_difficultyid || that_present_difficultyid) {
      if (!(this_present_difficultyid && that_present_difficultyid))
        return false;
      if (this.difficultyid != that.difficultyid)
        return false;
    }

    boolean this_present_optionList = true && this.isSetOptionList();
    boolean that_present_optionList = true && that.isSetOptionList();
    if (this_present_optionList || that_present_optionList) {
      if (!(this_present_optionList && that_present_optionList))
        return false;
      if (!this.optionList.equals(that.optionList))
        return false;
    }

    boolean this_present_answerList = true && this.isSetAnswerList();
    boolean that_present_answerList = true && that.isSetAnswerList();
    if (this_present_answerList || that_present_answerList) {
      if (!(this_present_answerList && that_present_answerList))
        return false;
      if (!this.answerList.equals(that.answerList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RegularityGameConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDifficultyid()).compareTo(other.isSetDifficultyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifficultyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.difficultyid, other.difficultyid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionList()).compareTo(other.isSetOptionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionList, other.optionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerList()).compareTo(other.isSetAnswerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerList, other.answerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegularityGameConfig(");
    boolean first = true;

    sb.append("difficultyid:");
    sb.append(this.difficultyid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("optionList:");
    if (this.optionList == null) {
      sb.append("null");
    } else {
      sb.append(this.optionList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerList:");
    if (this.answerList == null) {
      sb.append("null");
    } else {
      sb.append(this.answerList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegularityGameConfigStandardSchemeFactory implements SchemeFactory {
    public RegularityGameConfigStandardScheme getScheme() {
      return new RegularityGameConfigStandardScheme();
    }
  }

  private static class RegularityGameConfigStandardScheme extends StandardScheme<RegularityGameConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegularityGameConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // DIFFICULTYID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.difficultyid = iprot.readDouble();
              struct.setDifficultyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OPTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                struct.optionList = new ArrayList<RegularityGameOption>(_list98.size);
                for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                {
                  RegularityGameOption _elem100;
                  _elem100 = new RegularityGameOption();
                  _elem100.read(iprot);
                  struct.optionList.add(_elem100);
                }
                iprot.readListEnd();
              }
              struct.setOptionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ANSWER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list101 = iprot.readListBegin();
                struct.answerList = new ArrayList<String>(_list101.size);
                for (int _i102 = 0; _i102 < _list101.size; ++_i102)
                {
                  String _elem103;
                  _elem103 = iprot.readString();
                  struct.answerList.add(_elem103);
                }
                iprot.readListEnd();
              }
              struct.setAnswerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegularityGameConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DIFFICULTYID_FIELD_DESC);
      oprot.writeDouble(struct.difficultyid);
      oprot.writeFieldEnd();
      if (struct.optionList != null) {
        oprot.writeFieldBegin(OPTION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.optionList.size()));
          for (RegularityGameOption _iter104 : struct.optionList)
          {
            _iter104.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.answerList != null) {
        oprot.writeFieldBegin(ANSWER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.answerList.size()));
          for (String _iter105 : struct.answerList)
          {
            oprot.writeString(_iter105);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegularityGameConfigTupleSchemeFactory implements SchemeFactory {
    public RegularityGameConfigTupleScheme getScheme() {
      return new RegularityGameConfigTupleScheme();
    }
  }

  private static class RegularityGameConfigTupleScheme extends TupleScheme<RegularityGameConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegularityGameConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDifficultyid()) {
        optionals.set(0);
      }
      if (struct.isSetOptionList()) {
        optionals.set(1);
      }
      if (struct.isSetAnswerList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDifficultyid()) {
        oprot.writeDouble(struct.difficultyid);
      }
      if (struct.isSetOptionList()) {
        {
          oprot.writeI32(struct.optionList.size());
          for (RegularityGameOption _iter106 : struct.optionList)
          {
            _iter106.write(oprot);
          }
        }
      }
      if (struct.isSetAnswerList()) {
        {
          oprot.writeI32(struct.answerList.size());
          for (String _iter107 : struct.answerList)
          {
            oprot.writeString(_iter107);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegularityGameConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.difficultyid = iprot.readDouble();
        struct.setDifficultyidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list108 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.optionList = new ArrayList<RegularityGameOption>(_list108.size);
          for (int _i109 = 0; _i109 < _list108.size; ++_i109)
          {
            RegularityGameOption _elem110;
            _elem110 = new RegularityGameOption();
            _elem110.read(iprot);
            struct.optionList.add(_elem110);
          }
        }
        struct.setOptionListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.answerList = new ArrayList<String>(_list111.size);
          for (int _i112 = 0; _i112 < _list111.size; ++_i112)
          {
            String _elem113;
            _elem113 = iprot.readString();
            struct.answerList.add(_elem113);
          }
        }
        struct.setAnswerListIsSet(true);
      }
    }
  }

}

