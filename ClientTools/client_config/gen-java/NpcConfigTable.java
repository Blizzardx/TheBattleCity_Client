/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NpcConfigTable implements org.apache.thrift.TBase<NpcConfigTable, NpcConfigTable._Fields>, java.io.Serializable, Cloneable, Comparable<NpcConfigTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NpcConfigTable");

  private static final org.apache.thrift.protocol.TField NPC_COFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("npcCofigMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NpcConfigTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NpcConfigTableTupleSchemeFactory());
  }

  public Map<Integer,NpcConfig> npcCofigMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NPC_COFIG_MAP((short)1, "npcCofigMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NPC_COFIG_MAP
          return NPC_COFIG_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NPC_COFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("npcCofigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NpcConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NpcConfigTable.class, metaDataMap);
  }

  public NpcConfigTable() {
  }

  public NpcConfigTable(
    Map<Integer,NpcConfig> npcCofigMap)
  {
    this();
    this.npcCofigMap = npcCofigMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NpcConfigTable(NpcConfigTable other) {
    if (other.isSetNpcCofigMap()) {
      Map<Integer,NpcConfig> __this__npcCofigMap = new HashMap<Integer,NpcConfig>(other.npcCofigMap.size());
      for (Map.Entry<Integer, NpcConfig> other_element : other.npcCofigMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        NpcConfig other_element_value = other_element.getValue();

        Integer __this__npcCofigMap_copy_key = other_element_key;

        NpcConfig __this__npcCofigMap_copy_value = new NpcConfig(other_element_value);

        __this__npcCofigMap.put(__this__npcCofigMap_copy_key, __this__npcCofigMap_copy_value);
      }
      this.npcCofigMap = __this__npcCofigMap;
    }
  }

  public NpcConfigTable deepCopy() {
    return new NpcConfigTable(this);
  }

  @Override
  public void clear() {
    this.npcCofigMap = null;
  }

  public int getNpcCofigMapSize() {
    return (this.npcCofigMap == null) ? 0 : this.npcCofigMap.size();
  }

  public void putToNpcCofigMap(int key, NpcConfig val) {
    if (this.npcCofigMap == null) {
      this.npcCofigMap = new HashMap<Integer,NpcConfig>();
    }
    this.npcCofigMap.put(key, val);
  }

  public Map<Integer,NpcConfig> getNpcCofigMap() {
    return this.npcCofigMap;
  }

  public NpcConfigTable setNpcCofigMap(Map<Integer,NpcConfig> npcCofigMap) {
    this.npcCofigMap = npcCofigMap;
    return this;
  }

  public void unsetNpcCofigMap() {
    this.npcCofigMap = null;
  }

  /** Returns true if field npcCofigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetNpcCofigMap() {
    return this.npcCofigMap != null;
  }

  public void setNpcCofigMapIsSet(boolean value) {
    if (!value) {
      this.npcCofigMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NPC_COFIG_MAP:
      if (value == null) {
        unsetNpcCofigMap();
      } else {
        setNpcCofigMap((Map<Integer,NpcConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NPC_COFIG_MAP:
      return getNpcCofigMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NPC_COFIG_MAP:
      return isSetNpcCofigMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NpcConfigTable)
      return this.equals((NpcConfigTable)that);
    return false;
  }

  public boolean equals(NpcConfigTable that) {
    if (that == null)
      return false;

    boolean this_present_npcCofigMap = true && this.isSetNpcCofigMap();
    boolean that_present_npcCofigMap = true && that.isSetNpcCofigMap();
    if (this_present_npcCofigMap || that_present_npcCofigMap) {
      if (!(this_present_npcCofigMap && that_present_npcCofigMap))
        return false;
      if (!this.npcCofigMap.equals(that.npcCofigMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(NpcConfigTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNpcCofigMap()).compareTo(other.isSetNpcCofigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpcCofigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npcCofigMap, other.npcCofigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NpcConfigTable(");
    boolean first = true;

    sb.append("npcCofigMap:");
    if (this.npcCofigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.npcCofigMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NpcConfigTableStandardSchemeFactory implements SchemeFactory {
    public NpcConfigTableStandardScheme getScheme() {
      return new NpcConfigTableStandardScheme();
    }
  }

  private static class NpcConfigTableStandardScheme extends StandardScheme<NpcConfigTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NpcConfigTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NPC_COFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                struct.npcCofigMap = new HashMap<Integer,NpcConfig>(2*_map50.size);
                for (int _i51 = 0; _i51 < _map50.size; ++_i51)
                {
                  int _key52;
                  NpcConfig _val53;
                  _key52 = iprot.readI32();
                  _val53 = new NpcConfig();
                  _val53.read(iprot);
                  struct.npcCofigMap.put(_key52, _val53);
                }
                iprot.readMapEnd();
              }
              struct.setNpcCofigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NpcConfigTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.npcCofigMap != null) {
        oprot.writeFieldBegin(NPC_COFIG_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.npcCofigMap.size()));
          for (Map.Entry<Integer, NpcConfig> _iter54 : struct.npcCofigMap.entrySet())
          {
            oprot.writeI32(_iter54.getKey());
            _iter54.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NpcConfigTableTupleSchemeFactory implements SchemeFactory {
    public NpcConfigTableTupleScheme getScheme() {
      return new NpcConfigTableTupleScheme();
    }
  }

  private static class NpcConfigTableTupleScheme extends TupleScheme<NpcConfigTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NpcConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNpcCofigMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNpcCofigMap()) {
        {
          oprot.writeI32(struct.npcCofigMap.size());
          for (Map.Entry<Integer, NpcConfig> _iter55 : struct.npcCofigMap.entrySet())
          {
            oprot.writeI32(_iter55.getKey());
            _iter55.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NpcConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.npcCofigMap = new HashMap<Integer,NpcConfig>(2*_map56.size);
          for (int _i57 = 0; _i57 < _map56.size; ++_i57)
          {
            int _key58;
            NpcConfig _val59;
            _key58 = iprot.readI32();
            _val59 = new NpcConfig();
            _val59.read(iprot);
            struct.npcCofigMap.put(_key58, _val59);
          }
        }
        struct.setNpcCofigMapIsSet(true);
      }
    }
  }

}

