/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SkillConfigTable implements org.apache.thrift.TBase<SkillConfigTable, SkillConfigTable._Fields>, java.io.Serializable, Cloneable, Comparable<SkillConfigTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SkillConfigTable");

  private static final org.apache.thrift.protocol.TField SKILL_CONFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("skillConfigMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SkillConfigTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SkillConfigTableTupleSchemeFactory());
  }

  public Map<Integer,SkillConfig> skillConfigMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SKILL_CONFIG_MAP((short)1, "skillConfigMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SKILL_CONFIG_MAP
          return SKILL_CONFIG_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SKILL_CONFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("skillConfigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SkillConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SkillConfigTable.class, metaDataMap);
  }

  public SkillConfigTable() {
  }

  public SkillConfigTable(
    Map<Integer,SkillConfig> skillConfigMap)
  {
    this();
    this.skillConfigMap = skillConfigMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SkillConfigTable(SkillConfigTable other) {
    if (other.isSetSkillConfigMap()) {
      Map<Integer,SkillConfig> __this__skillConfigMap = new HashMap<Integer,SkillConfig>(other.skillConfigMap.size());
      for (Map.Entry<Integer, SkillConfig> other_element : other.skillConfigMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        SkillConfig other_element_value = other_element.getValue();

        Integer __this__skillConfigMap_copy_key = other_element_key;

        SkillConfig __this__skillConfigMap_copy_value = new SkillConfig(other_element_value);

        __this__skillConfigMap.put(__this__skillConfigMap_copy_key, __this__skillConfigMap_copy_value);
      }
      this.skillConfigMap = __this__skillConfigMap;
    }
  }

  public SkillConfigTable deepCopy() {
    return new SkillConfigTable(this);
  }

  @Override
  public void clear() {
    this.skillConfigMap = null;
  }

  public int getSkillConfigMapSize() {
    return (this.skillConfigMap == null) ? 0 : this.skillConfigMap.size();
  }

  public void putToSkillConfigMap(int key, SkillConfig val) {
    if (this.skillConfigMap == null) {
      this.skillConfigMap = new HashMap<Integer,SkillConfig>();
    }
    this.skillConfigMap.put(key, val);
  }

  public Map<Integer,SkillConfig> getSkillConfigMap() {
    return this.skillConfigMap;
  }

  public SkillConfigTable setSkillConfigMap(Map<Integer,SkillConfig> skillConfigMap) {
    this.skillConfigMap = skillConfigMap;
    return this;
  }

  public void unsetSkillConfigMap() {
    this.skillConfigMap = null;
  }

  /** Returns true if field skillConfigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetSkillConfigMap() {
    return this.skillConfigMap != null;
  }

  public void setSkillConfigMapIsSet(boolean value) {
    if (!value) {
      this.skillConfigMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SKILL_CONFIG_MAP:
      if (value == null) {
        unsetSkillConfigMap();
      } else {
        setSkillConfigMap((Map<Integer,SkillConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SKILL_CONFIG_MAP:
      return getSkillConfigMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SKILL_CONFIG_MAP:
      return isSetSkillConfigMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SkillConfigTable)
      return this.equals((SkillConfigTable)that);
    return false;
  }

  public boolean equals(SkillConfigTable that) {
    if (that == null)
      return false;

    boolean this_present_skillConfigMap = true && this.isSetSkillConfigMap();
    boolean that_present_skillConfigMap = true && that.isSetSkillConfigMap();
    if (this_present_skillConfigMap || that_present_skillConfigMap) {
      if (!(this_present_skillConfigMap && that_present_skillConfigMap))
        return false;
      if (!this.skillConfigMap.equals(that.skillConfigMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SkillConfigTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSkillConfigMap()).compareTo(other.isSetSkillConfigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkillConfigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skillConfigMap, other.skillConfigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SkillConfigTable(");
    boolean first = true;

    sb.append("skillConfigMap:");
    if (this.skillConfigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.skillConfigMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SkillConfigTableStandardSchemeFactory implements SchemeFactory {
    public SkillConfigTableStandardScheme getScheme() {
      return new SkillConfigTableStandardScheme();
    }
  }

  private static class SkillConfigTableStandardScheme extends StandardScheme<SkillConfigTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SkillConfigTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SKILL_CONFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map138 = iprot.readMapBegin();
                struct.skillConfigMap = new HashMap<Integer,SkillConfig>(2*_map138.size);
                for (int _i139 = 0; _i139 < _map138.size; ++_i139)
                {
                  int _key140;
                  SkillConfig _val141;
                  _key140 = iprot.readI32();
                  _val141 = new SkillConfig();
                  _val141.read(iprot);
                  struct.skillConfigMap.put(_key140, _val141);
                }
                iprot.readMapEnd();
              }
              struct.setSkillConfigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SkillConfigTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.skillConfigMap != null) {
        oprot.writeFieldBegin(SKILL_CONFIG_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.skillConfigMap.size()));
          for (Map.Entry<Integer, SkillConfig> _iter142 : struct.skillConfigMap.entrySet())
          {
            oprot.writeI32(_iter142.getKey());
            _iter142.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SkillConfigTableTupleSchemeFactory implements SchemeFactory {
    public SkillConfigTableTupleScheme getScheme() {
      return new SkillConfigTableTupleScheme();
    }
  }

  private static class SkillConfigTableTupleScheme extends TupleScheme<SkillConfigTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SkillConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSkillConfigMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSkillConfigMap()) {
        {
          oprot.writeI32(struct.skillConfigMap.size());
          for (Map.Entry<Integer, SkillConfig> _iter143 : struct.skillConfigMap.entrySet())
          {
            oprot.writeI32(_iter143.getKey());
            _iter143.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SkillConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map144 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.skillConfigMap = new HashMap<Integer,SkillConfig>(2*_map144.size);
          for (int _i145 = 0; _i145 < _map144.size; ++_i145)
          {
            int _key146;
            SkillConfig _val147;
            _key146 = iprot.readI32();
            _val147 = new SkillConfig();
            _val147.read(iprot);
            struct.skillConfigMap.put(_key146, _val147);
          }
        }
        struct.setSkillConfigMapIsSet(true);
      }
    }
  }

}

