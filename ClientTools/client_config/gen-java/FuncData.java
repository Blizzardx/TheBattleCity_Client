/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FuncData implements org.apache.thrift.TBase<FuncData, FuncData._Fields>, java.io.Serializable, Cloneable, Comparable<FuncData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FuncData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPER_FIELD_DESC = new org.apache.thrift.protocol.TField("oper", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField PARAM_STRING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramStringList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PARAM_INT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramIntList", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FuncDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FuncDataTupleSchemeFactory());
  }

  public int id; // required
  public byte oper; // required
  public byte target; // required
  public List<String> paramStringList; // required
  public List<Integer> paramIntList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    OPER((short)2, "oper"),
    TARGET((short)3, "target"),
    PARAM_STRING_LIST((short)4, "paramStringList"),
    PARAM_INT_LIST((short)5, "paramIntList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // OPER
          return OPER;
        case 3: // TARGET
          return TARGET;
        case 4: // PARAM_STRING_LIST
          return PARAM_STRING_LIST;
        case 5: // PARAM_INT_LIST
          return PARAM_INT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __OPER_ISSET_ID = 1;
  private static final int __TARGET_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "FuncId")));
    tmpMap.put(_Fields.OPER, new org.apache.thrift.meta_data.FieldMetaData("oper", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PARAM_STRING_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramStringList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARAM_INT_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramIntList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FuncData.class, metaDataMap);
  }

  public FuncData() {
  }

  public FuncData(
    int id,
    byte oper,
    byte target,
    List<String> paramStringList,
    List<Integer> paramIntList)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.oper = oper;
    setOperIsSet(true);
    this.target = target;
    setTargetIsSet(true);
    this.paramStringList = paramStringList;
    this.paramIntList = paramIntList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FuncData(FuncData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.oper = other.oper;
    this.target = other.target;
    if (other.isSetParamStringList()) {
      List<String> __this__paramStringList = new ArrayList<String>(other.paramStringList);
      this.paramStringList = __this__paramStringList;
    }
    if (other.isSetParamIntList()) {
      List<Integer> __this__paramIntList = new ArrayList<Integer>(other.paramIntList);
      this.paramIntList = __this__paramIntList;
    }
  }

  public FuncData deepCopy() {
    return new FuncData(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setOperIsSet(false);
    this.oper = 0;
    setTargetIsSet(false);
    this.target = 0;
    this.paramStringList = null;
    this.paramIntList = null;
  }

  public int getId() {
    return this.id;
  }

  public FuncData setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public byte getOper() {
    return this.oper;
  }

  public FuncData setOper(byte oper) {
    this.oper = oper;
    setOperIsSet(true);
    return this;
  }

  public void unsetOper() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPER_ISSET_ID);
  }

  /** Returns true if field oper is set (has been assigned a value) and false otherwise */
  public boolean isSetOper() {
    return EncodingUtils.testBit(__isset_bitfield, __OPER_ISSET_ID);
  }

  public void setOperIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPER_ISSET_ID, value);
  }

  public byte getTarget() {
    return this.target;
  }

  public FuncData setTarget(byte target) {
    this.target = target;
    setTargetIsSet(true);
    return this;
  }

  public void unsetTarget() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGET_ISSET_ID);
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGET_ISSET_ID);
  }

  public void setTargetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGET_ISSET_ID, value);
  }

  public int getParamStringListSize() {
    return (this.paramStringList == null) ? 0 : this.paramStringList.size();
  }

  public java.util.Iterator<String> getParamStringListIterator() {
    return (this.paramStringList == null) ? null : this.paramStringList.iterator();
  }

  public void addToParamStringList(String elem) {
    if (this.paramStringList == null) {
      this.paramStringList = new ArrayList<String>();
    }
    this.paramStringList.add(elem);
  }

  public List<String> getParamStringList() {
    return this.paramStringList;
  }

  public FuncData setParamStringList(List<String> paramStringList) {
    this.paramStringList = paramStringList;
    return this;
  }

  public void unsetParamStringList() {
    this.paramStringList = null;
  }

  /** Returns true if field paramStringList is set (has been assigned a value) and false otherwise */
  public boolean isSetParamStringList() {
    return this.paramStringList != null;
  }

  public void setParamStringListIsSet(boolean value) {
    if (!value) {
      this.paramStringList = null;
    }
  }

  public int getParamIntListSize() {
    return (this.paramIntList == null) ? 0 : this.paramIntList.size();
  }

  public java.util.Iterator<Integer> getParamIntListIterator() {
    return (this.paramIntList == null) ? null : this.paramIntList.iterator();
  }

  public void addToParamIntList(int elem) {
    if (this.paramIntList == null) {
      this.paramIntList = new ArrayList<Integer>();
    }
    this.paramIntList.add(elem);
  }

  public List<Integer> getParamIntList() {
    return this.paramIntList;
  }

  public FuncData setParamIntList(List<Integer> paramIntList) {
    this.paramIntList = paramIntList;
    return this;
  }

  public void unsetParamIntList() {
    this.paramIntList = null;
  }

  /** Returns true if field paramIntList is set (has been assigned a value) and false otherwise */
  public boolean isSetParamIntList() {
    return this.paramIntList != null;
  }

  public void setParamIntListIsSet(boolean value) {
    if (!value) {
      this.paramIntList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case OPER:
      if (value == null) {
        unsetOper();
      } else {
        setOper((Byte)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((Byte)value);
      }
      break;

    case PARAM_STRING_LIST:
      if (value == null) {
        unsetParamStringList();
      } else {
        setParamStringList((List<String>)value);
      }
      break;

    case PARAM_INT_LIST:
      if (value == null) {
        unsetParamIntList();
      } else {
        setParamIntList((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case OPER:
      return Byte.valueOf(getOper());

    case TARGET:
      return Byte.valueOf(getTarget());

    case PARAM_STRING_LIST:
      return getParamStringList();

    case PARAM_INT_LIST:
      return getParamIntList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case OPER:
      return isSetOper();
    case TARGET:
      return isSetTarget();
    case PARAM_STRING_LIST:
      return isSetParamStringList();
    case PARAM_INT_LIST:
      return isSetParamIntList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FuncData)
      return this.equals((FuncData)that);
    return false;
  }

  public boolean equals(FuncData that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_oper = true;
    boolean that_present_oper = true;
    if (this_present_oper || that_present_oper) {
      if (!(this_present_oper && that_present_oper))
        return false;
      if (this.oper != that.oper)
        return false;
    }

    boolean this_present_target = true;
    boolean that_present_target = true;
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (this.target != that.target)
        return false;
    }

    boolean this_present_paramStringList = true && this.isSetParamStringList();
    boolean that_present_paramStringList = true && that.isSetParamStringList();
    if (this_present_paramStringList || that_present_paramStringList) {
      if (!(this_present_paramStringList && that_present_paramStringList))
        return false;
      if (!this.paramStringList.equals(that.paramStringList))
        return false;
    }

    boolean this_present_paramIntList = true && this.isSetParamIntList();
    boolean that_present_paramIntList = true && that.isSetParamIntList();
    if (this_present_paramIntList || that_present_paramIntList) {
      if (!(this_present_paramIntList && that_present_paramIntList))
        return false;
      if (!this.paramIntList.equals(that.paramIntList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FuncData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOper()).compareTo(other.isSetOper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oper, other.oper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamStringList()).compareTo(other.isSetParamStringList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamStringList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramStringList, other.paramStringList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamIntList()).compareTo(other.isSetParamIntList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamIntList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramIntList, other.paramIntList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FuncData(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oper:");
    sb.append(this.oper);
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    sb.append(this.target);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paramStringList:");
    if (this.paramStringList == null) {
      sb.append("null");
    } else {
      sb.append(this.paramStringList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paramIntList:");
    if (this.paramIntList == null) {
      sb.append("null");
    } else {
      sb.append(this.paramIntList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FuncDataStandardSchemeFactory implements SchemeFactory {
    public FuncDataStandardScheme getScheme() {
      return new FuncDataStandardScheme();
    }
  }

  private static class FuncDataStandardScheme extends StandardScheme<FuncData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FuncData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.oper = iprot.readByte();
              struct.setOperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.target = iprot.readByte();
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAM_STRING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.paramStringList = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.paramStringList.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setParamStringListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAM_INT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.paramIntList = new ArrayList<Integer>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  int _elem29;
                  _elem29 = iprot.readI32();
                  struct.paramIntList.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setParamIntListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FuncData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPER_FIELD_DESC);
      oprot.writeByte(struct.oper);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_FIELD_DESC);
      oprot.writeByte(struct.target);
      oprot.writeFieldEnd();
      if (struct.paramStringList != null) {
        oprot.writeFieldBegin(PARAM_STRING_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.paramStringList.size()));
          for (String _iter30 : struct.paramStringList)
          {
            oprot.writeString(_iter30);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.paramIntList != null) {
        oprot.writeFieldBegin(PARAM_INT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.paramIntList.size()));
          for (int _iter31 : struct.paramIntList)
          {
            oprot.writeI32(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FuncDataTupleSchemeFactory implements SchemeFactory {
    public FuncDataTupleScheme getScheme() {
      return new FuncDataTupleScheme();
    }
  }

  private static class FuncDataTupleScheme extends TupleScheme<FuncData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FuncData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOper()) {
        optionals.set(1);
      }
      if (struct.isSetTarget()) {
        optionals.set(2);
      }
      if (struct.isSetParamStringList()) {
        optionals.set(3);
      }
      if (struct.isSetParamIntList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetOper()) {
        oprot.writeByte(struct.oper);
      }
      if (struct.isSetTarget()) {
        oprot.writeByte(struct.target);
      }
      if (struct.isSetParamStringList()) {
        {
          oprot.writeI32(struct.paramStringList.size());
          for (String _iter32 : struct.paramStringList)
          {
            oprot.writeString(_iter32);
          }
        }
      }
      if (struct.isSetParamIntList()) {
        {
          oprot.writeI32(struct.paramIntList.size());
          for (int _iter33 : struct.paramIntList)
          {
            oprot.writeI32(_iter33);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FuncData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.oper = iprot.readByte();
        struct.setOperIsSet(true);
      }
      if (incoming.get(2)) {
        struct.target = iprot.readByte();
        struct.setTargetIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.paramStringList = new ArrayList<String>(_list34.size);
          for (int _i35 = 0; _i35 < _list34.size; ++_i35)
          {
            String _elem36;
            _elem36 = iprot.readString();
            struct.paramStringList.add(_elem36);
          }
        }
        struct.setParamStringListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.paramIntList = new ArrayList<Integer>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            int _elem39;
            _elem39 = iprot.readI32();
            struct.paramIntList.add(_elem39);
          }
        }
        struct.setParamIntListIsSet(true);
      }
    }
  }

}

