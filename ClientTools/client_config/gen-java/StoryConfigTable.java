/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StoryConfigTable implements org.apache.thrift.TBase<StoryConfigTable, StoryConfigTable._Fields>, java.io.Serializable, Cloneable, Comparable<StoryConfigTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StoryConfigTable");

  private static final org.apache.thrift.protocol.TField STORY_CONFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("storyConfigMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StoryConfigTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StoryConfigTableTupleSchemeFactory());
  }

  public Map<Integer,List<StoryConfig>> storyConfigMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STORY_CONFIG_MAP((short)1, "storyConfigMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STORY_CONFIG_MAP
          return STORY_CONFIG_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STORY_CONFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("storyConfigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StoryConfig.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StoryConfigTable.class, metaDataMap);
  }

  public StoryConfigTable() {
  }

  public StoryConfigTable(
    Map<Integer,List<StoryConfig>> storyConfigMap)
  {
    this();
    this.storyConfigMap = storyConfigMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StoryConfigTable(StoryConfigTable other) {
    if (other.isSetStoryConfigMap()) {
      Map<Integer,List<StoryConfig>> __this__storyConfigMap = new HashMap<Integer,List<StoryConfig>>(other.storyConfigMap.size());
      for (Map.Entry<Integer, List<StoryConfig>> other_element : other.storyConfigMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<StoryConfig> other_element_value = other_element.getValue();

        Integer __this__storyConfigMap_copy_key = other_element_key;

        List<StoryConfig> __this__storyConfigMap_copy_value = new ArrayList<StoryConfig>(other_element_value.size());
        for (StoryConfig other_element_value_element : other_element_value) {
          __this__storyConfigMap_copy_value.add(new StoryConfig(other_element_value_element));
        }

        __this__storyConfigMap.put(__this__storyConfigMap_copy_key, __this__storyConfigMap_copy_value);
      }
      this.storyConfigMap = __this__storyConfigMap;
    }
  }

  public StoryConfigTable deepCopy() {
    return new StoryConfigTable(this);
  }

  @Override
  public void clear() {
    this.storyConfigMap = null;
  }

  public int getStoryConfigMapSize() {
    return (this.storyConfigMap == null) ? 0 : this.storyConfigMap.size();
  }

  public void putToStoryConfigMap(int key, List<StoryConfig> val) {
    if (this.storyConfigMap == null) {
      this.storyConfigMap = new HashMap<Integer,List<StoryConfig>>();
    }
    this.storyConfigMap.put(key, val);
  }

  public Map<Integer,List<StoryConfig>> getStoryConfigMap() {
    return this.storyConfigMap;
  }

  public StoryConfigTable setStoryConfigMap(Map<Integer,List<StoryConfig>> storyConfigMap) {
    this.storyConfigMap = storyConfigMap;
    return this;
  }

  public void unsetStoryConfigMap() {
    this.storyConfigMap = null;
  }

  /** Returns true if field storyConfigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStoryConfigMap() {
    return this.storyConfigMap != null;
  }

  public void setStoryConfigMapIsSet(boolean value) {
    if (!value) {
      this.storyConfigMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STORY_CONFIG_MAP:
      if (value == null) {
        unsetStoryConfigMap();
      } else {
        setStoryConfigMap((Map<Integer,List<StoryConfig>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STORY_CONFIG_MAP:
      return getStoryConfigMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STORY_CONFIG_MAP:
      return isSetStoryConfigMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StoryConfigTable)
      return this.equals((StoryConfigTable)that);
    return false;
  }

  public boolean equals(StoryConfigTable that) {
    if (that == null)
      return false;

    boolean this_present_storyConfigMap = true && this.isSetStoryConfigMap();
    boolean that_present_storyConfigMap = true && that.isSetStoryConfigMap();
    if (this_present_storyConfigMap || that_present_storyConfigMap) {
      if (!(this_present_storyConfigMap && that_present_storyConfigMap))
        return false;
      if (!this.storyConfigMap.equals(that.storyConfigMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StoryConfigTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStoryConfigMap()).compareTo(other.isSetStoryConfigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoryConfigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storyConfigMap, other.storyConfigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StoryConfigTable(");
    boolean first = true;

    sb.append("storyConfigMap:");
    if (this.storyConfigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.storyConfigMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StoryConfigTableStandardSchemeFactory implements SchemeFactory {
    public StoryConfigTableStandardScheme getScheme() {
      return new StoryConfigTableStandardScheme();
    }
  }

  private static class StoryConfigTableStandardScheme extends StandardScheme<StoryConfigTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StoryConfigTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STORY_CONFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map282 = iprot.readMapBegin();
                struct.storyConfigMap = new HashMap<Integer,List<StoryConfig>>(2*_map282.size);
                for (int _i283 = 0; _i283 < _map282.size; ++_i283)
                {
                  int _key284;
                  List<StoryConfig> _val285;
                  _key284 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list286 = iprot.readListBegin();
                    _val285 = new ArrayList<StoryConfig>(_list286.size);
                    for (int _i287 = 0; _i287 < _list286.size; ++_i287)
                    {
                      StoryConfig _elem288;
                      _elem288 = new StoryConfig();
                      _elem288.read(iprot);
                      _val285.add(_elem288);
                    }
                    iprot.readListEnd();
                  }
                  struct.storyConfigMap.put(_key284, _val285);
                }
                iprot.readMapEnd();
              }
              struct.setStoryConfigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StoryConfigTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.storyConfigMap != null) {
        oprot.writeFieldBegin(STORY_CONFIG_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.storyConfigMap.size()));
          for (Map.Entry<Integer, List<StoryConfig>> _iter289 : struct.storyConfigMap.entrySet())
          {
            oprot.writeI32(_iter289.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter289.getValue().size()));
              for (StoryConfig _iter290 : _iter289.getValue())
              {
                _iter290.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StoryConfigTableTupleSchemeFactory implements SchemeFactory {
    public StoryConfigTableTupleScheme getScheme() {
      return new StoryConfigTableTupleScheme();
    }
  }

  private static class StoryConfigTableTupleScheme extends TupleScheme<StoryConfigTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StoryConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStoryConfigMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetStoryConfigMap()) {
        {
          oprot.writeI32(struct.storyConfigMap.size());
          for (Map.Entry<Integer, List<StoryConfig>> _iter291 : struct.storyConfigMap.entrySet())
          {
            oprot.writeI32(_iter291.getKey());
            {
              oprot.writeI32(_iter291.getValue().size());
              for (StoryConfig _iter292 : _iter291.getValue())
              {
                _iter292.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StoryConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map293 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.storyConfigMap = new HashMap<Integer,List<StoryConfig>>(2*_map293.size);
          for (int _i294 = 0; _i294 < _map293.size; ++_i294)
          {
            int _key295;
            List<StoryConfig> _val296;
            _key295 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list297 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val296 = new ArrayList<StoryConfig>(_list297.size);
              for (int _i298 = 0; _i298 < _list297.size; ++_i298)
              {
                StoryConfig _elem299;
                _elem299 = new StoryConfig();
                _elem299.read(iprot);
                _val296.add(_elem299);
              }
            }
            struct.storyConfigMap.put(_key295, _val296);
          }
        }
        struct.setStoryConfigMapIsSet(true);
      }
    }
  }

}

