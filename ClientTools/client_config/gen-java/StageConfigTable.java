/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StageConfigTable implements org.apache.thrift.TBase<StageConfigTable, StageConfigTable._Fields>, java.io.Serializable, Cloneable, Comparable<StageConfigTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StageConfigTable");

  private static final org.apache.thrift.protocol.TField STAGE_CONFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stageConfigMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StageConfigTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StageConfigTableTupleSchemeFactory());
  }

  public Map<Integer,StageConfig> stageConfigMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STAGE_CONFIG_MAP((short)1, "stageConfigMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAGE_CONFIG_MAP
          return STAGE_CONFIG_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAGE_CONFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("stageConfigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StageConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StageConfigTable.class, metaDataMap);
  }

  public StageConfigTable() {
  }

  public StageConfigTable(
    Map<Integer,StageConfig> stageConfigMap)
  {
    this();
    this.stageConfigMap = stageConfigMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StageConfigTable(StageConfigTable other) {
    if (other.isSetStageConfigMap()) {
      Map<Integer,StageConfig> __this__stageConfigMap = new HashMap<Integer,StageConfig>(other.stageConfigMap.size());
      for (Map.Entry<Integer, StageConfig> other_element : other.stageConfigMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        StageConfig other_element_value = other_element.getValue();

        Integer __this__stageConfigMap_copy_key = other_element_key;

        StageConfig __this__stageConfigMap_copy_value = new StageConfig(other_element_value);

        __this__stageConfigMap.put(__this__stageConfigMap_copy_key, __this__stageConfigMap_copy_value);
      }
      this.stageConfigMap = __this__stageConfigMap;
    }
  }

  public StageConfigTable deepCopy() {
    return new StageConfigTable(this);
  }

  @Override
  public void clear() {
    this.stageConfigMap = null;
  }

  public int getStageConfigMapSize() {
    return (this.stageConfigMap == null) ? 0 : this.stageConfigMap.size();
  }

  public void putToStageConfigMap(int key, StageConfig val) {
    if (this.stageConfigMap == null) {
      this.stageConfigMap = new HashMap<Integer,StageConfig>();
    }
    this.stageConfigMap.put(key, val);
  }

  public Map<Integer,StageConfig> getStageConfigMap() {
    return this.stageConfigMap;
  }

  public StageConfigTable setStageConfigMap(Map<Integer,StageConfig> stageConfigMap) {
    this.stageConfigMap = stageConfigMap;
    return this;
  }

  public void unsetStageConfigMap() {
    this.stageConfigMap = null;
  }

  /** Returns true if field stageConfigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStageConfigMap() {
    return this.stageConfigMap != null;
  }

  public void setStageConfigMapIsSet(boolean value) {
    if (!value) {
      this.stageConfigMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STAGE_CONFIG_MAP:
      if (value == null) {
        unsetStageConfigMap();
      } else {
        setStageConfigMap((Map<Integer,StageConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STAGE_CONFIG_MAP:
      return getStageConfigMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STAGE_CONFIG_MAP:
      return isSetStageConfigMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StageConfigTable)
      return this.equals((StageConfigTable)that);
    return false;
  }

  public boolean equals(StageConfigTable that) {
    if (that == null)
      return false;

    boolean this_present_stageConfigMap = true && this.isSetStageConfigMap();
    boolean that_present_stageConfigMap = true && that.isSetStageConfigMap();
    if (this_present_stageConfigMap || that_present_stageConfigMap) {
      if (!(this_present_stageConfigMap && that_present_stageConfigMap))
        return false;
      if (!this.stageConfigMap.equals(that.stageConfigMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StageConfigTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStageConfigMap()).compareTo(other.isSetStageConfigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageConfigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageConfigMap, other.stageConfigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StageConfigTable(");
    boolean first = true;

    sb.append("stageConfigMap:");
    if (this.stageConfigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.stageConfigMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StageConfigTableStandardSchemeFactory implements SchemeFactory {
    public StageConfigTableStandardScheme getScheme() {
      return new StageConfigTableStandardScheme();
    }
  }

  private static class StageConfigTableStandardScheme extends StandardScheme<StageConfigTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StageConfigTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STAGE_CONFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                struct.stageConfigMap = new HashMap<Integer,StageConfig>(2*_map100.size);
                for (int _i101 = 0; _i101 < _map100.size; ++_i101)
                {
                  int _key102;
                  StageConfig _val103;
                  _key102 = iprot.readI32();
                  _val103 = new StageConfig();
                  _val103.read(iprot);
                  struct.stageConfigMap.put(_key102, _val103);
                }
                iprot.readMapEnd();
              }
              struct.setStageConfigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StageConfigTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stageConfigMap != null) {
        oprot.writeFieldBegin(STAGE_CONFIG_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.stageConfigMap.size()));
          for (Map.Entry<Integer, StageConfig> _iter104 : struct.stageConfigMap.entrySet())
          {
            oprot.writeI32(_iter104.getKey());
            _iter104.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StageConfigTableTupleSchemeFactory implements SchemeFactory {
    public StageConfigTableTupleScheme getScheme() {
      return new StageConfigTableTupleScheme();
    }
  }

  private static class StageConfigTableTupleScheme extends TupleScheme<StageConfigTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StageConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStageConfigMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetStageConfigMap()) {
        {
          oprot.writeI32(struct.stageConfigMap.size());
          for (Map.Entry<Integer, StageConfig> _iter105 : struct.stageConfigMap.entrySet())
          {
            oprot.writeI32(_iter105.getKey());
            _iter105.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StageConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stageConfigMap = new HashMap<Integer,StageConfig>(2*_map106.size);
          for (int _i107 = 0; _i107 < _map106.size; ++_i107)
          {
            int _key108;
            StageConfig _val109;
            _key108 = iprot.readI32();
            _val109 = new StageConfig();
            _val109.read(iprot);
            struct.stageConfigMap.put(_key108, _val109);
          }
        }
        struct.setStageConfigMapIsSet(true);
      }
    }
  }

}

