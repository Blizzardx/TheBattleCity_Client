/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MissionStepConfig implements org.apache.thrift.TBase<MissionStepConfig, MissionStepConfig._Fields>, java.io.Serializable, Cloneable, Comparable<MissionStepConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MissionStepConfig");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField SCENE_LIMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneLimitId", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField SCENE_FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneFuncId", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField COMPLETE_LIMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("completeLimitId", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField COMPLETE_FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("completeFuncId", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField GUIDE_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("guideMessageId", org.apache.thrift.protocol.TType.I32, (short)61);
  private static final org.apache.thrift.protocol.TField GUIDE_AUDIO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("guideAudioId", org.apache.thrift.protocol.TType.STRING, (short)62);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MissionStepConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MissionStepConfigTupleSchemeFactory());
  }

  public int id; // required
  public int missionId; // required
  public int sceneId; // required
  public int sceneLimitId; // required
  public int sceneFuncId; // required
  public int completeLimitId; // required
  public int completeFuncId; // required
  public int guideMessageId; // required
  public String guideAudioId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MISSION_ID((short)10, "missionId"),
    SCENE_ID((short)20, "sceneId"),
    SCENE_LIMIT_ID((short)30, "sceneLimitId"),
    SCENE_FUNC_ID((short)40, "sceneFuncId"),
    COMPLETE_LIMIT_ID((short)50, "completeLimitId"),
    COMPLETE_FUNC_ID((short)60, "completeFuncId"),
    GUIDE_MESSAGE_ID((short)61, "guideMessageId"),
    GUIDE_AUDIO_ID((short)62, "guideAudioId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 10: // MISSION_ID
          return MISSION_ID;
        case 20: // SCENE_ID
          return SCENE_ID;
        case 30: // SCENE_LIMIT_ID
          return SCENE_LIMIT_ID;
        case 40: // SCENE_FUNC_ID
          return SCENE_FUNC_ID;
        case 50: // COMPLETE_LIMIT_ID
          return COMPLETE_LIMIT_ID;
        case 60: // COMPLETE_FUNC_ID
          return COMPLETE_FUNC_ID;
        case 61: // GUIDE_MESSAGE_ID
          return GUIDE_MESSAGE_ID;
        case 62: // GUIDE_AUDIO_ID
          return GUIDE_AUDIO_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MISSIONID_ISSET_ID = 1;
  private static final int __SCENEID_ISSET_ID = 2;
  private static final int __SCENELIMITID_ISSET_ID = 3;
  private static final int __SCENEFUNCID_ISSET_ID = 4;
  private static final int __COMPLETELIMITID_ISSET_ID = 5;
  private static final int __COMPLETEFUNCID_ISSET_ID = 6;
  private static final int __GUIDEMESSAGEID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCENE_LIMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneLimitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCENE_FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneFuncId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPLETE_LIMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("completeLimitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPLETE_FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("completeFuncId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUIDE_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("guideMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUIDE_AUDIO_ID, new org.apache.thrift.meta_data.FieldMetaData("guideAudioId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MissionStepConfig.class, metaDataMap);
  }

  public MissionStepConfig() {
  }

  public MissionStepConfig(
    int id,
    int missionId,
    int sceneId,
    int sceneLimitId,
    int sceneFuncId,
    int completeLimitId,
    int completeFuncId,
    int guideMessageId,
    String guideAudioId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.missionId = missionId;
    setMissionIdIsSet(true);
    this.sceneId = sceneId;
    setSceneIdIsSet(true);
    this.sceneLimitId = sceneLimitId;
    setSceneLimitIdIsSet(true);
    this.sceneFuncId = sceneFuncId;
    setSceneFuncIdIsSet(true);
    this.completeLimitId = completeLimitId;
    setCompleteLimitIdIsSet(true);
    this.completeFuncId = completeFuncId;
    setCompleteFuncIdIsSet(true);
    this.guideMessageId = guideMessageId;
    setGuideMessageIdIsSet(true);
    this.guideAudioId = guideAudioId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MissionStepConfig(MissionStepConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.missionId = other.missionId;
    this.sceneId = other.sceneId;
    this.sceneLimitId = other.sceneLimitId;
    this.sceneFuncId = other.sceneFuncId;
    this.completeLimitId = other.completeLimitId;
    this.completeFuncId = other.completeFuncId;
    this.guideMessageId = other.guideMessageId;
    if (other.isSetGuideAudioId()) {
      this.guideAudioId = other.guideAudioId;
    }
  }

  public MissionStepConfig deepCopy() {
    return new MissionStepConfig(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setMissionIdIsSet(false);
    this.missionId = 0;
    setSceneIdIsSet(false);
    this.sceneId = 0;
    setSceneLimitIdIsSet(false);
    this.sceneLimitId = 0;
    setSceneFuncIdIsSet(false);
    this.sceneFuncId = 0;
    setCompleteLimitIdIsSet(false);
    this.completeLimitId = 0;
    setCompleteFuncIdIsSet(false);
    this.completeFuncId = 0;
    setGuideMessageIdIsSet(false);
    this.guideMessageId = 0;
    this.guideAudioId = null;
  }

  public int getId() {
    return this.id;
  }

  public MissionStepConfig setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getMissionId() {
    return this.missionId;
  }

  public MissionStepConfig setMissionId(int missionId) {
    this.missionId = missionId;
    setMissionIdIsSet(true);
    return this;
  }

  public void unsetMissionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
  public boolean isSetMissionId() {
    return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  public void setMissionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
  }

  public int getSceneId() {
    return this.sceneId;
  }

  public MissionStepConfig setSceneId(int sceneId) {
    this.sceneId = sceneId;
    setSceneIdIsSet(true);
    return this;
  }

  public void unsetSceneId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCENEID_ISSET_ID);
  }

  /** Returns true if field sceneId is set (has been assigned a value) and false otherwise */
  public boolean isSetSceneId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCENEID_ISSET_ID);
  }

  public void setSceneIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCENEID_ISSET_ID, value);
  }

  public int getSceneLimitId() {
    return this.sceneLimitId;
  }

  public MissionStepConfig setSceneLimitId(int sceneLimitId) {
    this.sceneLimitId = sceneLimitId;
    setSceneLimitIdIsSet(true);
    return this;
  }

  public void unsetSceneLimitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCENELIMITID_ISSET_ID);
  }

  /** Returns true if field sceneLimitId is set (has been assigned a value) and false otherwise */
  public boolean isSetSceneLimitId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCENELIMITID_ISSET_ID);
  }

  public void setSceneLimitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCENELIMITID_ISSET_ID, value);
  }

  public int getSceneFuncId() {
    return this.sceneFuncId;
  }

  public MissionStepConfig setSceneFuncId(int sceneFuncId) {
    this.sceneFuncId = sceneFuncId;
    setSceneFuncIdIsSet(true);
    return this;
  }

  public void unsetSceneFuncId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCENEFUNCID_ISSET_ID);
  }

  /** Returns true if field sceneFuncId is set (has been assigned a value) and false otherwise */
  public boolean isSetSceneFuncId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCENEFUNCID_ISSET_ID);
  }

  public void setSceneFuncIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCENEFUNCID_ISSET_ID, value);
  }

  public int getCompleteLimitId() {
    return this.completeLimitId;
  }

  public MissionStepConfig setCompleteLimitId(int completeLimitId) {
    this.completeLimitId = completeLimitId;
    setCompleteLimitIdIsSet(true);
    return this;
  }

  public void unsetCompleteLimitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETELIMITID_ISSET_ID);
  }

  /** Returns true if field completeLimitId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteLimitId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETELIMITID_ISSET_ID);
  }

  public void setCompleteLimitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETELIMITID_ISSET_ID, value);
  }

  public int getCompleteFuncId() {
    return this.completeFuncId;
  }

  public MissionStepConfig setCompleteFuncId(int completeFuncId) {
    this.completeFuncId = completeFuncId;
    setCompleteFuncIdIsSet(true);
    return this;
  }

  public void unsetCompleteFuncId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEFUNCID_ISSET_ID);
  }

  /** Returns true if field completeFuncId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteFuncId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEFUNCID_ISSET_ID);
  }

  public void setCompleteFuncIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEFUNCID_ISSET_ID, value);
  }

  public int getGuideMessageId() {
    return this.guideMessageId;
  }

  public MissionStepConfig setGuideMessageId(int guideMessageId) {
    this.guideMessageId = guideMessageId;
    setGuideMessageIdIsSet(true);
    return this;
  }

  public void unsetGuideMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUIDEMESSAGEID_ISSET_ID);
  }

  /** Returns true if field guideMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetGuideMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __GUIDEMESSAGEID_ISSET_ID);
  }

  public void setGuideMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUIDEMESSAGEID_ISSET_ID, value);
  }

  public String getGuideAudioId() {
    return this.guideAudioId;
  }

  public MissionStepConfig setGuideAudioId(String guideAudioId) {
    this.guideAudioId = guideAudioId;
    return this;
  }

  public void unsetGuideAudioId() {
    this.guideAudioId = null;
  }

  /** Returns true if field guideAudioId is set (has been assigned a value) and false otherwise */
  public boolean isSetGuideAudioId() {
    return this.guideAudioId != null;
  }

  public void setGuideAudioIdIsSet(boolean value) {
    if (!value) {
      this.guideAudioId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case MISSION_ID:
      if (value == null) {
        unsetMissionId();
      } else {
        setMissionId((Integer)value);
      }
      break;

    case SCENE_ID:
      if (value == null) {
        unsetSceneId();
      } else {
        setSceneId((Integer)value);
      }
      break;

    case SCENE_LIMIT_ID:
      if (value == null) {
        unsetSceneLimitId();
      } else {
        setSceneLimitId((Integer)value);
      }
      break;

    case SCENE_FUNC_ID:
      if (value == null) {
        unsetSceneFuncId();
      } else {
        setSceneFuncId((Integer)value);
      }
      break;

    case COMPLETE_LIMIT_ID:
      if (value == null) {
        unsetCompleteLimitId();
      } else {
        setCompleteLimitId((Integer)value);
      }
      break;

    case COMPLETE_FUNC_ID:
      if (value == null) {
        unsetCompleteFuncId();
      } else {
        setCompleteFuncId((Integer)value);
      }
      break;

    case GUIDE_MESSAGE_ID:
      if (value == null) {
        unsetGuideMessageId();
      } else {
        setGuideMessageId((Integer)value);
      }
      break;

    case GUIDE_AUDIO_ID:
      if (value == null) {
        unsetGuideAudioId();
      } else {
        setGuideAudioId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case MISSION_ID:
      return Integer.valueOf(getMissionId());

    case SCENE_ID:
      return Integer.valueOf(getSceneId());

    case SCENE_LIMIT_ID:
      return Integer.valueOf(getSceneLimitId());

    case SCENE_FUNC_ID:
      return Integer.valueOf(getSceneFuncId());

    case COMPLETE_LIMIT_ID:
      return Integer.valueOf(getCompleteLimitId());

    case COMPLETE_FUNC_ID:
      return Integer.valueOf(getCompleteFuncId());

    case GUIDE_MESSAGE_ID:
      return Integer.valueOf(getGuideMessageId());

    case GUIDE_AUDIO_ID:
      return getGuideAudioId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MISSION_ID:
      return isSetMissionId();
    case SCENE_ID:
      return isSetSceneId();
    case SCENE_LIMIT_ID:
      return isSetSceneLimitId();
    case SCENE_FUNC_ID:
      return isSetSceneFuncId();
    case COMPLETE_LIMIT_ID:
      return isSetCompleteLimitId();
    case COMPLETE_FUNC_ID:
      return isSetCompleteFuncId();
    case GUIDE_MESSAGE_ID:
      return isSetGuideMessageId();
    case GUIDE_AUDIO_ID:
      return isSetGuideAudioId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MissionStepConfig)
      return this.equals((MissionStepConfig)that);
    return false;
  }

  public boolean equals(MissionStepConfig that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_missionId = true;
    boolean that_present_missionId = true;
    if (this_present_missionId || that_present_missionId) {
      if (!(this_present_missionId && that_present_missionId))
        return false;
      if (this.missionId != that.missionId)
        return false;
    }

    boolean this_present_sceneId = true;
    boolean that_present_sceneId = true;
    if (this_present_sceneId || that_present_sceneId) {
      if (!(this_present_sceneId && that_present_sceneId))
        return false;
      if (this.sceneId != that.sceneId)
        return false;
    }

    boolean this_present_sceneLimitId = true;
    boolean that_present_sceneLimitId = true;
    if (this_present_sceneLimitId || that_present_sceneLimitId) {
      if (!(this_present_sceneLimitId && that_present_sceneLimitId))
        return false;
      if (this.sceneLimitId != that.sceneLimitId)
        return false;
    }

    boolean this_present_sceneFuncId = true;
    boolean that_present_sceneFuncId = true;
    if (this_present_sceneFuncId || that_present_sceneFuncId) {
      if (!(this_present_sceneFuncId && that_present_sceneFuncId))
        return false;
      if (this.sceneFuncId != that.sceneFuncId)
        return false;
    }

    boolean this_present_completeLimitId = true;
    boolean that_present_completeLimitId = true;
    if (this_present_completeLimitId || that_present_completeLimitId) {
      if (!(this_present_completeLimitId && that_present_completeLimitId))
        return false;
      if (this.completeLimitId != that.completeLimitId)
        return false;
    }

    boolean this_present_completeFuncId = true;
    boolean that_present_completeFuncId = true;
    if (this_present_completeFuncId || that_present_completeFuncId) {
      if (!(this_present_completeFuncId && that_present_completeFuncId))
        return false;
      if (this.completeFuncId != that.completeFuncId)
        return false;
    }

    boolean this_present_guideMessageId = true;
    boolean that_present_guideMessageId = true;
    if (this_present_guideMessageId || that_present_guideMessageId) {
      if (!(this_present_guideMessageId && that_present_guideMessageId))
        return false;
      if (this.guideMessageId != that.guideMessageId)
        return false;
    }

    boolean this_present_guideAudioId = true && this.isSetGuideAudioId();
    boolean that_present_guideAudioId = true && that.isSetGuideAudioId();
    if (this_present_guideAudioId || that_present_guideAudioId) {
      if (!(this_present_guideAudioId && that_present_guideAudioId))
        return false;
      if (!this.guideAudioId.equals(that.guideAudioId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MissionStepConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSceneId()).compareTo(other.isSetSceneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSceneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneId, other.sceneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSceneLimitId()).compareTo(other.isSetSceneLimitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSceneLimitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneLimitId, other.sceneLimitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSceneFuncId()).compareTo(other.isSetSceneFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSceneFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneFuncId, other.sceneFuncId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteLimitId()).compareTo(other.isSetCompleteLimitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteLimitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeLimitId, other.completeLimitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteFuncId()).compareTo(other.isSetCompleteFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeFuncId, other.completeFuncId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuideMessageId()).compareTo(other.isSetGuideMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuideMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guideMessageId, other.guideMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuideAudioId()).compareTo(other.isSetGuideAudioId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuideAudioId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guideAudioId, other.guideAudioId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MissionStepConfig(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("missionId:");
    sb.append(this.missionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sceneId:");
    sb.append(this.sceneId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sceneLimitId:");
    sb.append(this.sceneLimitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sceneFuncId:");
    sb.append(this.sceneFuncId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeLimitId:");
    sb.append(this.completeLimitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeFuncId:");
    sb.append(this.completeFuncId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guideMessageId:");
    sb.append(this.guideMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guideAudioId:");
    if (this.guideAudioId == null) {
      sb.append("null");
    } else {
      sb.append(this.guideAudioId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MissionStepConfigStandardSchemeFactory implements SchemeFactory {
    public MissionStepConfigStandardScheme getScheme() {
      return new MissionStepConfigStandardScheme();
    }
  }

  private static class MissionStepConfigStandardScheme extends StandardScheme<MissionStepConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MissionStepConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MISSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.missionId = iprot.readI32();
              struct.setMissionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SCENE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sceneId = iprot.readI32();
              struct.setSceneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SCENE_LIMIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sceneLimitId = iprot.readI32();
              struct.setSceneLimitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // SCENE_FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sceneFuncId = iprot.readI32();
              struct.setSceneFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // COMPLETE_LIMIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.completeLimitId = iprot.readI32();
              struct.setCompleteLimitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // COMPLETE_FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.completeFuncId = iprot.readI32();
              struct.setCompleteFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // GUIDE_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guideMessageId = iprot.readI32();
              struct.setGuideMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // GUIDE_AUDIO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guideAudioId = iprot.readString();
              struct.setGuideAudioIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MissionStepConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
      oprot.writeI32(struct.missionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCENE_ID_FIELD_DESC);
      oprot.writeI32(struct.sceneId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCENE_LIMIT_ID_FIELD_DESC);
      oprot.writeI32(struct.sceneLimitId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCENE_FUNC_ID_FIELD_DESC);
      oprot.writeI32(struct.sceneFuncId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETE_LIMIT_ID_FIELD_DESC);
      oprot.writeI32(struct.completeLimitId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETE_FUNC_ID_FIELD_DESC);
      oprot.writeI32(struct.completeFuncId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUIDE_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.guideMessageId);
      oprot.writeFieldEnd();
      if (struct.guideAudioId != null) {
        oprot.writeFieldBegin(GUIDE_AUDIO_ID_FIELD_DESC);
        oprot.writeString(struct.guideAudioId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MissionStepConfigTupleSchemeFactory implements SchemeFactory {
    public MissionStepConfigTupleScheme getScheme() {
      return new MissionStepConfigTupleScheme();
    }
  }

  private static class MissionStepConfigTupleScheme extends TupleScheme<MissionStepConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MissionStepConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMissionId()) {
        optionals.set(1);
      }
      if (struct.isSetSceneId()) {
        optionals.set(2);
      }
      if (struct.isSetSceneLimitId()) {
        optionals.set(3);
      }
      if (struct.isSetSceneFuncId()) {
        optionals.set(4);
      }
      if (struct.isSetCompleteLimitId()) {
        optionals.set(5);
      }
      if (struct.isSetCompleteFuncId()) {
        optionals.set(6);
      }
      if (struct.isSetGuideMessageId()) {
        optionals.set(7);
      }
      if (struct.isSetGuideAudioId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetMissionId()) {
        oprot.writeI32(struct.missionId);
      }
      if (struct.isSetSceneId()) {
        oprot.writeI32(struct.sceneId);
      }
      if (struct.isSetSceneLimitId()) {
        oprot.writeI32(struct.sceneLimitId);
      }
      if (struct.isSetSceneFuncId()) {
        oprot.writeI32(struct.sceneFuncId);
      }
      if (struct.isSetCompleteLimitId()) {
        oprot.writeI32(struct.completeLimitId);
      }
      if (struct.isSetCompleteFuncId()) {
        oprot.writeI32(struct.completeFuncId);
      }
      if (struct.isSetGuideMessageId()) {
        oprot.writeI32(struct.guideMessageId);
      }
      if (struct.isSetGuideAudioId()) {
        oprot.writeString(struct.guideAudioId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MissionStepConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.missionId = iprot.readI32();
        struct.setMissionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sceneId = iprot.readI32();
        struct.setSceneIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sceneLimitId = iprot.readI32();
        struct.setSceneLimitIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sceneFuncId = iprot.readI32();
        struct.setSceneFuncIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.completeLimitId = iprot.readI32();
        struct.setCompleteLimitIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.completeFuncId = iprot.readI32();
        struct.setCompleteFuncIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.guideMessageId = iprot.readI32();
        struct.setGuideMessageIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.guideAudioId = iprot.readString();
        struct.setGuideAudioIdIsSet(true);
      }
    }
  }

}

