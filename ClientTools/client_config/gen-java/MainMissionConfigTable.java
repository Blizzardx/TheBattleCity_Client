/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MainMissionConfigTable implements org.apache.thrift.TBase<MainMissionConfigTable, MainMissionConfigTable._Fields>, java.io.Serializable, Cloneable, Comparable<MainMissionConfigTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MainMissionConfigTable");

  private static final org.apache.thrift.protocol.TField MAIN_MISSION_CONFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mainMissionConfigMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MainMissionConfigTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MainMissionConfigTableTupleSchemeFactory());
  }

  public Map<Integer,MainMissionConfig> mainMissionConfigMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAIN_MISSION_CONFIG_MAP((short)1, "mainMissionConfigMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAIN_MISSION_CONFIG_MAP
          return MAIN_MISSION_CONFIG_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAIN_MISSION_CONFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("mainMissionConfigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MainMissionConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MainMissionConfigTable.class, metaDataMap);
  }

  public MainMissionConfigTable() {
  }

  public MainMissionConfigTable(
    Map<Integer,MainMissionConfig> mainMissionConfigMap)
  {
    this();
    this.mainMissionConfigMap = mainMissionConfigMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MainMissionConfigTable(MainMissionConfigTable other) {
    if (other.isSetMainMissionConfigMap()) {
      Map<Integer,MainMissionConfig> __this__mainMissionConfigMap = new HashMap<Integer,MainMissionConfig>(other.mainMissionConfigMap.size());
      for (Map.Entry<Integer, MainMissionConfig> other_element : other.mainMissionConfigMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        MainMissionConfig other_element_value = other_element.getValue();

        Integer __this__mainMissionConfigMap_copy_key = other_element_key;

        MainMissionConfig __this__mainMissionConfigMap_copy_value = new MainMissionConfig(other_element_value);

        __this__mainMissionConfigMap.put(__this__mainMissionConfigMap_copy_key, __this__mainMissionConfigMap_copy_value);
      }
      this.mainMissionConfigMap = __this__mainMissionConfigMap;
    }
  }

  public MainMissionConfigTable deepCopy() {
    return new MainMissionConfigTable(this);
  }

  @Override
  public void clear() {
    this.mainMissionConfigMap = null;
  }

  public int getMainMissionConfigMapSize() {
    return (this.mainMissionConfigMap == null) ? 0 : this.mainMissionConfigMap.size();
  }

  public void putToMainMissionConfigMap(int key, MainMissionConfig val) {
    if (this.mainMissionConfigMap == null) {
      this.mainMissionConfigMap = new HashMap<Integer,MainMissionConfig>();
    }
    this.mainMissionConfigMap.put(key, val);
  }

  public Map<Integer,MainMissionConfig> getMainMissionConfigMap() {
    return this.mainMissionConfigMap;
  }

  public MainMissionConfigTable setMainMissionConfigMap(Map<Integer,MainMissionConfig> mainMissionConfigMap) {
    this.mainMissionConfigMap = mainMissionConfigMap;
    return this;
  }

  public void unsetMainMissionConfigMap() {
    this.mainMissionConfigMap = null;
  }

  /** Returns true if field mainMissionConfigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMainMissionConfigMap() {
    return this.mainMissionConfigMap != null;
  }

  public void setMainMissionConfigMapIsSet(boolean value) {
    if (!value) {
      this.mainMissionConfigMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAIN_MISSION_CONFIG_MAP:
      if (value == null) {
        unsetMainMissionConfigMap();
      } else {
        setMainMissionConfigMap((Map<Integer,MainMissionConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAIN_MISSION_CONFIG_MAP:
      return getMainMissionConfigMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAIN_MISSION_CONFIG_MAP:
      return isSetMainMissionConfigMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MainMissionConfigTable)
      return this.equals((MainMissionConfigTable)that);
    return false;
  }

  public boolean equals(MainMissionConfigTable that) {
    if (that == null)
      return false;

    boolean this_present_mainMissionConfigMap = true && this.isSetMainMissionConfigMap();
    boolean that_present_mainMissionConfigMap = true && that.isSetMainMissionConfigMap();
    if (this_present_mainMissionConfigMap || that_present_mainMissionConfigMap) {
      if (!(this_present_mainMissionConfigMap && that_present_mainMissionConfigMap))
        return false;
      if (!this.mainMissionConfigMap.equals(that.mainMissionConfigMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MainMissionConfigTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMainMissionConfigMap()).compareTo(other.isSetMainMissionConfigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainMissionConfigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainMissionConfigMap, other.mainMissionConfigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MainMissionConfigTable(");
    boolean first = true;

    sb.append("mainMissionConfigMap:");
    if (this.mainMissionConfigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.mainMissionConfigMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MainMissionConfigTableStandardSchemeFactory implements SchemeFactory {
    public MainMissionConfigTableStandardScheme getScheme() {
      return new MainMissionConfigTableStandardScheme();
    }
  }

  private static class MainMissionConfigTableStandardScheme extends StandardScheme<MainMissionConfigTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MainMissionConfigTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAIN_MISSION_CONFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin();
                struct.mainMissionConfigMap = new HashMap<Integer,MainMissionConfig>(2*_map90.size);
                for (int _i91 = 0; _i91 < _map90.size; ++_i91)
                {
                  int _key92;
                  MainMissionConfig _val93;
                  _key92 = iprot.readI32();
                  _val93 = new MainMissionConfig();
                  _val93.read(iprot);
                  struct.mainMissionConfigMap.put(_key92, _val93);
                }
                iprot.readMapEnd();
              }
              struct.setMainMissionConfigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MainMissionConfigTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mainMissionConfigMap != null) {
        oprot.writeFieldBegin(MAIN_MISSION_CONFIG_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.mainMissionConfigMap.size()));
          for (Map.Entry<Integer, MainMissionConfig> _iter94 : struct.mainMissionConfigMap.entrySet())
          {
            oprot.writeI32(_iter94.getKey());
            _iter94.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MainMissionConfigTableTupleSchemeFactory implements SchemeFactory {
    public MainMissionConfigTableTupleScheme getScheme() {
      return new MainMissionConfigTableTupleScheme();
    }
  }

  private static class MainMissionConfigTableTupleScheme extends TupleScheme<MainMissionConfigTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MainMissionConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMainMissionConfigMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMainMissionConfigMap()) {
        {
          oprot.writeI32(struct.mainMissionConfigMap.size());
          for (Map.Entry<Integer, MainMissionConfig> _iter95 : struct.mainMissionConfigMap.entrySet())
          {
            oprot.writeI32(_iter95.getKey());
            _iter95.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MainMissionConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mainMissionConfigMap = new HashMap<Integer,MainMissionConfig>(2*_map96.size);
          for (int _i97 = 0; _i97 < _map96.size; ++_i97)
          {
            int _key98;
            MainMissionConfig _val99;
            _key98 = iprot.readI32();
            _val99 = new MainMissionConfig();
            _val99.read(iprot);
            struct.mainMissionConfigMap.put(_key98, _val99);
          }
        }
        struct.setMainMissionConfigMapIsSet(true);
      }
    }
  }

}

