/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DialogConfigTable implements org.apache.thrift.TBase<DialogConfigTable, DialogConfigTable._Fields>, java.io.Serializable, Cloneable, Comparable<DialogConfigTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DialogConfigTable");

  private static final org.apache.thrift.protocol.TField DIALOG_CONFIG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogConfigMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DialogConfigTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DialogConfigTableTupleSchemeFactory());
  }

  public Map<Integer,DialogConfig> dialogConfigMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIALOG_CONFIG_MAP((short)1, "dialogConfigMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIALOG_CONFIG_MAP
          return DIALOG_CONFIG_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIALOG_CONFIG_MAP, new org.apache.thrift.meta_data.FieldMetaData("dialogConfigMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DialogConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DialogConfigTable.class, metaDataMap);
  }

  public DialogConfigTable() {
  }

  public DialogConfigTable(
    Map<Integer,DialogConfig> dialogConfigMap)
  {
    this();
    this.dialogConfigMap = dialogConfigMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DialogConfigTable(DialogConfigTable other) {
    if (other.isSetDialogConfigMap()) {
      Map<Integer,DialogConfig> __this__dialogConfigMap = new HashMap<Integer,DialogConfig>(other.dialogConfigMap.size());
      for (Map.Entry<Integer, DialogConfig> other_element : other.dialogConfigMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        DialogConfig other_element_value = other_element.getValue();

        Integer __this__dialogConfigMap_copy_key = other_element_key;

        DialogConfig __this__dialogConfigMap_copy_value = new DialogConfig(other_element_value);

        __this__dialogConfigMap.put(__this__dialogConfigMap_copy_key, __this__dialogConfigMap_copy_value);
      }
      this.dialogConfigMap = __this__dialogConfigMap;
    }
  }

  public DialogConfigTable deepCopy() {
    return new DialogConfigTable(this);
  }

  @Override
  public void clear() {
    this.dialogConfigMap = null;
  }

  public int getDialogConfigMapSize() {
    return (this.dialogConfigMap == null) ? 0 : this.dialogConfigMap.size();
  }

  public void putToDialogConfigMap(int key, DialogConfig val) {
    if (this.dialogConfigMap == null) {
      this.dialogConfigMap = new HashMap<Integer,DialogConfig>();
    }
    this.dialogConfigMap.put(key, val);
  }

  public Map<Integer,DialogConfig> getDialogConfigMap() {
    return this.dialogConfigMap;
  }

  public DialogConfigTable setDialogConfigMap(Map<Integer,DialogConfig> dialogConfigMap) {
    this.dialogConfigMap = dialogConfigMap;
    return this;
  }

  public void unsetDialogConfigMap() {
    this.dialogConfigMap = null;
  }

  /** Returns true if field dialogConfigMap is set (has been assigned a value) and false otherwise */
  public boolean isSetDialogConfigMap() {
    return this.dialogConfigMap != null;
  }

  public void setDialogConfigMapIsSet(boolean value) {
    if (!value) {
      this.dialogConfigMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIALOG_CONFIG_MAP:
      if (value == null) {
        unsetDialogConfigMap();
      } else {
        setDialogConfigMap((Map<Integer,DialogConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIALOG_CONFIG_MAP:
      return getDialogConfigMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIALOG_CONFIG_MAP:
      return isSetDialogConfigMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DialogConfigTable)
      return this.equals((DialogConfigTable)that);
    return false;
  }

  public boolean equals(DialogConfigTable that) {
    if (that == null)
      return false;

    boolean this_present_dialogConfigMap = true && this.isSetDialogConfigMap();
    boolean that_present_dialogConfigMap = true && that.isSetDialogConfigMap();
    if (this_present_dialogConfigMap || that_present_dialogConfigMap) {
      if (!(this_present_dialogConfigMap && that_present_dialogConfigMap))
        return false;
      if (!this.dialogConfigMap.equals(that.dialogConfigMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DialogConfigTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDialogConfigMap()).compareTo(other.isSetDialogConfigMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDialogConfigMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogConfigMap, other.dialogConfigMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DialogConfigTable(");
    boolean first = true;

    sb.append("dialogConfigMap:");
    if (this.dialogConfigMap == null) {
      sb.append("null");
    } else {
      sb.append(this.dialogConfigMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DialogConfigTableStandardSchemeFactory implements SchemeFactory {
    public DialogConfigTableStandardScheme getScheme() {
      return new DialogConfigTableStandardScheme();
    }
  }

  private static class DialogConfigTableStandardScheme extends StandardScheme<DialogConfigTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DialogConfigTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIALOG_CONFIG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin();
                struct.dialogConfigMap = new HashMap<Integer,DialogConfig>(2*_map80.size);
                for (int _i81 = 0; _i81 < _map80.size; ++_i81)
                {
                  int _key82;
                  DialogConfig _val83;
                  _key82 = iprot.readI32();
                  _val83 = new DialogConfig();
                  _val83.read(iprot);
                  struct.dialogConfigMap.put(_key82, _val83);
                }
                iprot.readMapEnd();
              }
              struct.setDialogConfigMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DialogConfigTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dialogConfigMap != null) {
        oprot.writeFieldBegin(DIALOG_CONFIG_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.dialogConfigMap.size()));
          for (Map.Entry<Integer, DialogConfig> _iter84 : struct.dialogConfigMap.entrySet())
          {
            oprot.writeI32(_iter84.getKey());
            _iter84.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DialogConfigTableTupleSchemeFactory implements SchemeFactory {
    public DialogConfigTableTupleScheme getScheme() {
      return new DialogConfigTableTupleScheme();
    }
  }

  private static class DialogConfigTableTupleScheme extends TupleScheme<DialogConfigTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DialogConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDialogConfigMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDialogConfigMap()) {
        {
          oprot.writeI32(struct.dialogConfigMap.size());
          for (Map.Entry<Integer, DialogConfig> _iter85 : struct.dialogConfigMap.entrySet())
          {
            oprot.writeI32(_iter85.getKey());
            _iter85.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DialogConfigTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map86 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dialogConfigMap = new HashMap<Integer,DialogConfig>(2*_map86.size);
          for (int _i87 = 0; _i87 < _map86.size; ++_i87)
          {
            int _key88;
            DialogConfig _val89;
            _key88 = iprot.readI32();
            _val89 = new DialogConfig();
            _val89.read(iprot);
            struct.dialogConfigMap.put(_key88, _val89);
          }
        }
        struct.setDialogConfigMapIsSet(true);
      }
    }
  }

}

