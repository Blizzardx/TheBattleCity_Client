/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CharactorConfig implements org.apache.thrift.TBase<CharactorConfig, CharactorConfig._Fields>, java.io.Serializable, Cloneable, Comparable<CharactorConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CharactorConfig");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nameMsgId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MODEL_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("ModelResource", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CharactorConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CharactorConfigTupleSchemeFactory());
  }

  public int id; // required
  public int nameMsgId; // required
  public int sex; // required
  public String ModelResource; // required
  public int age; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME_MSG_ID((short)2, "nameMsgId"),
    SEX((short)3, "sex"),
    MODEL_RESOURCE((short)4, "ModelResource"),
    AGE((short)5, "age");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME_MSG_ID
          return NAME_MSG_ID;
        case 3: // SEX
          return SEX;
        case 4: // MODEL_RESOURCE
          return MODEL_RESOURCE;
        case 5: // AGE
          return AGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NAMEMSGID_ISSET_ID = 1;
  private static final int __SEX_ISSET_ID = 2;
  private static final int __AGE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("nameMsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODEL_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("ModelResource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CharactorConfig.class, metaDataMap);
  }

  public CharactorConfig() {
  }

  public CharactorConfig(
    int id,
    int nameMsgId,
    int sex,
    String ModelResource,
    int age)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.nameMsgId = nameMsgId;
    setNameMsgIdIsSet(true);
    this.sex = sex;
    setSexIsSet(true);
    this.ModelResource = ModelResource;
    this.age = age;
    setAgeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CharactorConfig(CharactorConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.nameMsgId = other.nameMsgId;
    this.sex = other.sex;
    if (other.isSetModelResource()) {
      this.ModelResource = other.ModelResource;
    }
    this.age = other.age;
  }

  public CharactorConfig deepCopy() {
    return new CharactorConfig(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setNameMsgIdIsSet(false);
    this.nameMsgId = 0;
    setSexIsSet(false);
    this.sex = 0;
    this.ModelResource = null;
    setAgeIsSet(false);
    this.age = 0;
  }

  public int getId() {
    return this.id;
  }

  public CharactorConfig setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getNameMsgId() {
    return this.nameMsgId;
  }

  public CharactorConfig setNameMsgId(int nameMsgId) {
    this.nameMsgId = nameMsgId;
    setNameMsgIdIsSet(true);
    return this;
  }

  public void unsetNameMsgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAMEMSGID_ISSET_ID);
  }

  /** Returns true if field nameMsgId is set (has been assigned a value) and false otherwise */
  public boolean isSetNameMsgId() {
    return EncodingUtils.testBit(__isset_bitfield, __NAMEMSGID_ISSET_ID);
  }

  public void setNameMsgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAMEMSGID_ISSET_ID, value);
  }

  public int getSex() {
    return this.sex;
  }

  public CharactorConfig setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getModelResource() {
    return this.ModelResource;
  }

  public CharactorConfig setModelResource(String ModelResource) {
    this.ModelResource = ModelResource;
    return this;
  }

  public void unsetModelResource() {
    this.ModelResource = null;
  }

  /** Returns true if field ModelResource is set (has been assigned a value) and false otherwise */
  public boolean isSetModelResource() {
    return this.ModelResource != null;
  }

  public void setModelResourceIsSet(boolean value) {
    if (!value) {
      this.ModelResource = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public CharactorConfig setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME_MSG_ID:
      if (value == null) {
        unsetNameMsgId();
      } else {
        setNameMsgId((Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case MODEL_RESOURCE:
      if (value == null) {
        unsetModelResource();
      } else {
        setModelResource((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME_MSG_ID:
      return Integer.valueOf(getNameMsgId());

    case SEX:
      return Integer.valueOf(getSex());

    case MODEL_RESOURCE:
      return getModelResource();

    case AGE:
      return Integer.valueOf(getAge());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME_MSG_ID:
      return isSetNameMsgId();
    case SEX:
      return isSetSex();
    case MODEL_RESOURCE:
      return isSetModelResource();
    case AGE:
      return isSetAge();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CharactorConfig)
      return this.equals((CharactorConfig)that);
    return false;
  }

  public boolean equals(CharactorConfig that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nameMsgId = true;
    boolean that_present_nameMsgId = true;
    if (this_present_nameMsgId || that_present_nameMsgId) {
      if (!(this_present_nameMsgId && that_present_nameMsgId))
        return false;
      if (this.nameMsgId != that.nameMsgId)
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_ModelResource = true && this.isSetModelResource();
    boolean that_present_ModelResource = true && that.isSetModelResource();
    if (this_present_ModelResource || that_present_ModelResource) {
      if (!(this_present_ModelResource && that_present_ModelResource))
        return false;
      if (!this.ModelResource.equals(that.ModelResource))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CharactorConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameMsgId()).compareTo(other.isSetNameMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameMsgId, other.nameMsgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelResource()).compareTo(other.isSetModelResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ModelResource, other.ModelResource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CharactorConfig(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameMsgId:");
    sb.append(this.nameMsgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ModelResource:");
    if (this.ModelResource == null) {
      sb.append("null");
    } else {
      sb.append(this.ModelResource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CharactorConfigStandardSchemeFactory implements SchemeFactory {
    public CharactorConfigStandardScheme getScheme() {
      return new CharactorConfigStandardScheme();
    }
  }

  private static class CharactorConfigStandardScheme extends StandardScheme<CharactorConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CharactorConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nameMsgId = iprot.readI32();
              struct.setNameMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODEL_RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ModelResource = iprot.readString();
              struct.setModelResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CharactorConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAME_MSG_ID_FIELD_DESC);
      oprot.writeI32(struct.nameMsgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      if (struct.ModelResource != null) {
        oprot.writeFieldBegin(MODEL_RESOURCE_FIELD_DESC);
        oprot.writeString(struct.ModelResource);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CharactorConfigTupleSchemeFactory implements SchemeFactory {
    public CharactorConfigTupleScheme getScheme() {
      return new CharactorConfigTupleScheme();
    }
  }

  private static class CharactorConfigTupleScheme extends TupleScheme<CharactorConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CharactorConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNameMsgId()) {
        optionals.set(1);
      }
      if (struct.isSetSex()) {
        optionals.set(2);
      }
      if (struct.isSetModelResource()) {
        optionals.set(3);
      }
      if (struct.isSetAge()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNameMsgId()) {
        oprot.writeI32(struct.nameMsgId);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetModelResource()) {
        oprot.writeString(struct.ModelResource);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CharactorConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameMsgId = iprot.readI32();
        struct.setNameMsgIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ModelResource = iprot.readString();
        struct.setModelResourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
    }
  }

}

