/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StoryConfig implements org.apache.thrift.TBase<StoryConfig, StoryConfig._Fields>, java.io.Serializable, Cloneable, Comparable<StoryConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StoryConfig");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DIALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField TALKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("talkerId", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField IS_FOCUS_ON_TALKER_FIELD_DESC = new org.apache.thrift.protocol.TField("isFocusOnTalker", org.apache.thrift.protocol.TType.BOOL, (short)40);
  private static final org.apache.thrift.protocol.TField DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("delay", org.apache.thrift.protocol.TType.I32, (short)50);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StoryConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StoryConfigTupleSchemeFactory());
  }

  public int id; // required
  public int dialogId; // required
  public int talkerId; // required
  public boolean isFocusOnTalker; // required
  public int delay; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)10, "id"),
    DIALOG_ID((short)20, "dialogId"),
    TALKER_ID((short)30, "talkerId"),
    IS_FOCUS_ON_TALKER((short)40, "isFocusOnTalker"),
    DELAY((short)50, "delay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // ID
          return ID;
        case 20: // DIALOG_ID
          return DIALOG_ID;
        case 30: // TALKER_ID
          return TALKER_ID;
        case 40: // IS_FOCUS_ON_TALKER
          return IS_FOCUS_ON_TALKER;
        case 50: // DELAY
          return DELAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DIALOGID_ISSET_ID = 1;
  private static final int __TALKERID_ISSET_ID = 2;
  private static final int __ISFOCUSONTALKER_ISSET_ID = 3;
  private static final int __DELAY_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("dialogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TALKER_ID, new org.apache.thrift.meta_data.FieldMetaData("talkerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FOCUS_ON_TALKER, new org.apache.thrift.meta_data.FieldMetaData("isFocusOnTalker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELAY, new org.apache.thrift.meta_data.FieldMetaData("delay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StoryConfig.class, metaDataMap);
  }

  public StoryConfig() {
  }

  public StoryConfig(
    int id,
    int dialogId,
    int talkerId,
    boolean isFocusOnTalker,
    int delay)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.dialogId = dialogId;
    setDialogIdIsSet(true);
    this.talkerId = talkerId;
    setTalkerIdIsSet(true);
    this.isFocusOnTalker = isFocusOnTalker;
    setIsFocusOnTalkerIsSet(true);
    this.delay = delay;
    setDelayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StoryConfig(StoryConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.dialogId = other.dialogId;
    this.talkerId = other.talkerId;
    this.isFocusOnTalker = other.isFocusOnTalker;
    this.delay = other.delay;
  }

  public StoryConfig deepCopy() {
    return new StoryConfig(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setDialogIdIsSet(false);
    this.dialogId = 0;
    setTalkerIdIsSet(false);
    this.talkerId = 0;
    setIsFocusOnTalkerIsSet(false);
    this.isFocusOnTalker = false;
    setDelayIsSet(false);
    this.delay = 0;
  }

  public int getId() {
    return this.id;
  }

  public StoryConfig setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getDialogId() {
    return this.dialogId;
  }

  public StoryConfig setDialogId(int dialogId) {
    this.dialogId = dialogId;
    setDialogIdIsSet(true);
    return this;
  }

  public void unsetDialogId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIALOGID_ISSET_ID);
  }

  /** Returns true if field dialogId is set (has been assigned a value) and false otherwise */
  public boolean isSetDialogId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIALOGID_ISSET_ID);
  }

  public void setDialogIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIALOGID_ISSET_ID, value);
  }

  public int getTalkerId() {
    return this.talkerId;
  }

  public StoryConfig setTalkerId(int talkerId) {
    this.talkerId = talkerId;
    setTalkerIdIsSet(true);
    return this;
  }

  public void unsetTalkerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TALKERID_ISSET_ID);
  }

  /** Returns true if field talkerId is set (has been assigned a value) and false otherwise */
  public boolean isSetTalkerId() {
    return EncodingUtils.testBit(__isset_bitfield, __TALKERID_ISSET_ID);
  }

  public void setTalkerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TALKERID_ISSET_ID, value);
  }

  public boolean isIsFocusOnTalker() {
    return this.isFocusOnTalker;
  }

  public StoryConfig setIsFocusOnTalker(boolean isFocusOnTalker) {
    this.isFocusOnTalker = isFocusOnTalker;
    setIsFocusOnTalkerIsSet(true);
    return this;
  }

  public void unsetIsFocusOnTalker() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFOCUSONTALKER_ISSET_ID);
  }

  /** Returns true if field isFocusOnTalker is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFocusOnTalker() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFOCUSONTALKER_ISSET_ID);
  }

  public void setIsFocusOnTalkerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFOCUSONTALKER_ISSET_ID, value);
  }

  public int getDelay() {
    return this.delay;
  }

  public StoryConfig setDelay(int delay) {
    this.delay = delay;
    setDelayIsSet(true);
    return this;
  }

  public void unsetDelay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELAY_ISSET_ID);
  }

  /** Returns true if field delay is set (has been assigned a value) and false otherwise */
  public boolean isSetDelay() {
    return EncodingUtils.testBit(__isset_bitfield, __DELAY_ISSET_ID);
  }

  public void setDelayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case DIALOG_ID:
      if (value == null) {
        unsetDialogId();
      } else {
        setDialogId((Integer)value);
      }
      break;

    case TALKER_ID:
      if (value == null) {
        unsetTalkerId();
      } else {
        setTalkerId((Integer)value);
      }
      break;

    case IS_FOCUS_ON_TALKER:
      if (value == null) {
        unsetIsFocusOnTalker();
      } else {
        setIsFocusOnTalker((Boolean)value);
      }
      break;

    case DELAY:
      if (value == null) {
        unsetDelay();
      } else {
        setDelay((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case DIALOG_ID:
      return Integer.valueOf(getDialogId());

    case TALKER_ID:
      return Integer.valueOf(getTalkerId());

    case IS_FOCUS_ON_TALKER:
      return Boolean.valueOf(isIsFocusOnTalker());

    case DELAY:
      return Integer.valueOf(getDelay());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DIALOG_ID:
      return isSetDialogId();
    case TALKER_ID:
      return isSetTalkerId();
    case IS_FOCUS_ON_TALKER:
      return isSetIsFocusOnTalker();
    case DELAY:
      return isSetDelay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StoryConfig)
      return this.equals((StoryConfig)that);
    return false;
  }

  public boolean equals(StoryConfig that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_dialogId = true;
    boolean that_present_dialogId = true;
    if (this_present_dialogId || that_present_dialogId) {
      if (!(this_present_dialogId && that_present_dialogId))
        return false;
      if (this.dialogId != that.dialogId)
        return false;
    }

    boolean this_present_talkerId = true;
    boolean that_present_talkerId = true;
    if (this_present_talkerId || that_present_talkerId) {
      if (!(this_present_talkerId && that_present_talkerId))
        return false;
      if (this.talkerId != that.talkerId)
        return false;
    }

    boolean this_present_isFocusOnTalker = true;
    boolean that_present_isFocusOnTalker = true;
    if (this_present_isFocusOnTalker || that_present_isFocusOnTalker) {
      if (!(this_present_isFocusOnTalker && that_present_isFocusOnTalker))
        return false;
      if (this.isFocusOnTalker != that.isFocusOnTalker)
        return false;
    }

    boolean this_present_delay = true;
    boolean that_present_delay = true;
    if (this_present_delay || that_present_delay) {
      if (!(this_present_delay && that_present_delay))
        return false;
      if (this.delay != that.delay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StoryConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDialogId()).compareTo(other.isSetDialogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDialogId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogId, other.dialogId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTalkerId()).compareTo(other.isSetTalkerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTalkerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.talkerId, other.talkerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFocusOnTalker()).compareTo(other.isSetIsFocusOnTalker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFocusOnTalker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFocusOnTalker, other.isFocusOnTalker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelay()).compareTo(other.isSetDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delay, other.delay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StoryConfig(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dialogId:");
    sb.append(this.dialogId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("talkerId:");
    sb.append(this.talkerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFocusOnTalker:");
    sb.append(this.isFocusOnTalker);
    first = false;
    if (!first) sb.append(", ");
    sb.append("delay:");
    sb.append(this.delay);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StoryConfigStandardSchemeFactory implements SchemeFactory {
    public StoryConfigStandardScheme getScheme() {
      return new StoryConfigStandardScheme();
    }
  }

  private static class StoryConfigStandardScheme extends StandardScheme<StoryConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StoryConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DIALOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dialogId = iprot.readI32();
              struct.setDialogIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TALKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.talkerId = iprot.readI32();
              struct.setTalkerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // IS_FOCUS_ON_TALKER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFocusOnTalker = iprot.readBool();
              struct.setIsFocusOnTalkerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.delay = iprot.readI32();
              struct.setDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StoryConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIALOG_ID_FIELD_DESC);
      oprot.writeI32(struct.dialogId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TALKER_ID_FIELD_DESC);
      oprot.writeI32(struct.talkerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FOCUS_ON_TALKER_FIELD_DESC);
      oprot.writeBool(struct.isFocusOnTalker);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELAY_FIELD_DESC);
      oprot.writeI32(struct.delay);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StoryConfigTupleSchemeFactory implements SchemeFactory {
    public StoryConfigTupleScheme getScheme() {
      return new StoryConfigTupleScheme();
    }
  }

  private static class StoryConfigTupleScheme extends TupleScheme<StoryConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StoryConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDialogId()) {
        optionals.set(1);
      }
      if (struct.isSetTalkerId()) {
        optionals.set(2);
      }
      if (struct.isSetIsFocusOnTalker()) {
        optionals.set(3);
      }
      if (struct.isSetDelay()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDialogId()) {
        oprot.writeI32(struct.dialogId);
      }
      if (struct.isSetTalkerId()) {
        oprot.writeI32(struct.talkerId);
      }
      if (struct.isSetIsFocusOnTalker()) {
        oprot.writeBool(struct.isFocusOnTalker);
      }
      if (struct.isSetDelay()) {
        oprot.writeI32(struct.delay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StoryConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dialogId = iprot.readI32();
        struct.setDialogIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.talkerId = iprot.readI32();
        struct.setTalkerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isFocusOnTalker = iprot.readBool();
        struct.setIsFocusOnTalkerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.delay = iprot.readI32();
        struct.setDelayIsSet(true);
      }
    }
  }

}

