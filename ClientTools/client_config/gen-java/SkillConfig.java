/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SkillConfig implements org.apache.thrift.TBase<SkillConfig, SkillConfig._Fields>, java.io.Serializable, Cloneable, Comparable<SkillConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SkillConfig");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nameMessageId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DESC_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("descMessageId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField SKILL_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("skillIcon", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField ACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionId", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField SKILL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("skillType", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quality", org.apache.thrift.protocol.TType.I32, (short)70);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)80);
  private static final org.apache.thrift.protocol.TField BEGIN_CD_FIELD_DESC = new org.apache.thrift.protocol.TField("beginCd", org.apache.thrift.protocol.TType.I32, (short)81);
  private static final org.apache.thrift.protocol.TField INIT_CD_FIELD_DESC = new org.apache.thrift.protocol.TField("initCd", org.apache.thrift.protocol.TType.I32, (short)90);
  private static final org.apache.thrift.protocol.TField ADD_CD_FIELD_DESC = new org.apache.thrift.protocol.TField("addCd", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField PER_LIMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("perLimitId", org.apache.thrift.protocol.TType.I32, (short)110);
  private static final org.apache.thrift.protocol.TField PER_FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("perFuncId", org.apache.thrift.protocol.TType.I32, (short)120);
  private static final org.apache.thrift.protocol.TField TARGETE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targeteId", org.apache.thrift.protocol.TType.I32, (short)130);
  private static final org.apache.thrift.protocol.TField LIMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("limitId", org.apache.thrift.protocol.TType.I32, (short)140);
  private static final org.apache.thrift.protocol.TField FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("funcId", org.apache.thrift.protocol.TType.I32, (short)150);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SkillConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SkillConfigTupleSchemeFactory());
  }

  public int id; // required
  public int nameMessageId; // required
  public int descMessageId; // required
  public String skillIcon; // required
  public int actionId; // required
  public int priority; // required
  public int skillType; // required
  public int quality; // required
  public int level; // required
  public int beginCd; // required
  public int initCd; // required
  public int addCd; // required
  public int perLimitId; // required
  public int perFuncId; // required
  public int targeteId; // required
  public int limitId; // required
  public int funcId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME_MESSAGE_ID((short)10, "nameMessageId"),
    DESC_MESSAGE_ID((short)20, "descMessageId"),
    SKILL_ICON((short)30, "skillIcon"),
    ACTION_ID((short)40, "actionId"),
    PRIORITY((short)50, "priority"),
    SKILL_TYPE((short)60, "skillType"),
    QUALITY((short)70, "quality"),
    LEVEL((short)80, "level"),
    BEGIN_CD((short)81, "beginCd"),
    INIT_CD((short)90, "initCd"),
    ADD_CD((short)100, "addCd"),
    PER_LIMIT_ID((short)110, "perLimitId"),
    PER_FUNC_ID((short)120, "perFuncId"),
    TARGETE_ID((short)130, "targeteId"),
    LIMIT_ID((short)140, "limitId"),
    FUNC_ID((short)150, "funcId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 10: // NAME_MESSAGE_ID
          return NAME_MESSAGE_ID;
        case 20: // DESC_MESSAGE_ID
          return DESC_MESSAGE_ID;
        case 30: // SKILL_ICON
          return SKILL_ICON;
        case 40: // ACTION_ID
          return ACTION_ID;
        case 50: // PRIORITY
          return PRIORITY;
        case 60: // SKILL_TYPE
          return SKILL_TYPE;
        case 70: // QUALITY
          return QUALITY;
        case 80: // LEVEL
          return LEVEL;
        case 81: // BEGIN_CD
          return BEGIN_CD;
        case 90: // INIT_CD
          return INIT_CD;
        case 100: // ADD_CD
          return ADD_CD;
        case 110: // PER_LIMIT_ID
          return PER_LIMIT_ID;
        case 120: // PER_FUNC_ID
          return PER_FUNC_ID;
        case 130: // TARGETE_ID
          return TARGETE_ID;
        case 140: // LIMIT_ID
          return LIMIT_ID;
        case 150: // FUNC_ID
          return FUNC_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NAMEMESSAGEID_ISSET_ID = 1;
  private static final int __DESCMESSAGEID_ISSET_ID = 2;
  private static final int __ACTIONID_ISSET_ID = 3;
  private static final int __PRIORITY_ISSET_ID = 4;
  private static final int __SKILLTYPE_ISSET_ID = 5;
  private static final int __QUALITY_ISSET_ID = 6;
  private static final int __LEVEL_ISSET_ID = 7;
  private static final int __BEGINCD_ISSET_ID = 8;
  private static final int __INITCD_ISSET_ID = 9;
  private static final int __ADDCD_ISSET_ID = 10;
  private static final int __PERLIMITID_ISSET_ID = 11;
  private static final int __PERFUNCID_ISSET_ID = 12;
  private static final int __TARGETEID_ISSET_ID = 13;
  private static final int __LIMITID_ISSET_ID = 14;
  private static final int __FUNCID_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("nameMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESC_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("descMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKILL_ICON, new org.apache.thrift.meta_data.FieldMetaData("skillIcon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("actionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKILL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("skillType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUALITY, new org.apache.thrift.meta_data.FieldMetaData("quality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEGIN_CD, new org.apache.thrift.meta_data.FieldMetaData("beginCd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INIT_CD, new org.apache.thrift.meta_data.FieldMetaData("initCd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADD_CD, new org.apache.thrift.meta_data.FieldMetaData("addCd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_LIMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("perLimitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("perFuncId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGETE_ID, new org.apache.thrift.meta_data.FieldMetaData("targeteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("limitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("funcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SkillConfig.class, metaDataMap);
  }

  public SkillConfig() {
  }

  public SkillConfig(
    int id,
    int nameMessageId,
    int descMessageId,
    String skillIcon,
    int actionId,
    int priority,
    int skillType,
    int quality,
    int level,
    int beginCd,
    int initCd,
    int addCd,
    int perLimitId,
    int perFuncId,
    int targeteId,
    int limitId,
    int funcId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.nameMessageId = nameMessageId;
    setNameMessageIdIsSet(true);
    this.descMessageId = descMessageId;
    setDescMessageIdIsSet(true);
    this.skillIcon = skillIcon;
    this.actionId = actionId;
    setActionIdIsSet(true);
    this.priority = priority;
    setPriorityIsSet(true);
    this.skillType = skillType;
    setSkillTypeIsSet(true);
    this.quality = quality;
    setQualityIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.beginCd = beginCd;
    setBeginCdIsSet(true);
    this.initCd = initCd;
    setInitCdIsSet(true);
    this.addCd = addCd;
    setAddCdIsSet(true);
    this.perLimitId = perLimitId;
    setPerLimitIdIsSet(true);
    this.perFuncId = perFuncId;
    setPerFuncIdIsSet(true);
    this.targeteId = targeteId;
    setTargeteIdIsSet(true);
    this.limitId = limitId;
    setLimitIdIsSet(true);
    this.funcId = funcId;
    setFuncIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SkillConfig(SkillConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.nameMessageId = other.nameMessageId;
    this.descMessageId = other.descMessageId;
    if (other.isSetSkillIcon()) {
      this.skillIcon = other.skillIcon;
    }
    this.actionId = other.actionId;
    this.priority = other.priority;
    this.skillType = other.skillType;
    this.quality = other.quality;
    this.level = other.level;
    this.beginCd = other.beginCd;
    this.initCd = other.initCd;
    this.addCd = other.addCd;
    this.perLimitId = other.perLimitId;
    this.perFuncId = other.perFuncId;
    this.targeteId = other.targeteId;
    this.limitId = other.limitId;
    this.funcId = other.funcId;
  }

  public SkillConfig deepCopy() {
    return new SkillConfig(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setNameMessageIdIsSet(false);
    this.nameMessageId = 0;
    setDescMessageIdIsSet(false);
    this.descMessageId = 0;
    this.skillIcon = null;
    setActionIdIsSet(false);
    this.actionId = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    setSkillTypeIsSet(false);
    this.skillType = 0;
    setQualityIsSet(false);
    this.quality = 0;
    setLevelIsSet(false);
    this.level = 0;
    setBeginCdIsSet(false);
    this.beginCd = 0;
    setInitCdIsSet(false);
    this.initCd = 0;
    setAddCdIsSet(false);
    this.addCd = 0;
    setPerLimitIdIsSet(false);
    this.perLimitId = 0;
    setPerFuncIdIsSet(false);
    this.perFuncId = 0;
    setTargeteIdIsSet(false);
    this.targeteId = 0;
    setLimitIdIsSet(false);
    this.limitId = 0;
    setFuncIdIsSet(false);
    this.funcId = 0;
  }

  public int getId() {
    return this.id;
  }

  public SkillConfig setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getNameMessageId() {
    return this.nameMessageId;
  }

  public SkillConfig setNameMessageId(int nameMessageId) {
    this.nameMessageId = nameMessageId;
    setNameMessageIdIsSet(true);
    return this;
  }

  public void unsetNameMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID);
  }

  /** Returns true if field nameMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetNameMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID);
  }

  public void setNameMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID, value);
  }

  public int getDescMessageId() {
    return this.descMessageId;
  }

  public SkillConfig setDescMessageId(int descMessageId) {
    this.descMessageId = descMessageId;
    setDescMessageIdIsSet(true);
    return this;
  }

  public void unsetDescMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID);
  }

  /** Returns true if field descMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetDescMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID);
  }

  public void setDescMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID, value);
  }

  public String getSkillIcon() {
    return this.skillIcon;
  }

  public SkillConfig setSkillIcon(String skillIcon) {
    this.skillIcon = skillIcon;
    return this;
  }

  public void unsetSkillIcon() {
    this.skillIcon = null;
  }

  /** Returns true if field skillIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetSkillIcon() {
    return this.skillIcon != null;
  }

  public void setSkillIconIsSet(boolean value) {
    if (!value) {
      this.skillIcon = null;
    }
  }

  public int getActionId() {
    return this.actionId;
  }

  public SkillConfig setActionId(int actionId) {
    this.actionId = actionId;
    setActionIdIsSet(true);
    return this;
  }

  public void unsetActionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONID_ISSET_ID);
  }

  /** Returns true if field actionId is set (has been assigned a value) and false otherwise */
  public boolean isSetActionId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONID_ISSET_ID);
  }

  public void setActionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONID_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public SkillConfig setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public int getSkillType() {
    return this.skillType;
  }

  public SkillConfig setSkillType(int skillType) {
    this.skillType = skillType;
    setSkillTypeIsSet(true);
    return this;
  }

  public void unsetSkillType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKILLTYPE_ISSET_ID);
  }

  /** Returns true if field skillType is set (has been assigned a value) and false otherwise */
  public boolean isSetSkillType() {
    return EncodingUtils.testBit(__isset_bitfield, __SKILLTYPE_ISSET_ID);
  }

  public void setSkillTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKILLTYPE_ISSET_ID, value);
  }

  public int getQuality() {
    return this.quality;
  }

  public SkillConfig setQuality(int quality) {
    this.quality = quality;
    setQualityIsSet(true);
    return this;
  }

  public void unsetQuality() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  /** Returns true if field quality is set (has been assigned a value) and false otherwise */
  public boolean isSetQuality() {
    return EncodingUtils.testBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  public void setQualityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUALITY_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public SkillConfig setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getBeginCd() {
    return this.beginCd;
  }

  public SkillConfig setBeginCd(int beginCd) {
    this.beginCd = beginCd;
    setBeginCdIsSet(true);
    return this;
  }

  public void unsetBeginCd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINCD_ISSET_ID);
  }

  /** Returns true if field beginCd is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginCd() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINCD_ISSET_ID);
  }

  public void setBeginCdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINCD_ISSET_ID, value);
  }

  public int getInitCd() {
    return this.initCd;
  }

  public SkillConfig setInitCd(int initCd) {
    this.initCd = initCd;
    setInitCdIsSet(true);
    return this;
  }

  public void unsetInitCd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITCD_ISSET_ID);
  }

  /** Returns true if field initCd is set (has been assigned a value) and false otherwise */
  public boolean isSetInitCd() {
    return EncodingUtils.testBit(__isset_bitfield, __INITCD_ISSET_ID);
  }

  public void setInitCdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITCD_ISSET_ID, value);
  }

  public int getAddCd() {
    return this.addCd;
  }

  public SkillConfig setAddCd(int addCd) {
    this.addCd = addCd;
    setAddCdIsSet(true);
    return this;
  }

  public void unsetAddCd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDCD_ISSET_ID);
  }

  /** Returns true if field addCd is set (has been assigned a value) and false otherwise */
  public boolean isSetAddCd() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDCD_ISSET_ID);
  }

  public void setAddCdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDCD_ISSET_ID, value);
  }

  public int getPerLimitId() {
    return this.perLimitId;
  }

  public SkillConfig setPerLimitId(int perLimitId) {
    this.perLimitId = perLimitId;
    setPerLimitIdIsSet(true);
    return this;
  }

  public void unsetPerLimitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERLIMITID_ISSET_ID);
  }

  /** Returns true if field perLimitId is set (has been assigned a value) and false otherwise */
  public boolean isSetPerLimitId() {
    return EncodingUtils.testBit(__isset_bitfield, __PERLIMITID_ISSET_ID);
  }

  public void setPerLimitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERLIMITID_ISSET_ID, value);
  }

  public int getPerFuncId() {
    return this.perFuncId;
  }

  public SkillConfig setPerFuncId(int perFuncId) {
    this.perFuncId = perFuncId;
    setPerFuncIdIsSet(true);
    return this;
  }

  public void unsetPerFuncId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERFUNCID_ISSET_ID);
  }

  /** Returns true if field perFuncId is set (has been assigned a value) and false otherwise */
  public boolean isSetPerFuncId() {
    return EncodingUtils.testBit(__isset_bitfield, __PERFUNCID_ISSET_ID);
  }

  public void setPerFuncIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERFUNCID_ISSET_ID, value);
  }

  public int getTargeteId() {
    return this.targeteId;
  }

  public SkillConfig setTargeteId(int targeteId) {
    this.targeteId = targeteId;
    setTargeteIdIsSet(true);
    return this;
  }

  public void unsetTargeteId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETEID_ISSET_ID);
  }

  /** Returns true if field targeteId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargeteId() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETEID_ISSET_ID);
  }

  public void setTargeteIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETEID_ISSET_ID, value);
  }

  public int getLimitId() {
    return this.limitId;
  }

  public SkillConfig setLimitId(int limitId) {
    this.limitId = limitId;
    setLimitIdIsSet(true);
    return this;
  }

  public void unsetLimitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITID_ISSET_ID);
  }

  /** Returns true if field limitId is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitId() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITID_ISSET_ID);
  }

  public void setLimitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITID_ISSET_ID, value);
  }

  public int getFuncId() {
    return this.funcId;
  }

  public SkillConfig setFuncId(int funcId) {
    this.funcId = funcId;
    setFuncIdIsSet(true);
    return this;
  }

  public void unsetFuncId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNCID_ISSET_ID);
  }

  /** Returns true if field funcId is set (has been assigned a value) and false otherwise */
  public boolean isSetFuncId() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNCID_ISSET_ID);
  }

  public void setFuncIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNCID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME_MESSAGE_ID:
      if (value == null) {
        unsetNameMessageId();
      } else {
        setNameMessageId((Integer)value);
      }
      break;

    case DESC_MESSAGE_ID:
      if (value == null) {
        unsetDescMessageId();
      } else {
        setDescMessageId((Integer)value);
      }
      break;

    case SKILL_ICON:
      if (value == null) {
        unsetSkillIcon();
      } else {
        setSkillIcon((String)value);
      }
      break;

    case ACTION_ID:
      if (value == null) {
        unsetActionId();
      } else {
        setActionId((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case SKILL_TYPE:
      if (value == null) {
        unsetSkillType();
      } else {
        setSkillType((Integer)value);
      }
      break;

    case QUALITY:
      if (value == null) {
        unsetQuality();
      } else {
        setQuality((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case BEGIN_CD:
      if (value == null) {
        unsetBeginCd();
      } else {
        setBeginCd((Integer)value);
      }
      break;

    case INIT_CD:
      if (value == null) {
        unsetInitCd();
      } else {
        setInitCd((Integer)value);
      }
      break;

    case ADD_CD:
      if (value == null) {
        unsetAddCd();
      } else {
        setAddCd((Integer)value);
      }
      break;

    case PER_LIMIT_ID:
      if (value == null) {
        unsetPerLimitId();
      } else {
        setPerLimitId((Integer)value);
      }
      break;

    case PER_FUNC_ID:
      if (value == null) {
        unsetPerFuncId();
      } else {
        setPerFuncId((Integer)value);
      }
      break;

    case TARGETE_ID:
      if (value == null) {
        unsetTargeteId();
      } else {
        setTargeteId((Integer)value);
      }
      break;

    case LIMIT_ID:
      if (value == null) {
        unsetLimitId();
      } else {
        setLimitId((Integer)value);
      }
      break;

    case FUNC_ID:
      if (value == null) {
        unsetFuncId();
      } else {
        setFuncId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME_MESSAGE_ID:
      return Integer.valueOf(getNameMessageId());

    case DESC_MESSAGE_ID:
      return Integer.valueOf(getDescMessageId());

    case SKILL_ICON:
      return getSkillIcon();

    case ACTION_ID:
      return Integer.valueOf(getActionId());

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case SKILL_TYPE:
      return Integer.valueOf(getSkillType());

    case QUALITY:
      return Integer.valueOf(getQuality());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case BEGIN_CD:
      return Integer.valueOf(getBeginCd());

    case INIT_CD:
      return Integer.valueOf(getInitCd());

    case ADD_CD:
      return Integer.valueOf(getAddCd());

    case PER_LIMIT_ID:
      return Integer.valueOf(getPerLimitId());

    case PER_FUNC_ID:
      return Integer.valueOf(getPerFuncId());

    case TARGETE_ID:
      return Integer.valueOf(getTargeteId());

    case LIMIT_ID:
      return Integer.valueOf(getLimitId());

    case FUNC_ID:
      return Integer.valueOf(getFuncId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME_MESSAGE_ID:
      return isSetNameMessageId();
    case DESC_MESSAGE_ID:
      return isSetDescMessageId();
    case SKILL_ICON:
      return isSetSkillIcon();
    case ACTION_ID:
      return isSetActionId();
    case PRIORITY:
      return isSetPriority();
    case SKILL_TYPE:
      return isSetSkillType();
    case QUALITY:
      return isSetQuality();
    case LEVEL:
      return isSetLevel();
    case BEGIN_CD:
      return isSetBeginCd();
    case INIT_CD:
      return isSetInitCd();
    case ADD_CD:
      return isSetAddCd();
    case PER_LIMIT_ID:
      return isSetPerLimitId();
    case PER_FUNC_ID:
      return isSetPerFuncId();
    case TARGETE_ID:
      return isSetTargeteId();
    case LIMIT_ID:
      return isSetLimitId();
    case FUNC_ID:
      return isSetFuncId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SkillConfig)
      return this.equals((SkillConfig)that);
    return false;
  }

  public boolean equals(SkillConfig that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nameMessageId = true;
    boolean that_present_nameMessageId = true;
    if (this_present_nameMessageId || that_present_nameMessageId) {
      if (!(this_present_nameMessageId && that_present_nameMessageId))
        return false;
      if (this.nameMessageId != that.nameMessageId)
        return false;
    }

    boolean this_present_descMessageId = true;
    boolean that_present_descMessageId = true;
    if (this_present_descMessageId || that_present_descMessageId) {
      if (!(this_present_descMessageId && that_present_descMessageId))
        return false;
      if (this.descMessageId != that.descMessageId)
        return false;
    }

    boolean this_present_skillIcon = true && this.isSetSkillIcon();
    boolean that_present_skillIcon = true && that.isSetSkillIcon();
    if (this_present_skillIcon || that_present_skillIcon) {
      if (!(this_present_skillIcon && that_present_skillIcon))
        return false;
      if (!this.skillIcon.equals(that.skillIcon))
        return false;
    }

    boolean this_present_actionId = true;
    boolean that_present_actionId = true;
    if (this_present_actionId || that_present_actionId) {
      if (!(this_present_actionId && that_present_actionId))
        return false;
      if (this.actionId != that.actionId)
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_skillType = true;
    boolean that_present_skillType = true;
    if (this_present_skillType || that_present_skillType) {
      if (!(this_present_skillType && that_present_skillType))
        return false;
      if (this.skillType != that.skillType)
        return false;
    }

    boolean this_present_quality = true;
    boolean that_present_quality = true;
    if (this_present_quality || that_present_quality) {
      if (!(this_present_quality && that_present_quality))
        return false;
      if (this.quality != that.quality)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_beginCd = true;
    boolean that_present_beginCd = true;
    if (this_present_beginCd || that_present_beginCd) {
      if (!(this_present_beginCd && that_present_beginCd))
        return false;
      if (this.beginCd != that.beginCd)
        return false;
    }

    boolean this_present_initCd = true;
    boolean that_present_initCd = true;
    if (this_present_initCd || that_present_initCd) {
      if (!(this_present_initCd && that_present_initCd))
        return false;
      if (this.initCd != that.initCd)
        return false;
    }

    boolean this_present_addCd = true;
    boolean that_present_addCd = true;
    if (this_present_addCd || that_present_addCd) {
      if (!(this_present_addCd && that_present_addCd))
        return false;
      if (this.addCd != that.addCd)
        return false;
    }

    boolean this_present_perLimitId = true;
    boolean that_present_perLimitId = true;
    if (this_present_perLimitId || that_present_perLimitId) {
      if (!(this_present_perLimitId && that_present_perLimitId))
        return false;
      if (this.perLimitId != that.perLimitId)
        return false;
    }

    boolean this_present_perFuncId = true;
    boolean that_present_perFuncId = true;
    if (this_present_perFuncId || that_present_perFuncId) {
      if (!(this_present_perFuncId && that_present_perFuncId))
        return false;
      if (this.perFuncId != that.perFuncId)
        return false;
    }

    boolean this_present_targeteId = true;
    boolean that_present_targeteId = true;
    if (this_present_targeteId || that_present_targeteId) {
      if (!(this_present_targeteId && that_present_targeteId))
        return false;
      if (this.targeteId != that.targeteId)
        return false;
    }

    boolean this_present_limitId = true;
    boolean that_present_limitId = true;
    if (this_present_limitId || that_present_limitId) {
      if (!(this_present_limitId && that_present_limitId))
        return false;
      if (this.limitId != that.limitId)
        return false;
    }

    boolean this_present_funcId = true;
    boolean that_present_funcId = true;
    if (this_present_funcId || that_present_funcId) {
      if (!(this_present_funcId && that_present_funcId))
        return false;
      if (this.funcId != that.funcId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SkillConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameMessageId()).compareTo(other.isSetNameMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameMessageId, other.nameMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescMessageId()).compareTo(other.isSetDescMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descMessageId, other.descMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkillIcon()).compareTo(other.isSetSkillIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkillIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skillIcon, other.skillIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionId()).compareTo(other.isSetActionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionId, other.actionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkillType()).compareTo(other.isSetSkillType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkillType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skillType, other.skillType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuality()).compareTo(other.isSetQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quality, other.quality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginCd()).compareTo(other.isSetBeginCd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginCd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginCd, other.beginCd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitCd()).compareTo(other.isSetInitCd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitCd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initCd, other.initCd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddCd()).compareTo(other.isSetAddCd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddCd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addCd, other.addCd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerLimitId()).compareTo(other.isSetPerLimitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerLimitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perLimitId, other.perLimitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerFuncId()).compareTo(other.isSetPerFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perFuncId, other.perFuncId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargeteId()).compareTo(other.isSetTargeteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargeteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targeteId, other.targeteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitId()).compareTo(other.isSetLimitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitId, other.limitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuncId()).compareTo(other.isSetFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcId, other.funcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SkillConfig(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameMessageId:");
    sb.append(this.nameMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("descMessageId:");
    sb.append(this.descMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("skillIcon:");
    if (this.skillIcon == null) {
      sb.append("null");
    } else {
      sb.append(this.skillIcon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionId:");
    sb.append(this.actionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("skillType:");
    sb.append(this.skillType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quality:");
    sb.append(this.quality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginCd:");
    sb.append(this.beginCd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("initCd:");
    sb.append(this.initCd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addCd:");
    sb.append(this.addCd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perLimitId:");
    sb.append(this.perLimitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perFuncId:");
    sb.append(this.perFuncId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targeteId:");
    sb.append(this.targeteId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitId:");
    sb.append(this.limitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("funcId:");
    sb.append(this.funcId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SkillConfigStandardSchemeFactory implements SchemeFactory {
    public SkillConfigStandardScheme getScheme() {
      return new SkillConfigStandardScheme();
    }
  }

  private static class SkillConfigStandardScheme extends StandardScheme<SkillConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SkillConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NAME_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nameMessageId = iprot.readI32();
              struct.setNameMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DESC_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.descMessageId = iprot.readI32();
              struct.setDescMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SKILL_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.skillIcon = iprot.readString();
              struct.setSkillIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionId = iprot.readI32();
              struct.setActionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // SKILL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skillType = iprot.readI32();
              struct.setSkillTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quality = iprot.readI32();
              struct.setQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // BEGIN_CD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.beginCd = iprot.readI32();
              struct.setBeginCdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // INIT_CD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.initCd = iprot.readI32();
              struct.setInitCdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // ADD_CD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addCd = iprot.readI32();
              struct.setAddCdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // PER_LIMIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perLimitId = iprot.readI32();
              struct.setPerLimitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 120: // PER_FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perFuncId = iprot.readI32();
              struct.setPerFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 130: // TARGETE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targeteId = iprot.readI32();
              struct.setTargeteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 140: // LIMIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitId = iprot.readI32();
              struct.setLimitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 150: // FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.funcId = iprot.readI32();
              struct.setFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SkillConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAME_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.nameMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DESC_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.descMessageId);
      oprot.writeFieldEnd();
      if (struct.skillIcon != null) {
        oprot.writeFieldBegin(SKILL_ICON_FIELD_DESC);
        oprot.writeString(struct.skillIcon);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTION_ID_FIELD_DESC);
      oprot.writeI32(struct.actionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SKILL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.skillType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUALITY_FIELD_DESC);
      oprot.writeI32(struct.quality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEGIN_CD_FIELD_DESC);
      oprot.writeI32(struct.beginCd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INIT_CD_FIELD_DESC);
      oprot.writeI32(struct.initCd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADD_CD_FIELD_DESC);
      oprot.writeI32(struct.addCd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_LIMIT_ID_FIELD_DESC);
      oprot.writeI32(struct.perLimitId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_FUNC_ID_FIELD_DESC);
      oprot.writeI32(struct.perFuncId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGETE_ID_FIELD_DESC);
      oprot.writeI32(struct.targeteId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_ID_FIELD_DESC);
      oprot.writeI32(struct.limitId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUNC_ID_FIELD_DESC);
      oprot.writeI32(struct.funcId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SkillConfigTupleSchemeFactory implements SchemeFactory {
    public SkillConfigTupleScheme getScheme() {
      return new SkillConfigTupleScheme();
    }
  }

  private static class SkillConfigTupleScheme extends TupleScheme<SkillConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SkillConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNameMessageId()) {
        optionals.set(1);
      }
      if (struct.isSetDescMessageId()) {
        optionals.set(2);
      }
      if (struct.isSetSkillIcon()) {
        optionals.set(3);
      }
      if (struct.isSetActionId()) {
        optionals.set(4);
      }
      if (struct.isSetPriority()) {
        optionals.set(5);
      }
      if (struct.isSetSkillType()) {
        optionals.set(6);
      }
      if (struct.isSetQuality()) {
        optionals.set(7);
      }
      if (struct.isSetLevel()) {
        optionals.set(8);
      }
      if (struct.isSetBeginCd()) {
        optionals.set(9);
      }
      if (struct.isSetInitCd()) {
        optionals.set(10);
      }
      if (struct.isSetAddCd()) {
        optionals.set(11);
      }
      if (struct.isSetPerLimitId()) {
        optionals.set(12);
      }
      if (struct.isSetPerFuncId()) {
        optionals.set(13);
      }
      if (struct.isSetTargeteId()) {
        optionals.set(14);
      }
      if (struct.isSetLimitId()) {
        optionals.set(15);
      }
      if (struct.isSetFuncId()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNameMessageId()) {
        oprot.writeI32(struct.nameMessageId);
      }
      if (struct.isSetDescMessageId()) {
        oprot.writeI32(struct.descMessageId);
      }
      if (struct.isSetSkillIcon()) {
        oprot.writeString(struct.skillIcon);
      }
      if (struct.isSetActionId()) {
        oprot.writeI32(struct.actionId);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetSkillType()) {
        oprot.writeI32(struct.skillType);
      }
      if (struct.isSetQuality()) {
        oprot.writeI32(struct.quality);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetBeginCd()) {
        oprot.writeI32(struct.beginCd);
      }
      if (struct.isSetInitCd()) {
        oprot.writeI32(struct.initCd);
      }
      if (struct.isSetAddCd()) {
        oprot.writeI32(struct.addCd);
      }
      if (struct.isSetPerLimitId()) {
        oprot.writeI32(struct.perLimitId);
      }
      if (struct.isSetPerFuncId()) {
        oprot.writeI32(struct.perFuncId);
      }
      if (struct.isSetTargeteId()) {
        oprot.writeI32(struct.targeteId);
      }
      if (struct.isSetLimitId()) {
        oprot.writeI32(struct.limitId);
      }
      if (struct.isSetFuncId()) {
        oprot.writeI32(struct.funcId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SkillConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameMessageId = iprot.readI32();
        struct.setNameMessageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.descMessageId = iprot.readI32();
        struct.setDescMessageIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.skillIcon = iprot.readString();
        struct.setSkillIconIsSet(true);
      }
      if (incoming.get(4)) {
        struct.actionId = iprot.readI32();
        struct.setActionIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.skillType = iprot.readI32();
        struct.setSkillTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.quality = iprot.readI32();
        struct.setQualityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(9)) {
        struct.beginCd = iprot.readI32();
        struct.setBeginCdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.initCd = iprot.readI32();
        struct.setInitCdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.addCd = iprot.readI32();
        struct.setAddCdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.perLimitId = iprot.readI32();
        struct.setPerLimitIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.perFuncId = iprot.readI32();
        struct.setPerFuncIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.targeteId = iprot.readI32();
        struct.setTargeteIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.limitId = iprot.readI32();
        struct.setLimitIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.funcId = iprot.readI32();
        struct.setFuncIdIsSet(true);
      }
    }
  }

}

