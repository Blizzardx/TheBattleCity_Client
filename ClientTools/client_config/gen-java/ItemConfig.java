/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ItemConfig implements org.apache.thrift.TBase<ItemConfig, ItemConfig._Fields>, java.io.Serializable, Cloneable, Comparable<ItemConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ItemConfig");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NAME_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nameMessageId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField DESC_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("descMessageId", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField DROP_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("dropIcon", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quality", org.apache.thrift.protocol.TType.BYTE, (short)60);
  private static final org.apache.thrift.protocol.TField SELL_GOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("sellGold", org.apache.thrift.protocol.TType.I32, (short)70);
  private static final org.apache.thrift.protocol.TField USE_LIMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("useLimitId", org.apache.thrift.protocol.TType.I32, (short)80);
  private static final org.apache.thrift.protocol.TField USE_FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("useFuncId", org.apache.thrift.protocol.TType.I32, (short)90);
  private static final org.apache.thrift.protocol.TField ACCESS_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessMessageId", org.apache.thrift.protocol.TType.I32, (short)100);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ItemConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ItemConfigTupleSchemeFactory());
  }

  public int id; // required
  public int nameMessageId; // required
  public int descMessageId; // required
  public String icon; // required
  public String dropIcon; // required
  public byte quality; // required
  public int sellGold; // required
  public int useLimitId; // required
  public int useFuncId; // required
  public int accessMessageId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)10, "id"),
    NAME_MESSAGE_ID((short)20, "nameMessageId"),
    DESC_MESSAGE_ID((short)30, "descMessageId"),
    ICON((short)50, "icon"),
    DROP_ICON((short)51, "dropIcon"),
    QUALITY((short)60, "quality"),
    SELL_GOLD((short)70, "sellGold"),
    USE_LIMIT_ID((short)80, "useLimitId"),
    USE_FUNC_ID((short)90, "useFuncId"),
    ACCESS_MESSAGE_ID((short)100, "accessMessageId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // ID
          return ID;
        case 20: // NAME_MESSAGE_ID
          return NAME_MESSAGE_ID;
        case 30: // DESC_MESSAGE_ID
          return DESC_MESSAGE_ID;
        case 50: // ICON
          return ICON;
        case 51: // DROP_ICON
          return DROP_ICON;
        case 60: // QUALITY
          return QUALITY;
        case 70: // SELL_GOLD
          return SELL_GOLD;
        case 80: // USE_LIMIT_ID
          return USE_LIMIT_ID;
        case 90: // USE_FUNC_ID
          return USE_FUNC_ID;
        case 100: // ACCESS_MESSAGE_ID
          return ACCESS_MESSAGE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NAMEMESSAGEID_ISSET_ID = 1;
  private static final int __DESCMESSAGEID_ISSET_ID = 2;
  private static final int __QUALITY_ISSET_ID = 3;
  private static final int __SELLGOLD_ISSET_ID = 4;
  private static final int __USELIMITID_ISSET_ID = 5;
  private static final int __USEFUNCID_ISSET_ID = 6;
  private static final int __ACCESSMESSAGEID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("nameMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESC_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("descMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DROP_ICON, new org.apache.thrift.meta_data.FieldMetaData("dropIcon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUALITY, new org.apache.thrift.meta_data.FieldMetaData("quality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SELL_GOLD, new org.apache.thrift.meta_data.FieldMetaData("sellGold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_LIMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("useLimitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("useFuncId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("accessMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ItemConfig.class, metaDataMap);
  }

  public ItemConfig() {
  }

  public ItemConfig(
    int id,
    int nameMessageId,
    int descMessageId,
    String icon,
    String dropIcon,
    byte quality,
    int sellGold,
    int useLimitId,
    int useFuncId,
    int accessMessageId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.nameMessageId = nameMessageId;
    setNameMessageIdIsSet(true);
    this.descMessageId = descMessageId;
    setDescMessageIdIsSet(true);
    this.icon = icon;
    this.dropIcon = dropIcon;
    this.quality = quality;
    setQualityIsSet(true);
    this.sellGold = sellGold;
    setSellGoldIsSet(true);
    this.useLimitId = useLimitId;
    setUseLimitIdIsSet(true);
    this.useFuncId = useFuncId;
    setUseFuncIdIsSet(true);
    this.accessMessageId = accessMessageId;
    setAccessMessageIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ItemConfig(ItemConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.nameMessageId = other.nameMessageId;
    this.descMessageId = other.descMessageId;
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    if (other.isSetDropIcon()) {
      this.dropIcon = other.dropIcon;
    }
    this.quality = other.quality;
    this.sellGold = other.sellGold;
    this.useLimitId = other.useLimitId;
    this.useFuncId = other.useFuncId;
    this.accessMessageId = other.accessMessageId;
  }

  public ItemConfig deepCopy() {
    return new ItemConfig(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setNameMessageIdIsSet(false);
    this.nameMessageId = 0;
    setDescMessageIdIsSet(false);
    this.descMessageId = 0;
    this.icon = null;
    this.dropIcon = null;
    setQualityIsSet(false);
    this.quality = 0;
    setSellGoldIsSet(false);
    this.sellGold = 0;
    setUseLimitIdIsSet(false);
    this.useLimitId = 0;
    setUseFuncIdIsSet(false);
    this.useFuncId = 0;
    setAccessMessageIdIsSet(false);
    this.accessMessageId = 0;
  }

  public int getId() {
    return this.id;
  }

  public ItemConfig setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getNameMessageId() {
    return this.nameMessageId;
  }

  public ItemConfig setNameMessageId(int nameMessageId) {
    this.nameMessageId = nameMessageId;
    setNameMessageIdIsSet(true);
    return this;
  }

  public void unsetNameMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID);
  }

  /** Returns true if field nameMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetNameMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID);
  }

  public void setNameMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAMEMESSAGEID_ISSET_ID, value);
  }

  public int getDescMessageId() {
    return this.descMessageId;
  }

  public ItemConfig setDescMessageId(int descMessageId) {
    this.descMessageId = descMessageId;
    setDescMessageIdIsSet(true);
    return this;
  }

  public void unsetDescMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID);
  }

  /** Returns true if field descMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetDescMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID);
  }

  public void setDescMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DESCMESSAGEID_ISSET_ID, value);
  }

  public String getIcon() {
    return this.icon;
  }

  public ItemConfig setIcon(String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  public String getDropIcon() {
    return this.dropIcon;
  }

  public ItemConfig setDropIcon(String dropIcon) {
    this.dropIcon = dropIcon;
    return this;
  }

  public void unsetDropIcon() {
    this.dropIcon = null;
  }

  /** Returns true if field dropIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetDropIcon() {
    return this.dropIcon != null;
  }

  public void setDropIconIsSet(boolean value) {
    if (!value) {
      this.dropIcon = null;
    }
  }

  public byte getQuality() {
    return this.quality;
  }

  public ItemConfig setQuality(byte quality) {
    this.quality = quality;
    setQualityIsSet(true);
    return this;
  }

  public void unsetQuality() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  /** Returns true if field quality is set (has been assigned a value) and false otherwise */
  public boolean isSetQuality() {
    return EncodingUtils.testBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  public void setQualityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUALITY_ISSET_ID, value);
  }

  public int getSellGold() {
    return this.sellGold;
  }

  public ItemConfig setSellGold(int sellGold) {
    this.sellGold = sellGold;
    setSellGoldIsSet(true);
    return this;
  }

  public void unsetSellGold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLGOLD_ISSET_ID);
  }

  /** Returns true if field sellGold is set (has been assigned a value) and false otherwise */
  public boolean isSetSellGold() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLGOLD_ISSET_ID);
  }

  public void setSellGoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLGOLD_ISSET_ID, value);
  }

  public int getUseLimitId() {
    return this.useLimitId;
  }

  public ItemConfig setUseLimitId(int useLimitId) {
    this.useLimitId = useLimitId;
    setUseLimitIdIsSet(true);
    return this;
  }

  public void unsetUseLimitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USELIMITID_ISSET_ID);
  }

  /** Returns true if field useLimitId is set (has been assigned a value) and false otherwise */
  public boolean isSetUseLimitId() {
    return EncodingUtils.testBit(__isset_bitfield, __USELIMITID_ISSET_ID);
  }

  public void setUseLimitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USELIMITID_ISSET_ID, value);
  }

  public int getUseFuncId() {
    return this.useFuncId;
  }

  public ItemConfig setUseFuncId(int useFuncId) {
    this.useFuncId = useFuncId;
    setUseFuncIdIsSet(true);
    return this;
  }

  public void unsetUseFuncId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEFUNCID_ISSET_ID);
  }

  /** Returns true if field useFuncId is set (has been assigned a value) and false otherwise */
  public boolean isSetUseFuncId() {
    return EncodingUtils.testBit(__isset_bitfield, __USEFUNCID_ISSET_ID);
  }

  public void setUseFuncIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEFUNCID_ISSET_ID, value);
  }

  public int getAccessMessageId() {
    return this.accessMessageId;
  }

  public ItemConfig setAccessMessageId(int accessMessageId) {
    this.accessMessageId = accessMessageId;
    setAccessMessageIdIsSet(true);
    return this;
  }

  public void unsetAccessMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCESSMESSAGEID_ISSET_ID);
  }

  /** Returns true if field accessMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCESSMESSAGEID_ISSET_ID);
  }

  public void setAccessMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCESSMESSAGEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME_MESSAGE_ID:
      if (value == null) {
        unsetNameMessageId();
      } else {
        setNameMessageId((Integer)value);
      }
      break;

    case DESC_MESSAGE_ID:
      if (value == null) {
        unsetDescMessageId();
      } else {
        setDescMessageId((Integer)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case DROP_ICON:
      if (value == null) {
        unsetDropIcon();
      } else {
        setDropIcon((String)value);
      }
      break;

    case QUALITY:
      if (value == null) {
        unsetQuality();
      } else {
        setQuality((Byte)value);
      }
      break;

    case SELL_GOLD:
      if (value == null) {
        unsetSellGold();
      } else {
        setSellGold((Integer)value);
      }
      break;

    case USE_LIMIT_ID:
      if (value == null) {
        unsetUseLimitId();
      } else {
        setUseLimitId((Integer)value);
      }
      break;

    case USE_FUNC_ID:
      if (value == null) {
        unsetUseFuncId();
      } else {
        setUseFuncId((Integer)value);
      }
      break;

    case ACCESS_MESSAGE_ID:
      if (value == null) {
        unsetAccessMessageId();
      } else {
        setAccessMessageId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME_MESSAGE_ID:
      return Integer.valueOf(getNameMessageId());

    case DESC_MESSAGE_ID:
      return Integer.valueOf(getDescMessageId());

    case ICON:
      return getIcon();

    case DROP_ICON:
      return getDropIcon();

    case QUALITY:
      return Byte.valueOf(getQuality());

    case SELL_GOLD:
      return Integer.valueOf(getSellGold());

    case USE_LIMIT_ID:
      return Integer.valueOf(getUseLimitId());

    case USE_FUNC_ID:
      return Integer.valueOf(getUseFuncId());

    case ACCESS_MESSAGE_ID:
      return Integer.valueOf(getAccessMessageId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME_MESSAGE_ID:
      return isSetNameMessageId();
    case DESC_MESSAGE_ID:
      return isSetDescMessageId();
    case ICON:
      return isSetIcon();
    case DROP_ICON:
      return isSetDropIcon();
    case QUALITY:
      return isSetQuality();
    case SELL_GOLD:
      return isSetSellGold();
    case USE_LIMIT_ID:
      return isSetUseLimitId();
    case USE_FUNC_ID:
      return isSetUseFuncId();
    case ACCESS_MESSAGE_ID:
      return isSetAccessMessageId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ItemConfig)
      return this.equals((ItemConfig)that);
    return false;
  }

  public boolean equals(ItemConfig that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nameMessageId = true;
    boolean that_present_nameMessageId = true;
    if (this_present_nameMessageId || that_present_nameMessageId) {
      if (!(this_present_nameMessageId && that_present_nameMessageId))
        return false;
      if (this.nameMessageId != that.nameMessageId)
        return false;
    }

    boolean this_present_descMessageId = true;
    boolean that_present_descMessageId = true;
    if (this_present_descMessageId || that_present_descMessageId) {
      if (!(this_present_descMessageId && that_present_descMessageId))
        return false;
      if (this.descMessageId != that.descMessageId)
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_dropIcon = true && this.isSetDropIcon();
    boolean that_present_dropIcon = true && that.isSetDropIcon();
    if (this_present_dropIcon || that_present_dropIcon) {
      if (!(this_present_dropIcon && that_present_dropIcon))
        return false;
      if (!this.dropIcon.equals(that.dropIcon))
        return false;
    }

    boolean this_present_quality = true;
    boolean that_present_quality = true;
    if (this_present_quality || that_present_quality) {
      if (!(this_present_quality && that_present_quality))
        return false;
      if (this.quality != that.quality)
        return false;
    }

    boolean this_present_sellGold = true;
    boolean that_present_sellGold = true;
    if (this_present_sellGold || that_present_sellGold) {
      if (!(this_present_sellGold && that_present_sellGold))
        return false;
      if (this.sellGold != that.sellGold)
        return false;
    }

    boolean this_present_useLimitId = true;
    boolean that_present_useLimitId = true;
    if (this_present_useLimitId || that_present_useLimitId) {
      if (!(this_present_useLimitId && that_present_useLimitId))
        return false;
      if (this.useLimitId != that.useLimitId)
        return false;
    }

    boolean this_present_useFuncId = true;
    boolean that_present_useFuncId = true;
    if (this_present_useFuncId || that_present_useFuncId) {
      if (!(this_present_useFuncId && that_present_useFuncId))
        return false;
      if (this.useFuncId != that.useFuncId)
        return false;
    }

    boolean this_present_accessMessageId = true;
    boolean that_present_accessMessageId = true;
    if (this_present_accessMessageId || that_present_accessMessageId) {
      if (!(this_present_accessMessageId && that_present_accessMessageId))
        return false;
      if (this.accessMessageId != that.accessMessageId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ItemConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameMessageId()).compareTo(other.isSetNameMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameMessageId, other.nameMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescMessageId()).compareTo(other.isSetDescMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descMessageId, other.descMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDropIcon()).compareTo(other.isSetDropIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDropIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dropIcon, other.dropIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuality()).compareTo(other.isSetQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quality, other.quality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellGold()).compareTo(other.isSetSellGold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellGold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellGold, other.sellGold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseLimitId()).compareTo(other.isSetUseLimitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseLimitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useLimitId, other.useLimitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseFuncId()).compareTo(other.isSetUseFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useFuncId, other.useFuncId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessMessageId()).compareTo(other.isSetAccessMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessMessageId, other.accessMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ItemConfig(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameMessageId:");
    sb.append(this.nameMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("descMessageId:");
    sb.append(this.descMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("icon:");
    if (this.icon == null) {
      sb.append("null");
    } else {
      sb.append(this.icon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dropIcon:");
    if (this.dropIcon == null) {
      sb.append("null");
    } else {
      sb.append(this.dropIcon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quality:");
    sb.append(this.quality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellGold:");
    sb.append(this.sellGold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useLimitId:");
    sb.append(this.useLimitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useFuncId:");
    sb.append(this.useFuncId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessMessageId:");
    sb.append(this.accessMessageId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ItemConfigStandardSchemeFactory implements SchemeFactory {
    public ItemConfigStandardScheme getScheme() {
      return new ItemConfigStandardScheme();
    }
  }

  private static class ItemConfigStandardScheme extends StandardScheme<ItemConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ItemConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NAME_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nameMessageId = iprot.readI32();
              struct.setNameMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DESC_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.descMessageId = iprot.readI32();
              struct.setDescMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // DROP_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dropIcon = iprot.readString();
              struct.setDropIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.quality = iprot.readByte();
              struct.setQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // SELL_GOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellGold = iprot.readI32();
              struct.setSellGoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // USE_LIMIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.useLimitId = iprot.readI32();
              struct.setUseLimitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // USE_FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.useFuncId = iprot.readI32();
              struct.setUseFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // ACCESS_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accessMessageId = iprot.readI32();
              struct.setAccessMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ItemConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAME_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.nameMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DESC_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.descMessageId);
      oprot.writeFieldEnd();
      if (struct.icon != null) {
        oprot.writeFieldBegin(ICON_FIELD_DESC);
        oprot.writeString(struct.icon);
        oprot.writeFieldEnd();
      }
      if (struct.dropIcon != null) {
        oprot.writeFieldBegin(DROP_ICON_FIELD_DESC);
        oprot.writeString(struct.dropIcon);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUALITY_FIELD_DESC);
      oprot.writeByte(struct.quality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_GOLD_FIELD_DESC);
      oprot.writeI32(struct.sellGold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_LIMIT_ID_FIELD_DESC);
      oprot.writeI32(struct.useLimitId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_FUNC_ID_FIELD_DESC);
      oprot.writeI32(struct.useFuncId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCESS_MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.accessMessageId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ItemConfigTupleSchemeFactory implements SchemeFactory {
    public ItemConfigTupleScheme getScheme() {
      return new ItemConfigTupleScheme();
    }
  }

  private static class ItemConfigTupleScheme extends TupleScheme<ItemConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ItemConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNameMessageId()) {
        optionals.set(1);
      }
      if (struct.isSetDescMessageId()) {
        optionals.set(2);
      }
      if (struct.isSetIcon()) {
        optionals.set(3);
      }
      if (struct.isSetDropIcon()) {
        optionals.set(4);
      }
      if (struct.isSetQuality()) {
        optionals.set(5);
      }
      if (struct.isSetSellGold()) {
        optionals.set(6);
      }
      if (struct.isSetUseLimitId()) {
        optionals.set(7);
      }
      if (struct.isSetUseFuncId()) {
        optionals.set(8);
      }
      if (struct.isSetAccessMessageId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNameMessageId()) {
        oprot.writeI32(struct.nameMessageId);
      }
      if (struct.isSetDescMessageId()) {
        oprot.writeI32(struct.descMessageId);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetDropIcon()) {
        oprot.writeString(struct.dropIcon);
      }
      if (struct.isSetQuality()) {
        oprot.writeByte(struct.quality);
      }
      if (struct.isSetSellGold()) {
        oprot.writeI32(struct.sellGold);
      }
      if (struct.isSetUseLimitId()) {
        oprot.writeI32(struct.useLimitId);
      }
      if (struct.isSetUseFuncId()) {
        oprot.writeI32(struct.useFuncId);
      }
      if (struct.isSetAccessMessageId()) {
        oprot.writeI32(struct.accessMessageId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ItemConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameMessageId = iprot.readI32();
        struct.setNameMessageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.descMessageId = iprot.readI32();
        struct.setDescMessageIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dropIcon = iprot.readString();
        struct.setDropIconIsSet(true);
      }
      if (incoming.get(5)) {
        struct.quality = iprot.readByte();
        struct.setQualityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sellGold = iprot.readI32();
        struct.setSellGoldIsSet(true);
      }
      if (incoming.get(7)) {
        struct.useLimitId = iprot.readI32();
        struct.setUseLimitIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.useFuncId = iprot.readI32();
        struct.setUseFuncIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.accessMessageId = iprot.readI32();
        struct.setAccessMessageIdIsSet(true);
      }
    }
  }

}

